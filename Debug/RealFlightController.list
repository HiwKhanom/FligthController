
RealFlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ac4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009c5c  08009c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cbc  08009cbc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009cbc  08009cbc  00019cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cc4  08009cc4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc4  08009cc4  00019cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cc8  08009cc8  00019cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000084  08009d50  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08009d50  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014481  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d2  00000000  00000000  00034535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00036a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00037bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017059  00000000  00000000  00038c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001518b  00000000  00000000  0004fcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092918  00000000  00000000  00064e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7794  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f0c  00000000  00000000  000f77e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000084 	.word	0x20000084
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009c44 	.word	0x08009c44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000088 	.word	0x20000088
 80001d4:	08009c44 	.word	0x08009c44

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <BMP280_init>:

}CalibData;

CalibData calibData;

void BMP280_init(I2C_HandleTypeDef *hi2c){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af04      	add	r7, sp, #16
 8000d5e:	6078      	str	r0, [r7, #4]
	uint8_t writeBuffer;

	//soft reset
	writeBuffer = 0xB6;
 8000d60:	23b6      	movs	r3, #182	; 0xb6
 8000d62:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, BMP280_addr, BMP280_reset, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8000d64:	2305      	movs	r3, #5
 8000d66:	9302      	str	r3, [sp, #8]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	f107 030f 	add.w	r3, r7, #15
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2301      	movs	r3, #1
 8000d74:	22e0      	movs	r2, #224	; 0xe0
 8000d76:	21ec      	movs	r1, #236	; 0xec
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f004 f9d5 	bl	8005128 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000d7e:	2064      	movs	r0, #100	; 0x64
 8000d80:	f003 faa0 	bl	80042c4 <HAL_Delay>

	//set oversampling press, temp power mode
	writeBuffer = 0xEB;
 8000d84:	23eb      	movs	r3, #235	; 0xeb
 8000d86:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, BMP280_addr, BMP280_ctrl_meas, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8000d88:	2305      	movs	r3, #5
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	f107 030f 	add.w	r3, r7, #15
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	22f4      	movs	r2, #244	; 0xf4
 8000d9a:	21ec      	movs	r1, #236	; 0xec
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f004 f9c3 	bl	8005128 <HAL_I2C_Mem_Write>

	//set config
	writeBuffer = 0x0E;
 8000da2:	230e      	movs	r3, #14
 8000da4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, BMP280_addr, BMP280_config, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8000da6:	2305      	movs	r3, #5
 8000da8:	9302      	str	r3, [sp, #8]
 8000daa:	2301      	movs	r3, #1
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	f107 030f 	add.w	r3, r7, #15
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2301      	movs	r3, #1
 8000db6:	22f5      	movs	r2, #245	; 0xf5
 8000db8:	21ec      	movs	r1, #236	; 0xec
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f004 f9b4 	bl	8005128 <HAL_I2C_Mem_Write>
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <BMP280_readPressure>:
	HAL_I2C_Mem_Read(hi2c, BMP280_addr, BMP280_who_am_i, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
	if(readBuffer == BMP280_ID) return 1;
	else return 0;
}

void BMP280_readPressure(I2C_HandleTypeDef *hi2c, uint32_t *Data){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af04      	add	r7, sp, #16
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	uint8_t readPressBuffer[3];

	HAL_I2C_Mem_Read(hi2c, BMP280_addr, BMP280_press_msb, I2C_MEMADD_SIZE_8BIT, &readPressBuffer[0], 3, I2C_Timeout);
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	9302      	str	r3, [sp, #8]
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	22f7      	movs	r2, #247	; 0xf7
 8000de4:	21ec      	movs	r1, #236	; 0xec
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f004 fa98 	bl	800531c <HAL_I2C_Mem_Read>
	*Data = (uint32_t)((readPressBuffer[0] << 12) | (readPressBuffer[1] << 4)  |(readPressBuffer[2] >> 4));
 8000dec:	7b3b      	ldrb	r3, [r7, #12]
 8000dee:	031a      	lsls	r2, r3, #12
 8000df0:	7b7b      	ldrb	r3, [r7, #13]
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	4313      	orrs	r3, r2
 8000df6:	7bba      	ldrb	r2, [r7, #14]
 8000df8:	0912      	lsrs	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	461a      	mov	r2, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <BMP280_readTemperature>:

void BMP280_readTemperature(I2C_HandleTypeDef *hi2c, uint32_t *Data){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af04      	add	r7, sp, #16
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	uint8_t readTempBuffer[3];

	HAL_I2C_Mem_Read(hi2c, BMP280_addr, BMP280_temp_msb, I2C_MEMADD_SIZE_8BIT, &readTempBuffer[0], 3, I2C_Timeout);
 8000e16:	2305      	movs	r3, #5
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2301      	movs	r3, #1
 8000e26:	22fa      	movs	r2, #250	; 0xfa
 8000e28:	21ec      	movs	r1, #236	; 0xec
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f004 fa76 	bl	800531c <HAL_I2C_Mem_Read>
	*Data = (uint32_t)((readTempBuffer[0] << 9) | (readTempBuffer[1] << 1) |(readTempBuffer[2] >> 7));
 8000e30:	7b3b      	ldrb	r3, [r7, #12]
 8000e32:	025a      	lsls	r2, r3, #9
 8000e34:	7b7b      	ldrb	r3, [r7, #13]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	7bba      	ldrb	r2, [r7, #14]
 8000e3c:	09d2      	lsrs	r2, r2, #7
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	4313      	orrs	r3, r2
 8000e42:	461a      	mov	r2, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <BMP280_allRead>:

void BMP280_allRead(I2C_HandleTypeDef *hi2c, BMP280 *DataStruct){
 8000e50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e54:	b090      	sub	sp, #64	; 0x40
 8000e56:	af04      	add	r7, sp, #16
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
	uint8_t readCalibBuffer[24];

	uint32_t PrePressure;
	uint32_t PreTemp;

	HAL_I2C_Mem_Read(hi2c, BMP280_addr, BMP280_status, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	2301      	movs	r3, #1
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	22f3      	movs	r2, #243	; 0xf3
 8000e6e:	21ec      	movs	r1, #236	; 0xec
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f004 fa53 	bl	800531c <HAL_I2C_Mem_Read>

	if((readBuffer & 0x08) == 0x00){
 8000e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f040 8389 	bne.w	8001596 <BMP280_allRead+0x746>
		BMP280_readPressure(hi2c, &PrePressure);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff9c 	bl	8000dc8 <BMP280_readPressure>
		BMP280_readTemperature(hi2c, &PreTemp);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffb8 	bl	8000e0c <BMP280_readTemperature>

		HAL_I2C_Mem_Read(hi2c, BMP280_addr, BMP280_calib00, I2C_MEMADD_SIZE_8BIT, &readCalibBuffer[0], 24, I2C_Timeout);
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2318      	movs	r3, #24
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2288      	movs	r2, #136	; 0x88
 8000eae:	21ec      	movs	r1, #236	; 0xec
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f004 fa33 	bl	800531c <HAL_I2C_Mem_Read>
		calibData.dig_T1 = (uint16_t)((readCalibBuffer[1] << 8) | readCalibBuffer[0]);
 8000eb6:	7d7b      	ldrb	r3, [r7, #21]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	7d3b      	ldrb	r3, [r7, #20]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	4bc0      	ldr	r3, [pc, #768]	; (80011c8 <BMP280_allRead+0x378>)
 8000ec6:	801a      	strh	r2, [r3, #0]
		calibData.dig_T2 = (uint16_t)((readCalibBuffer[3] << 8) | readCalibBuffer[2]);
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	7dbb      	ldrb	r3, [r7, #22]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4bbb      	ldr	r3, [pc, #748]	; (80011c8 <BMP280_allRead+0x378>)
 8000eda:	805a      	strh	r2, [r3, #2]
		calibData.dig_T3 = (uint16_t)((readCalibBuffer[5] << 8) | readCalibBuffer[4]);
 8000edc:	7e7b      	ldrb	r3, [r7, #25]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	7e3b      	ldrb	r3, [r7, #24]
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4bb6      	ldr	r3, [pc, #728]	; (80011c8 <BMP280_allRead+0x378>)
 8000eee:	809a      	strh	r2, [r3, #4]
		calibData.dig_P1 = (uint16_t)((readCalibBuffer[7] << 8) | readCalibBuffer[6]);
 8000ef0:	7efb      	ldrb	r3, [r7, #27]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	7ebb      	ldrb	r3, [r7, #26]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4bb2      	ldr	r3, [pc, #712]	; (80011c8 <BMP280_allRead+0x378>)
 8000f00:	80da      	strh	r2, [r3, #6]
		calibData.dig_P2 = (uint16_t)((readCalibBuffer[9] << 8) | readCalibBuffer[8]);
 8000f02:	7f7b      	ldrb	r3, [r7, #29]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	7f3b      	ldrb	r3, [r7, #28]
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4bad      	ldr	r3, [pc, #692]	; (80011c8 <BMP280_allRead+0x378>)
 8000f14:	811a      	strh	r2, [r3, #8]
		calibData.dig_P3 = (uint16_t)((readCalibBuffer[11] << 8) | readCalibBuffer[10]);
 8000f16:	7ffb      	ldrb	r3, [r7, #31]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	7fbb      	ldrb	r3, [r7, #30]
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4ba8      	ldr	r3, [pc, #672]	; (80011c8 <BMP280_allRead+0x378>)
 8000f28:	815a      	strh	r2, [r3, #10]
		calibData.dig_P4 = (uint16_t)((readCalibBuffer[13] << 8) | readCalibBuffer[12]);
 8000f2a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4ba2      	ldr	r3, [pc, #648]	; (80011c8 <BMP280_allRead+0x378>)
 8000f40:	819a      	strh	r2, [r3, #12]
		calibData.dig_P5 = (uint16_t)((readCalibBuffer[15] << 8) | readCalibBuffer[14]);
 8000f42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b9c      	ldr	r3, [pc, #624]	; (80011c8 <BMP280_allRead+0x378>)
 8000f58:	81da      	strh	r2, [r3, #14]
		calibData.dig_P6 = (uint16_t)((readCalibBuffer[17] << 8) | readCalibBuffer[16]);
 8000f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b96      	ldr	r3, [pc, #600]	; (80011c8 <BMP280_allRead+0x378>)
 8000f70:	821a      	strh	r2, [r3, #16]
		calibData.dig_P7 = (uint16_t)((readCalibBuffer[19] << 8) | readCalibBuffer[18]);
 8000f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	4b90      	ldr	r3, [pc, #576]	; (80011c8 <BMP280_allRead+0x378>)
 8000f88:	825a      	strh	r2, [r3, #18]
		calibData.dig_P8 = (uint16_t)((readCalibBuffer[21] << 8) | readCalibBuffer[20]);
 8000f8a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b8a      	ldr	r3, [pc, #552]	; (80011c8 <BMP280_allRead+0x378>)
 8000fa0:	829a      	strh	r2, [r3, #20]
		calibData.dig_P9 = (uint16_t)((readCalibBuffer[23] << 8) | readCalibBuffer[22]);
 8000fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b84      	ldr	r3, [pc, #528]	; (80011c8 <BMP280_allRead+0x378>)
 8000fb8:	82da      	strh	r2, [r3, #22]

		//Cal Temp
		calibData.var1 = (((double)PreTemp)/16384.0 - ((double)calibData.dig_T1)/1024.0) * ((double)calibData.dig_T2);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fa4d 	bl	800045c <__aeabi_ui2d>
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b81      	ldr	r3, [pc, #516]	; (80011cc <BMP280_allRead+0x37c>)
 8000fc8:	f7ff fbec 	bl	80007a4 <__aeabi_ddiv>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4614      	mov	r4, r2
 8000fd2:	461d      	mov	r5, r3
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	; (80011c8 <BMP280_allRead+0x378>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa4e 	bl	800047c <__aeabi_i2d>
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	4b7a      	ldr	r3, [pc, #488]	; (80011d0 <BMP280_allRead+0x380>)
 8000fe6:	f7ff fbdd 	bl	80007a4 <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4620      	mov	r0, r4
 8000ff0:	4629      	mov	r1, r5
 8000ff2:	f7ff f8f5 	bl	80001e0 <__aeabi_dsub>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4614      	mov	r4, r2
 8000ffc:	461d      	mov	r5, r3
 8000ffe:	4b72      	ldr	r3, [pc, #456]	; (80011c8 <BMP280_allRead+0x378>)
 8001000:	885b      	ldrh	r3, [r3, #2]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa2a 	bl	800045c <__aeabi_ui2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4620      	mov	r0, r4
 800100e:	4629      	mov	r1, r5
 8001010:	f7ff fa9e 	bl	8000550 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fcca 	bl	80009b4 <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	4a69      	ldr	r2, [pc, #420]	; (80011c8 <BMP280_allRead+0x378>)
 8001024:	6193      	str	r3, [r2, #24]
		calibData.var2 = ((((double)PreTemp)/131072.0 - ((double)calibData.dig_T1)/8192.0) * (((double)PreTemp)/131072.0 - ((double)calibData.dig_T1)/8192.0)) * ((double)calibData.dig_T3);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fa17 	bl	800045c <__aeabi_ui2d>
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001036:	f7ff fbb5 	bl	80007a4 <__aeabi_ddiv>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4614      	mov	r4, r2
 8001040:	461d      	mov	r5, r3
 8001042:	4b61      	ldr	r3, [pc, #388]	; (80011c8 <BMP280_allRead+0x378>)
 8001044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa17 	bl	800047c <__aeabi_i2d>
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b60      	ldr	r3, [pc, #384]	; (80011d4 <BMP280_allRead+0x384>)
 8001054:	f7ff fba6 	bl	80007a4 <__aeabi_ddiv>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4620      	mov	r0, r4
 800105e:	4629      	mov	r1, r5
 8001060:	f7ff f8be 	bl	80001e0 <__aeabi_dsub>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4614      	mov	r4, r2
 800106a:	461d      	mov	r5, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f9f4 	bl	800045c <__aeabi_ui2d>
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800107c:	f7ff fb92 	bl	80007a4 <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4690      	mov	r8, r2
 8001086:	4699      	mov	r9, r3
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <BMP280_allRead+0x378>)
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f9f4 	bl	800047c <__aeabi_i2d>
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b4e      	ldr	r3, [pc, #312]	; (80011d4 <BMP280_allRead+0x384>)
 800109a:	f7ff fb83 	bl	80007a4 <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4640      	mov	r0, r8
 80010a4:	4649      	mov	r1, r9
 80010a6:	f7ff f89b 	bl	80001e0 <__aeabi_dsub>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4620      	mov	r0, r4
 80010b0:	4629      	mov	r1, r5
 80010b2:	f7ff fa4d 	bl	8000550 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4614      	mov	r4, r2
 80010bc:	461d      	mov	r5, r3
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <BMP280_allRead+0x378>)
 80010c0:	889b      	ldrh	r3, [r3, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f9ca 	bl	800045c <__aeabi_ui2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4620      	mov	r0, r4
 80010ce:	4629      	mov	r1, r5
 80010d0:	f7ff fa3e 	bl	8000550 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fc6a 	bl	80009b4 <__aeabi_d2f>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a39      	ldr	r2, [pc, #228]	; (80011c8 <BMP280_allRead+0x378>)
 80010e4:	61d3      	str	r3, [r2, #28]
		calibData.tfine = (uint32_t)(calibData.var1 + calibData.var2);
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <BMP280_allRead+0x378>)
 80010e8:	ed93 7a06 	vldr	s14, [r3, #24]
 80010ec:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <BMP280_allRead+0x378>)
 80010ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80010f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fa:	ee17 2a90 	vmov	r2, s15
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <BMP280_allRead+0x378>)
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
		DataStruct->Temp = (calibData.var1 + calibData.var2) / 5120.0;
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <BMP280_allRead+0x378>)
 8001104:	ed93 7a06 	vldr	s14, [r3, #24]
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <BMP280_allRead+0x378>)
 800110a:	edd3 7a07 	vldr	s15, [r3, #28]
 800110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001112:	ee17 0a90 	vmov	r0, s15
 8001116:	f7ff f9c3 	bl	80004a0 <__aeabi_f2d>
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <BMP280_allRead+0x388>)
 8001120:	f7ff fb40 	bl	80007a4 <__aeabi_ddiv>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fc22 	bl	8000974 <__aeabi_d2uiz>
 8001130:	4602      	mov	r2, r0
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	601a      	str	r2, [r3, #0]

		//Cal Pressure
		calibData.var1 = ((double)calibData.tfine/2.0) - 64000.0;
 8001136:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <BMP280_allRead+0x378>)
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f98e 	bl	800045c <__aeabi_ui2d>
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001148:	f7ff fb2c 	bl	80007a4 <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <BMP280_allRead+0x38c>)
 800115a:	f7ff f841 	bl	80001e0 <__aeabi_dsub>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fc25 	bl	80009b4 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <BMP280_allRead+0x378>)
 800116e:	6193      	str	r3, [r2, #24]
		calibData.var2 = calibData.var1 * calibData.var1 * ((double)calibData.dig_P6)/32768.0;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <BMP280_allRead+0x378>)
 8001172:	ed93 7a06 	vldr	s14, [r3, #24]
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <BMP280_allRead+0x378>)
 8001178:	edd3 7a06 	vldr	s15, [r3, #24]
 800117c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001180:	ee17 0a90 	vmov	r0, s15
 8001184:	f7ff f98c 	bl	80004a0 <__aeabi_f2d>
 8001188:	4604      	mov	r4, r0
 800118a:	460d      	mov	r5, r1
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <BMP280_allRead+0x378>)
 800118e:	8a1b      	ldrh	r3, [r3, #16]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f963 	bl	800045c <__aeabi_ui2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4620      	mov	r0, r4
 800119c:	4629      	mov	r1, r5
 800119e:	f7ff f9d7 	bl	8000550 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <BMP280_allRead+0x390>)
 80011b0:	f7ff faf8 	bl	80007a4 <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fbfa 	bl	80009b4 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a01      	ldr	r2, [pc, #4]	; (80011c8 <BMP280_allRead+0x378>)
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	e00d      	b.n	80011e4 <BMP280_allRead+0x394>
 80011c8:	200000a0 	.word	0x200000a0
 80011cc:	40d00000 	.word	0x40d00000
 80011d0:	40900000 	.word	0x40900000
 80011d4:	40c00000 	.word	0x40c00000
 80011d8:	40b40000 	.word	0x40b40000
 80011dc:	40ef4000 	.word	0x40ef4000
 80011e0:	40e00000 	.word	0x40e00000
		calibData.var2 = calibData.var2 + calibData.var1 * ((double)calibData.dig_P5) * 2.0;
 80011e4:	4bce      	ldr	r3, [pc, #824]	; (8001520 <BMP280_allRead+0x6d0>)
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f959 	bl	80004a0 <__aeabi_f2d>
 80011ee:	4604      	mov	r4, r0
 80011f0:	460d      	mov	r5, r1
 80011f2:	4bcb      	ldr	r3, [pc, #812]	; (8001520 <BMP280_allRead+0x6d0>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f952 	bl	80004a0 <__aeabi_f2d>
 80011fc:	4680      	mov	r8, r0
 80011fe:	4689      	mov	r9, r1
 8001200:	4bc7      	ldr	r3, [pc, #796]	; (8001520 <BMP280_allRead+0x6d0>)
 8001202:	89db      	ldrh	r3, [r3, #14]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f929 	bl	800045c <__aeabi_ui2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4640      	mov	r0, r8
 8001210:	4649      	mov	r1, r9
 8001212:	f7ff f99d 	bl	8000550 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	f7fe ffdf 	bl	80001e4 <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7fe ffd9 	bl	80001e4 <__adddf3>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fbbb 	bl	80009b4 <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4ab7      	ldr	r2, [pc, #732]	; (8001520 <BMP280_allRead+0x6d0>)
 8001242:	61d3      	str	r3, [r2, #28]
		calibData.var2 = (calibData.var2/4.0) + (((double)calibData.dig_P4) * 65536.0);
 8001244:	4bb6      	ldr	r3, [pc, #728]	; (8001520 <BMP280_allRead+0x6d0>)
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f929 	bl	80004a0 <__aeabi_f2d>
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4bb4      	ldr	r3, [pc, #720]	; (8001524 <BMP280_allRead+0x6d4>)
 8001254:	f7ff faa6 	bl	80007a4 <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4614      	mov	r4, r2
 800125e:	461d      	mov	r5, r3
 8001260:	4baf      	ldr	r3, [pc, #700]	; (8001520 <BMP280_allRead+0x6d0>)
 8001262:	899b      	ldrh	r3, [r3, #12]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f8f9 	bl	800045c <__aeabi_ui2d>
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4bae      	ldr	r3, [pc, #696]	; (8001528 <BMP280_allRead+0x6d8>)
 8001270:	f7ff f96e 	bl	8000550 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7fe ffb2 	bl	80001e4 <__adddf3>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fb94 	bl	80009b4 <__aeabi_d2f>
 800128c:	4603      	mov	r3, r0
 800128e:	4aa4      	ldr	r2, [pc, #656]	; (8001520 <BMP280_allRead+0x6d0>)
 8001290:	61d3      	str	r3, [r2, #28]
		calibData.var1 = (((double)calibData.dig_P3) * calibData.var1 * calibData.var1 / 524288.0 + ((double)calibData.dig_P2)*calibData.var1)/524288.0;
 8001292:	4ba3      	ldr	r3, [pc, #652]	; (8001520 <BMP280_allRead+0x6d0>)
 8001294:	895b      	ldrh	r3, [r3, #10]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f8e0 	bl	800045c <__aeabi_ui2d>
 800129c:	4604      	mov	r4, r0
 800129e:	460d      	mov	r5, r1
 80012a0:	4b9f      	ldr	r3, [pc, #636]	; (8001520 <BMP280_allRead+0x6d0>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f8fb 	bl	80004a0 <__aeabi_f2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff f94d 	bl	8000550 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	4b98      	ldr	r3, [pc, #608]	; (8001520 <BMP280_allRead+0x6d0>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f8ec 	bl	80004a0 <__aeabi_f2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff f93e 	bl	8000550 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b92      	ldr	r3, [pc, #584]	; (800152c <BMP280_allRead+0x6dc>)
 80012e2:	f7ff fa5f 	bl	80007a4 <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4690      	mov	r8, r2
 80012ec:	4699      	mov	r9, r3
 80012ee:	4b8c      	ldr	r3, [pc, #560]	; (8001520 <BMP280_allRead+0x6d0>)
 80012f0:	891b      	ldrh	r3, [r3, #8]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f8b2 	bl	800045c <__aeabi_ui2d>
 80012f8:	4604      	mov	r4, r0
 80012fa:	460d      	mov	r5, r1
 80012fc:	4b88      	ldr	r3, [pc, #544]	; (8001520 <BMP280_allRead+0x6d0>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f8cd 	bl	80004a0 <__aeabi_f2d>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7ff f91f 	bl	8000550 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4640      	mov	r0, r8
 8001318:	4649      	mov	r1, r9
 800131a:	f7fe ff63 	bl	80001e4 <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b80      	ldr	r3, [pc, #512]	; (800152c <BMP280_allRead+0x6dc>)
 800132c:	f7ff fa3a 	bl	80007a4 <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fb3c 	bl	80009b4 <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
 800133e:	4a78      	ldr	r2, [pc, #480]	; (8001520 <BMP280_allRead+0x6d0>)
 8001340:	6193      	str	r3, [r2, #24]
		calibData.var1 = (1.0 + calibData.var1/32768.0) * ((double)calibData.dig_P1);
 8001342:	4b77      	ldr	r3, [pc, #476]	; (8001520 <BMP280_allRead+0x6d0>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8aa 	bl	80004a0 <__aeabi_f2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b77      	ldr	r3, [pc, #476]	; (8001530 <BMP280_allRead+0x6e0>)
 8001352:	f7ff fa27 	bl	80007a4 <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b74      	ldr	r3, [pc, #464]	; (8001534 <BMP280_allRead+0x6e4>)
 8001364:	f7fe ff3e 	bl	80001e4 <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4614      	mov	r4, r2
 800136e:	461d      	mov	r5, r3
 8001370:	4b6b      	ldr	r3, [pc, #428]	; (8001520 <BMP280_allRead+0x6d0>)
 8001372:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f880 	bl	800047c <__aeabi_i2d>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4620      	mov	r0, r4
 8001382:	4629      	mov	r1, r5
 8001384:	f7ff f8e4 	bl	8000550 <__aeabi_dmul>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fb10 	bl	80009b4 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	4a62      	ldr	r2, [pc, #392]	; (8001520 <BMP280_allRead+0x6d0>)
 8001398:	6193      	str	r3, [r2, #24]
		calibData.p = 1048576.0 - (double)PrePressure;
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f85d 	bl	800045c <__aeabi_ui2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	f04f 0000 	mov.w	r0, #0
 80013aa:	4963      	ldr	r1, [pc, #396]	; (8001538 <BMP280_allRead+0x6e8>)
 80013ac:	f7fe ff18 	bl	80001e0 <__aeabi_dsub>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fafc 	bl	80009b4 <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a58      	ldr	r2, [pc, #352]	; (8001520 <BMP280_allRead+0x6d0>)
 80013c0:	6213      	str	r3, [r2, #32]
		calibData.p = (calibData.p - (calibData.var2/4096.0)) * 6250.0 / calibData.var1;
 80013c2:	4b57      	ldr	r3, [pc, #348]	; (8001520 <BMP280_allRead+0x6d0>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f86a 	bl	80004a0 <__aeabi_f2d>
 80013cc:	4604      	mov	r4, r0
 80013ce:	460d      	mov	r5, r1
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <BMP280_allRead+0x6d0>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f863 	bl	80004a0 <__aeabi_f2d>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b57      	ldr	r3, [pc, #348]	; (800153c <BMP280_allRead+0x6ec>)
 80013e0:	f7ff f9e0 	bl	80007a4 <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4620      	mov	r0, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	f7fe fef8 	bl	80001e0 <__aeabi_dsub>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	a347      	add	r3, pc, #284	; (adr r3, 8001518 <BMP280_allRead+0x6c8>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f8a7 	bl	8000550 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4614      	mov	r4, r2
 8001408:	461d      	mov	r5, r3
 800140a:	4b45      	ldr	r3, [pc, #276]	; (8001520 <BMP280_allRead+0x6d0>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f846 	bl	80004a0 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4620      	mov	r0, r4
 800141a:	4629      	mov	r1, r5
 800141c:	f7ff f9c2 	bl	80007a4 <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fac4 	bl	80009b4 <__aeabi_d2f>
 800142c:	4603      	mov	r3, r0
 800142e:	4a3c      	ldr	r2, [pc, #240]	; (8001520 <BMP280_allRead+0x6d0>)
 8001430:	6213      	str	r3, [r2, #32]
		calibData.var1 = ((double)calibData.dig_P9) * calibData.p * calibData.p / 2147483648.0;
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <BMP280_allRead+0x6d0>)
 8001434:	8adb      	ldrh	r3, [r3, #22]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f810 	bl	800045c <__aeabi_ui2d>
 800143c:	4604      	mov	r4, r0
 800143e:	460d      	mov	r5, r1
 8001440:	4b37      	ldr	r3, [pc, #220]	; (8001520 <BMP280_allRead+0x6d0>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f82b 	bl	80004a0 <__aeabi_f2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f7ff f87d 	bl	8000550 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4614      	mov	r4, r2
 800145c:	461d      	mov	r5, r3
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <BMP280_allRead+0x6d0>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f81c 	bl	80004a0 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4620      	mov	r0, r4
 800146e:	4629      	mov	r1, r5
 8001470:	f7ff f86e 	bl	8000550 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <BMP280_allRead+0x6f0>)
 8001482:	f7ff f98f 	bl	80007a4 <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fa91 	bl	80009b4 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a22      	ldr	r2, [pc, #136]	; (8001520 <BMP280_allRead+0x6d0>)
 8001496:	6193      	str	r3, [r2, #24]
		calibData.var2 = calibData.p * ((double)calibData.dig_P8) / 32768.0;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <BMP280_allRead+0x6d0>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ffff 	bl	80004a0 <__aeabi_f2d>
 80014a2:	4604      	mov	r4, r0
 80014a4:	460d      	mov	r5, r1
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <BMP280_allRead+0x6d0>)
 80014a8:	8a9b      	ldrh	r3, [r3, #20]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe ffd6 	bl	800045c <__aeabi_ui2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7ff f84a 	bl	8000550 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <BMP280_allRead+0x6e0>)
 80014ca:	f7ff f96b 	bl	80007a4 <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fa6d 	bl	80009b4 <__aeabi_d2f>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a10      	ldr	r2, [pc, #64]	; (8001520 <BMP280_allRead+0x6d0>)
 80014de:	61d3      	str	r3, [r2, #28]
		calibData.p = calibData.p + (calibData.var1 + calibData.var2 + ((double)calibData.dig_P7)) / 16.0;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <BMP280_allRead+0x6d0>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ffdb 	bl	80004a0 <__aeabi_f2d>
 80014ea:	4604      	mov	r4, r0
 80014ec:	460d      	mov	r5, r1
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <BMP280_allRead+0x6d0>)
 80014f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <BMP280_allRead+0x6d0>)
 80014f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	ee17 0a90 	vmov	r0, s15
 8001502:	f7fe ffcd 	bl	80004a0 <__aeabi_f2d>
 8001506:	4680      	mov	r8, r0
 8001508:	4689      	mov	r9, r1
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <BMP280_allRead+0x6d0>)
 800150c:	8a5b      	ldrh	r3, [r3, #18]
 800150e:	4618      	mov	r0, r3
 8001510:	e018      	b.n	8001544 <BMP280_allRead+0x6f4>
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	00000000 	.word	0x00000000
 800151c:	40b86a00 	.word	0x40b86a00
 8001520:	200000a0 	.word	0x200000a0
 8001524:	40100000 	.word	0x40100000
 8001528:	40f00000 	.word	0x40f00000
 800152c:	41200000 	.word	0x41200000
 8001530:	40e00000 	.word	0x40e00000
 8001534:	3ff00000 	.word	0x3ff00000
 8001538:	41300000 	.word	0x41300000
 800153c:	40b00000 	.word	0x40b00000
 8001540:	41e00000 	.word	0x41e00000
 8001544:	f7fe ff8a 	bl	800045c <__aeabi_ui2d>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4640      	mov	r0, r8
 800154e:	4649      	mov	r1, r9
 8001550:	f7fe fe48 	bl	80001e4 <__adddf3>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <BMP280_allRead+0x750>)
 8001562:	f7ff f91f 	bl	80007a4 <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4620      	mov	r0, r4
 800156c:	4629      	mov	r1, r5
 800156e:	f7fe fe39 	bl	80001e4 <__adddf3>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff fa1b 	bl	80009b4 <__aeabi_d2f>
 800157e:	4603      	mov	r3, r0
 8001580:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <BMP280_allRead+0x754>)
 8001582:	6213      	str	r3, [r2, #32]
		DataStruct->press = calibData.p;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <BMP280_allRead+0x754>)
 8001586:	edd3 7a08 	vldr	s15, [r3, #32]
 800158a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800158e:	ee17 2a90 	vmov	r2, s15
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	605a      	str	r2, [r3, #4]
	}
}
 8001596:	bf00      	nop
 8001598:	3730      	adds	r7, #48	; 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015a0:	40300000 	.word	0x40300000
 80015a4:	200000a0 	.word	0x200000a0

080015a8 <ICM20948_allRead>:
float eInt[3] = {0.0f, 0.0f, 0.0f};

float lin_ax, lin_ay, lin_az;
float a12, a22, a31, a32, a33;

void ICM20948_allRead(I2C_HandleTypeDef *hi2c, ICM20948 *DataStruct){
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	ed2d 8b04 	vpush	{d8-d9}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af04      	add	r7, sp, #16
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	uint8_t readBuffer;

	select_user_bank(hi2c, usr_bank0);
 80015b6:	2100      	movs	r1, #0
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fb41 	bl	8001c40 <select_user_bank>

	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, INT_STATUS_1, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 80015be:	2305      	movs	r3, #5
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	2301      	movs	r3, #1
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	f107 030f 	add.w	r3, r7, #15
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	221a      	movs	r2, #26
 80015d0:	21d2      	movs	r1, #210	; 0xd2
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f003 fea2 	bl	800531c <HAL_I2C_Mem_Read>
	if(readBuffer & 0x01){
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 82fd 	beq.w	8001bde <ICM20948_allRead+0x636>
		ICM20948_readAccel(hi2c, accelOut);
 80015e4:	49c2      	ldr	r1, [pc, #776]	; (80018f0 <ICM20948_allRead+0x348>)
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fe7c 	bl	80022e4 <ICM20948_readAccel>
		ax = (float)accelOut[0] / AscaleFac;
 80015ec:	4bc0      	ldr	r3, [pc, #768]	; (80018f0 <ICM20948_allRead+0x348>)
 80015ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015fa:	4bbe      	ldr	r3, [pc, #760]	; (80018f4 <ICM20948_allRead+0x34c>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160a:	4bbb      	ldr	r3, [pc, #748]	; (80018f8 <ICM20948_allRead+0x350>)
 800160c:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelOut[1] / AscaleFac;
 8001610:	4bb7      	ldr	r3, [pc, #732]	; (80018f0 <ICM20948_allRead+0x348>)
 8001612:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800161e:	4bb5      	ldr	r3, [pc, #724]	; (80018f4 <ICM20948_allRead+0x34c>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800162e:	4bb3      	ldr	r3, [pc, #716]	; (80018fc <ICM20948_allRead+0x354>)
 8001630:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelOut[2] / AscaleFac;
 8001634:	4bae      	ldr	r3, [pc, #696]	; (80018f0 <ICM20948_allRead+0x348>)
 8001636:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001642:	4bac      	ldr	r3, [pc, #688]	; (80018f4 <ICM20948_allRead+0x34c>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001652:	4bab      	ldr	r3, [pc, #684]	; (8001900 <ICM20948_allRead+0x358>)
 8001654:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->AccelX = ax;
 8001658:	4ba7      	ldr	r3, [pc, #668]	; (80018f8 <ICM20948_allRead+0x350>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8001660:	4ba6      	ldr	r3, [pc, #664]	; (80018fc <ICM20948_allRead+0x354>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8001668:	4ba5      	ldr	r3, [pc, #660]	; (8001900 <ICM20948_allRead+0x358>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	609a      	str	r2, [r3, #8]

		ICM20948_readGyro(hi2c, gyroOut);
 8001670:	49a4      	ldr	r1, [pc, #656]	; (8001904 <ICM20948_allRead+0x35c>)
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fe6d 	bl	8002352 <ICM20948_readGyro>
		gx = (float)gyroOut[0] / GscaleFac;
 8001678:	4ba2      	ldr	r3, [pc, #648]	; (8001904 <ICM20948_allRead+0x35c>)
 800167a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001686:	4ba0      	ldr	r3, [pc, #640]	; (8001908 <ICM20948_allRead+0x360>)
 8001688:	ed93 7a00 	vldr	s14, [r3]
 800168c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001690:	4b9e      	ldr	r3, [pc, #632]	; (800190c <ICM20948_allRead+0x364>)
 8001692:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroOut[1] / GscaleFac;
 8001696:	4b9b      	ldr	r3, [pc, #620]	; (8001904 <ICM20948_allRead+0x35c>)
 8001698:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a4:	4b98      	ldr	r3, [pc, #608]	; (8001908 <ICM20948_allRead+0x360>)
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ae:	4b98      	ldr	r3, [pc, #608]	; (8001910 <ICM20948_allRead+0x368>)
 80016b0:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroOut[2] / GscaleFac;
 80016b4:	4b93      	ldr	r3, [pc, #588]	; (8001904 <ICM20948_allRead+0x35c>)
 80016b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016c2:	4b91      	ldr	r3, [pc, #580]	; (8001908 <ICM20948_allRead+0x360>)
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016cc:	4b91      	ldr	r3, [pc, #580]	; (8001914 <ICM20948_allRead+0x36c>)
 80016ce:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->GyroX = gx;
 80016d2:	4b8e      	ldr	r3, [pc, #568]	; (800190c <ICM20948_allRead+0x364>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 80016da:	4b8d      	ldr	r3, [pc, #564]	; (8001910 <ICM20948_allRead+0x368>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 80016e2:	4b8c      	ldr	r3, [pc, #560]	; (8001914 <ICM20948_allRead+0x36c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	615a      	str	r2, [r3, #20]

		AK09916_readMagn(hi2c, magOut);
 80016ea:	498b      	ldr	r1, [pc, #556]	; (8001918 <ICM20948_allRead+0x370>)
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fe67 	bl	80023c0 <AK09916_readMagn>
		mx = (float)magOut[0] * 0.15;
 80016f2:	4b89      	ldr	r3, [pc, #548]	; (8001918 <ICM20948_allRead+0x370>)
 80016f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001700:	ee17 0a90 	vmov	r0, s15
 8001704:	f7fe fecc 	bl	80004a0 <__aeabi_f2d>
 8001708:	a375      	add	r3, pc, #468	; (adr r3, 80018e0 <ICM20948_allRead+0x338>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe ff1f 	bl	8000550 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff f94b 	bl	80009b4 <__aeabi_d2f>
 800171e:	4603      	mov	r3, r0
 8001720:	4a7e      	ldr	r2, [pc, #504]	; (800191c <ICM20948_allRead+0x374>)
 8001722:	6013      	str	r3, [r2, #0]
		my = (float)magOut[1] * 0.15;
 8001724:	4b7c      	ldr	r3, [pc, #496]	; (8001918 <ICM20948_allRead+0x370>)
 8001726:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001732:	ee17 0a90 	vmov	r0, s15
 8001736:	f7fe feb3 	bl	80004a0 <__aeabi_f2d>
 800173a:	a369      	add	r3, pc, #420	; (adr r3, 80018e0 <ICM20948_allRead+0x338>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7fe ff06 	bl	8000550 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f932 	bl	80009b4 <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4a73      	ldr	r2, [pc, #460]	; (8001920 <ICM20948_allRead+0x378>)
 8001754:	6013      	str	r3, [r2, #0]
		mz = (float)magOut[2] * 0.15;
 8001756:	4b70      	ldr	r3, [pc, #448]	; (8001918 <ICM20948_allRead+0x370>)
 8001758:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe fe9a 	bl	80004a0 <__aeabi_f2d>
 800176c:	a35c      	add	r3, pc, #368	; (adr r3, 80018e0 <ICM20948_allRead+0x338>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7fe feed 	bl	8000550 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff f919 	bl	80009b4 <__aeabi_d2f>
 8001782:	4603      	mov	r3, r0
 8001784:	4a67      	ldr	r2, [pc, #412]	; (8001924 <ICM20948_allRead+0x37c>)
 8001786:	6013      	str	r3, [r2, #0]

		DataStruct->MagnX = mx;
 8001788:	4b64      	ldr	r3, [pc, #400]	; (800191c <ICM20948_allRead+0x374>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	619a      	str	r2, [r3, #24]
		DataStruct->MagnY = my;
 8001790:	4b63      	ldr	r3, [pc, #396]	; (8001920 <ICM20948_allRead+0x378>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	61da      	str	r2, [r3, #28]
		DataStruct->MagnZ = mz;
 8001798:	4b62      	ldr	r3, [pc, #392]	; (8001924 <ICM20948_allRead+0x37c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	621a      	str	r2, [r3, #32]

		now = HAL_GetTick();
 80017a0:	f002 fd84 	bl	80042ac <HAL_GetTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4a60      	ldr	r2, [pc, #384]	; (8001928 <ICM20948_allRead+0x380>)
 80017a8:	6013      	str	r3, [r2, #0]
		deltaT = ((now - lastUpdate) / 1000.0);
 80017aa:	4b5f      	ldr	r3, [pc, #380]	; (8001928 <ICM20948_allRead+0x380>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b5f      	ldr	r3, [pc, #380]	; (800192c <ICM20948_allRead+0x384>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe51 	bl	800045c <__aeabi_ui2d>
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <ICM20948_allRead+0x388>)
 80017c0:	f7fe fff0 	bl	80007a4 <__aeabi_ddiv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff f8f2 	bl	80009b4 <__aeabi_d2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4a58      	ldr	r2, [pc, #352]	; (8001934 <ICM20948_allRead+0x38c>)
 80017d4:	6013      	str	r3, [r2, #0]
		lastUpdate = now;
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <ICM20948_allRead+0x380>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a54      	ldr	r2, [pc, #336]	; (800192c <ICM20948_allRead+0x384>)
 80017dc:	6013      	str	r3, [r2, #0]
		sum += deltaT;
 80017de:	4b56      	ldr	r3, [pc, #344]	; (8001938 <ICM20948_allRead+0x390>)
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <ICM20948_allRead+0x38c>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	4b52      	ldr	r3, [pc, #328]	; (8001938 <ICM20948_allRead+0x390>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]

		QuaternionUpdate(ax, ay, az, gx * M_PI / 180.0f, gy * M_PI / 180.0f, gz * M_PI / 180.0f,  my,  mx, mz);
 80017f4:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <ICM20948_allRead+0x350>)
 80017f6:	ed93 8a00 	vldr	s16, [r3]
 80017fa:	4b40      	ldr	r3, [pc, #256]	; (80018fc <ICM20948_allRead+0x354>)
 80017fc:	edd3 8a00 	vldr	s17, [r3]
 8001800:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <ICM20948_allRead+0x358>)
 8001802:	ed93 9a00 	vldr	s18, [r3]
 8001806:	4b41      	ldr	r3, [pc, #260]	; (800190c <ICM20948_allRead+0x364>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fe48 	bl	80004a0 <__aeabi_f2d>
 8001810:	a335      	add	r3, pc, #212	; (adr r3, 80018e8 <ICM20948_allRead+0x340>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f7fe fe9b 	bl	8000550 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4b45      	ldr	r3, [pc, #276]	; (800193c <ICM20948_allRead+0x394>)
 8001828:	f7fe ffbc 	bl	80007a4 <__aeabi_ddiv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f8be 	bl	80009b4 <__aeabi_d2f>
 8001838:	4604      	mov	r4, r0
 800183a:	4b35      	ldr	r3, [pc, #212]	; (8001910 <ICM20948_allRead+0x368>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe2e 	bl	80004a0 <__aeabi_f2d>
 8001844:	a328      	add	r3, pc, #160	; (adr r3, 80018e8 <ICM20948_allRead+0x340>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fe81 	bl	8000550 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b38      	ldr	r3, [pc, #224]	; (800193c <ICM20948_allRead+0x394>)
 800185c:	f7fe ffa2 	bl	80007a4 <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f8a4 	bl	80009b4 <__aeabi_d2f>
 800186c:	4605      	mov	r5, r0
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <ICM20948_allRead+0x36c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe14 	bl	80004a0 <__aeabi_f2d>
 8001878:	a31b      	add	r3, pc, #108	; (adr r3, 80018e8 <ICM20948_allRead+0x340>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fe67 	bl	8000550 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <ICM20948_allRead+0x394>)
 8001890:	f7fe ff88 	bl	80007a4 <__aeabi_ddiv>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f88a 	bl	80009b4 <__aeabi_d2f>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <ICM20948_allRead+0x378>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <ICM20948_allRead+0x374>)
 80018aa:	ed93 7a00 	vldr	s14, [r3]
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <ICM20948_allRead+0x37c>)
 80018b0:	edd3 6a00 	vldr	s13, [r3]
 80018b4:	eeb0 4a66 	vmov.f32	s8, s13
 80018b8:	eef0 3a47 	vmov.f32	s7, s14
 80018bc:	eeb0 3a67 	vmov.f32	s6, s15
 80018c0:	ee02 2a90 	vmov	s5, r2
 80018c4:	ee02 5a10 	vmov	s4, r5
 80018c8:	ee01 4a90 	vmov	s3, r4
 80018cc:	eeb0 1a49 	vmov.f32	s2, s18
 80018d0:	eef0 0a68 	vmov.f32	s1, s17
 80018d4:	eeb0 0a48 	vmov.f32	s0, s16
 80018d8:	e032      	b.n	8001940 <ICM20948_allRead+0x398>
 80018da:	bf00      	nop
 80018dc:	f3af 8000 	nop.w
 80018e0:	33333333 	.word	0x33333333
 80018e4:	3fc33333 	.word	0x3fc33333
 80018e8:	54442d18 	.word	0x54442d18
 80018ec:	400921fb 	.word	0x400921fb
 80018f0:	200000d8 	.word	0x200000d8
 80018f4:	200000cc 	.word	0x200000cc
 80018f8:	20000104 	.word	0x20000104
 80018fc:	20000108 	.word	0x20000108
 8001900:	2000010c 	.word	0x2000010c
 8001904:	200000d0 	.word	0x200000d0
 8001908:	200000c8 	.word	0x200000c8
 800190c:	20000110 	.word	0x20000110
 8001910:	20000114 	.word	0x20000114
 8001914:	20000118 	.word	0x20000118
 8001918:	200000e0 	.word	0x200000e0
 800191c:	2000011c 	.word	0x2000011c
 8001920:	20000120 	.word	0x20000120
 8001924:	20000124 	.word	0x20000124
 8001928:	20000100 	.word	0x20000100
 800192c:	200000fc 	.word	0x200000fc
 8001930:	408f4000 	.word	0x408f4000
 8001934:	200000f4 	.word	0x200000f4
 8001938:	200000f8 	.word	0x200000f8
 800193c:	40668000 	.word	0x40668000
 8001940:	f000 fe4c 	bl	80025dc <QuaternionUpdate>

		a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8001944:	4bac      	ldr	r3, [pc, #688]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001946:	ed93 7a01 	vldr	s14, [r3, #4]
 800194a:	4bab      	ldr	r3, [pc, #684]	; (8001bf8 <ICM20948_allRead+0x650>)
 800194c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001954:	4ba8      	ldr	r3, [pc, #672]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001956:	edd3 6a00 	vldr	s13, [r3]
 800195a:	4ba7      	ldr	r3, [pc, #668]	; (8001bf8 <ICM20948_allRead+0x650>)
 800195c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800196c:	4ba3      	ldr	r3, [pc, #652]	; (8001bfc <ICM20948_allRead+0x654>)
 800196e:	edc3 7a00 	vstr	s15, [r3]
		a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8001972:	4ba1      	ldr	r3, [pc, #644]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001974:	ed93 7a00 	vldr	s14, [r3]
 8001978:	4b9f      	ldr	r3, [pc, #636]	; (8001bf8 <ICM20948_allRead+0x650>)
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001982:	4b9d      	ldr	r3, [pc, #628]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001984:	edd3 6a01 	vldr	s13, [r3, #4]
 8001988:	4b9b      	ldr	r3, [pc, #620]	; (8001bf8 <ICM20948_allRead+0x650>)
 800198a:	edd3 7a01 	vldr	s15, [r3, #4]
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001996:	4b98      	ldr	r3, [pc, #608]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001998:	edd3 6a02 	vldr	s13, [r3, #8]
 800199c:	4b96      	ldr	r3, [pc, #600]	; (8001bf8 <ICM20948_allRead+0x650>)
 800199e:	edd3 7a02 	vldr	s15, [r3, #8]
 80019a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019aa:	4b93      	ldr	r3, [pc, #588]	; (8001bf8 <ICM20948_allRead+0x650>)
 80019ac:	edd3 6a03 	vldr	s13, [r3, #12]
 80019b0:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <ICM20948_allRead+0x650>)
 80019b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019be:	4b90      	ldr	r3, [pc, #576]	; (8001c00 <ICM20948_allRead+0x658>)
 80019c0:	edc3 7a00 	vstr	s15, [r3]
		a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 80019c4:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <ICM20948_allRead+0x650>)
 80019c6:	ed93 7a00 	vldr	s14, [r3]
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <ICM20948_allRead+0x650>)
 80019cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80019d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d4:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <ICM20948_allRead+0x650>)
 80019d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80019da:	4b87      	ldr	r3, [pc, #540]	; (8001bf8 <ICM20948_allRead+0x650>)
 80019dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80019e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019ec:	4b85      	ldr	r3, [pc, #532]	; (8001c04 <ICM20948_allRead+0x65c>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]
		a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 80019f2:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <ICM20948_allRead+0x650>)
 80019f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f8:	4b7f      	ldr	r3, [pc, #508]	; (8001bf8 <ICM20948_allRead+0x650>)
 80019fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80019fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a02:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001a04:	edd3 6a00 	vldr	s13, [r3]
 8001a08:	4b7b      	ldr	r3, [pc, #492]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001a0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a1a:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <ICM20948_allRead+0x660>)
 8001a1c:	edc3 7a00 	vstr	s15, [r3]
		a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 8001a20:	4b75      	ldr	r3, [pc, #468]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001a22:	ed93 7a00 	vldr	s14, [r3]
 8001a26:	4b74      	ldr	r3, [pc, #464]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a30:	4b71      	ldr	r3, [pc, #452]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001a32:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a36:	4b70      	ldr	r3, [pc, #448]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001a38:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a44:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001a46:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a4a:	4b6b      	ldr	r3, [pc, #428]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001a4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a58:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001a5a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a5e:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <ICM20948_allRead+0x650>)
 8001a60:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6c:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <ICM20948_allRead+0x664>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]

		pitch = -asinf(a32);
 8001a72:	4b65      	ldr	r3, [pc, #404]	; (8001c08 <ICM20948_allRead+0x660>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	f007 fe2a 	bl	80096d4 <asinf>
 8001a80:	eef0 7a40 	vmov.f32	s15, s0
 8001a84:	eef1 7a67 	vneg.f32	s15, s15
 8001a88:	4b61      	ldr	r3, [pc, #388]	; (8001c10 <ICM20948_allRead+0x668>)
 8001a8a:	edc3 7a00 	vstr	s15, [r3]
		roll  = atan2f(a31, a33);
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <ICM20948_allRead+0x65c>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	4b5d      	ldr	r3, [pc, #372]	; (8001c0c <ICM20948_allRead+0x664>)
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	eef0 0a47 	vmov.f32	s1, s14
 8001a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa2:	f007 fe43 	bl	800972c <atan2f>
 8001aa6:	eef0 7a40 	vmov.f32	s15, s0
 8001aaa:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <ICM20948_allRead+0x66c>)
 8001aac:	edc3 7a00 	vstr	s15, [r3]
		yaw   = atan2f(a12, a22);
 8001ab0:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <ICM20948_allRead+0x654>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	4b52      	ldr	r3, [pc, #328]	; (8001c00 <ICM20948_allRead+0x658>)
 8001ab8:	ed93 7a00 	vldr	s14, [r3]
 8001abc:	eef0 0a47 	vmov.f32	s1, s14
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	f007 fe32 	bl	800972c <atan2f>
 8001ac8:	eef0 7a40 	vmov.f32	s15, s0
 8001acc:	4b52      	ldr	r3, [pc, #328]	; (8001c18 <ICM20948_allRead+0x670>)
 8001ace:	edc3 7a00 	vstr	s15, [r3]
		pitch *= 180.0f / M_PI;
 8001ad2:	4b4f      	ldr	r3, [pc, #316]	; (8001c10 <ICM20948_allRead+0x668>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fce2 	bl	80004a0 <__aeabi_f2d>
 8001adc:	a344      	add	r3, pc, #272	; (adr r3, 8001bf0 <ICM20948_allRead+0x648>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fd35 	bl	8000550 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7fe ff61 	bl	80009b4 <__aeabi_d2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a46      	ldr	r2, [pc, #280]	; (8001c10 <ICM20948_allRead+0x668>)
 8001af6:	6013      	str	r3, [r2, #0]
		yaw   *= 180.0f / M_PI;
 8001af8:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <ICM20948_allRead+0x670>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fccf 	bl	80004a0 <__aeabi_f2d>
 8001b02:	a33b      	add	r3, pc, #236	; (adr r3, 8001bf0 <ICM20948_allRead+0x648>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	f7fe fd22 	bl	8000550 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	f7fe ff4e 	bl	80009b4 <__aeabi_d2f>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4a3f      	ldr	r2, [pc, #252]	; (8001c18 <ICM20948_allRead+0x670>)
 8001b1c:	6013      	str	r3, [r2, #0]
		yaw   += 5.53f; // Declination
 8001b1e:	4b3e      	ldr	r3, [pc, #248]	; (8001c18 <ICM20948_allRead+0x670>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001c1c <ICM20948_allRead+0x674>
 8001b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <ICM20948_allRead+0x670>)
 8001b2e:	edc3 7a00 	vstr	s15, [r3]

		if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 8001b32:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <ICM20948_allRead+0x670>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	d509      	bpl.n	8001b56 <ICM20948_allRead+0x5ae>
 8001b42:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <ICM20948_allRead+0x670>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001c20 <ICM20948_allRead+0x678>
 8001b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b50:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <ICM20948_allRead+0x670>)
 8001b52:	edc3 7a00 	vstr	s15, [r3]
		roll  *= 180.0f / M_PI;
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <ICM20948_allRead+0x66c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fca0 	bl	80004a0 <__aeabi_f2d>
 8001b60:	a323      	add	r3, pc, #140	; (adr r3, 8001bf0 <ICM20948_allRead+0x648>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe fcf3 	bl	8000550 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7fe ff1f 	bl	80009b4 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a26      	ldr	r2, [pc, #152]	; (8001c14 <ICM20948_allRead+0x66c>)
 8001b7a:	6013      	str	r3, [r2, #0]
		lin_ax = ax + a31;
 8001b7c:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <ICM20948_allRead+0x67c>)
 8001b7e:	ed93 7a00 	vldr	s14, [r3]
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <ICM20948_allRead+0x65c>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <ICM20948_allRead+0x680>)
 8001b8e:	edc3 7a00 	vstr	s15, [r3]
		lin_ay = ay + a32;
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <ICM20948_allRead+0x684>)
 8001b94:	ed93 7a00 	vldr	s14, [r3]
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <ICM20948_allRead+0x660>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba2:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <ICM20948_allRead+0x688>)
 8001ba4:	edc3 7a00 	vstr	s15, [r3]
		lin_az = az - a33;
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <ICM20948_allRead+0x68c>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <ICM20948_allRead+0x664>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <ICM20948_allRead+0x690>)
 8001bba:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->yaw = yaw;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <ICM20948_allRead+0x670>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
		DataStruct->pitch = pitch;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <ICM20948_allRead+0x668>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
		DataStruct->roll = roll;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <ICM20948_allRead+0x66c>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24

		sum = 0;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <ICM20948_allRead+0x694>)
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
	}
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	ecbd 8b04 	vpop	{d8-d9}
 8001be8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bea:	bf00      	nop
 8001bec:	f3af 8000 	nop.w
 8001bf0:	1a63c1f8 	.word	0x1a63c1f8
 8001bf4:	404ca5dc 	.word	0x404ca5dc
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	20000134 	.word	0x20000134
 8001c00:	20000138 	.word	0x20000138
 8001c04:	2000013c 	.word	0x2000013c
 8001c08:	20000140 	.word	0x20000140
 8001c0c:	20000144 	.word	0x20000144
 8001c10:	200000e8 	.word	0x200000e8
 8001c14:	200000f0 	.word	0x200000f0
 8001c18:	200000ec 	.word	0x200000ec
 8001c1c:	40b0f5c3 	.word	0x40b0f5c3
 8001c20:	43b40000 	.word	0x43b40000
 8001c24:	20000104 	.word	0x20000104
 8001c28:	20000128 	.word	0x20000128
 8001c2c:	20000108 	.word	0x20000108
 8001c30:	2000012c 	.word	0x2000012c
 8001c34:	2000010c 	.word	0x2000010c
 8001c38:	20000130 	.word	0x20000130
 8001c3c:	200000f8 	.word	0x200000f8

08001c40 <select_user_bank>:

void select_user_bank(I2C_HandleTypeDef *hi2c, uint8_t usr_bank){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, REG_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &usr_bank, 1, I2C_Timeout);
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	2301      	movs	r3, #1
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	1cfb      	adds	r3, r7, #3
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	227f      	movs	r2, #127	; 0x7f
 8001c5c:	21d2      	movs	r1, #210	; 0xd2
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f003 fa62 	bl	8005128 <HAL_I2C_Mem_Write>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <ICM20948_WHO_AM_I>:

uint8_t ICM20948_WHO_AM_I(I2C_HandleTypeDef *hi2c){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af04      	add	r7, sp, #16
 8001c72:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer;

	select_user_bank(hi2c, usr_bank0);
 8001c74:	2100      	movs	r1, #0
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffe2 	bl	8001c40 <select_user_bank>
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8001c7c:	2305      	movs	r3, #5
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	2301      	movs	r3, #1
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	f107 030f 	add.w	r3, r7, #15
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	21d2      	movs	r1, #210	; 0xd2
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f003 fb43 	bl	800531c <HAL_I2C_Mem_Read>

	if(readBuffer == ICM20948_ID)  return 1;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2bea      	cmp	r3, #234	; 0xea
 8001c9a:	d101      	bne.n	8001ca0 <ICM20948_WHO_AM_I+0x34>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <ICM20948_WHO_AM_I+0x36>
	else return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <AK09916_WHO_AM_I>:

uint8_t AK09916_WHO_AM_I(I2C_HandleTypeDef *hi2c){
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b088      	sub	sp, #32
 8001cae:	af04      	add	r7, sp, #16
 8001cb0:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer;

	select_user_bank(hi2c, usr_bank3);
 8001cb2:	2130      	movs	r1, #48	; 0x30
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ffc3 	bl	8001c40 <select_user_bank>
	HAL_I2C_Mem_Read(hi2c, AK09916_addr, AK09916_WIA2, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8001cba:	2305      	movs	r3, #5
 8001cbc:	9302      	str	r3, [sp, #8]
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	f107 030f 	add.w	r3, r7, #15
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2118      	movs	r1, #24
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f003 fb24 	bl	800531c <HAL_I2C_Mem_Read>

	if(readBuffer == AK09916_ID) return 1;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b09      	cmp	r3, #9
 8001cd8:	d101      	bne.n	8001cde <AK09916_WHO_AM_I+0x34>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <AK09916_WHO_AM_I+0x36>
	else return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <ICM20948_init>:

void ICM20948_init(I2C_HandleTypeDef *hi2c){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af04      	add	r7, sp, #16
 8001cee:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer;
	uint8_t writeBuffer;

	while(!ICM20948_WHO_AM_I(hi2c));
 8001cf0:	bf00      	nop
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffba 	bl	8001c6c <ICM20948_WHO_AM_I>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f9      	beq.n	8001cf2 <ICM20948_init+0xa>

	//soft reset
	writeBuffer = 0x80 | 0x41;
 8001cfe:	23c1      	movs	r3, #193	; 0xc1
 8001d00:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001d02:	2305      	movs	r3, #5
 8001d04:	9302      	str	r3, [sp, #8]
 8001d06:	2301      	movs	r3, #1
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	f107 030e 	add.w	r3, r7, #14
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2301      	movs	r3, #1
 8001d12:	2206      	movs	r2, #6
 8001d14:	21d2      	movs	r1, #210	; 0xd2
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f003 fa06 	bl	8005128 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001d1c:	2064      	movs	r0, #100	; 0x64
 8001d1e:	f002 fad1 	bl	80042c4 <HAL_Delay>

	//wakeup
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8001d22:	2305      	movs	r3, #5
 8001d24:	9302      	str	r3, [sp, #8]
 8001d26:	2301      	movs	r3, #1
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	f107 030f 	add.w	r3, r7, #15
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2301      	movs	r3, #1
 8001d32:	2206      	movs	r2, #6
 8001d34:	21d2      	movs	r1, #210	; 0xd2
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f003 faf0 	bl	800531c <HAL_I2C_Mem_Read>
	writeBuffer = readBuffer & 0xBF;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001d46:	2305      	movs	r3, #5
 8001d48:	9302      	str	r3, [sp, #8]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	f107 030e 	add.w	r3, r7, #14
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2301      	movs	r3, #1
 8001d56:	2206      	movs	r2, #6
 8001d58:	21d2      	movs	r1, #210	; 0xd2
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f003 f9e4 	bl	8005128 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001d60:	2064      	movs	r0, #100	; 0x64
 8001d62:	f002 faaf 	bl	80042c4 <HAL_Delay>

	//select clock source
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8001d66:	2305      	movs	r3, #5
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	f107 030f 	add.w	r3, r7, #15
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	2206      	movs	r2, #6
 8001d78:	21d2      	movs	r1, #210	; 0xd2
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f003 face 	bl	800531c <HAL_I2C_Mem_Read>
	writeBuffer  = readBuffer | 0x01;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	2301      	movs	r3, #1
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	f107 030e 	add.w	r3, r7, #14
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2206      	movs	r2, #6
 8001d9c:	21d2      	movs	r1, #210	; 0xd2
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f003 f9c2 	bl	8005128 <HAL_I2C_Mem_Write>

	//enable bypass mode to connect magneto to main communication line
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8001da4:	2305      	movs	r3, #5
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	2301      	movs	r3, #1
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	f107 030f 	add.w	r3, r7, #15
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2301      	movs	r3, #1
 8001db4:	220f      	movs	r2, #15
 8001db6:	21d2      	movs	r1, #210	; 0xd2
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f003 faaf 	bl	800531c <HAL_I2C_Mem_Read>
	writeBuffer = readBuffer | 0x02;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001dc8:	2305      	movs	r3, #5
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	f107 030e 	add.w	r3, r7, #14
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	220f      	movs	r2, #15
 8001dda:	21d2      	movs	r1, #210	; 0xd2
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f003 f9a3 	bl	8005128 <HAL_I2C_Mem_Write>

	//on prevent read data while new raw data write
	select_user_bank(hi2c, usr_bank2);
 8001de2:	2120      	movs	r1, #32
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff2b 	bl	8001c40 <select_user_bank>
	writeBuffer  = 0x01;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, ODR_ALIGN_EN, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001dee:	2305      	movs	r3, #5
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	2301      	movs	r3, #1
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	f107 030e 	add.w	r3, r7, #14
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	2209      	movs	r2, #9
 8001e00:	21d2      	movs	r1, #210	; 0xd2
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f003 f990 	bl	8005128 <HAL_I2C_Mem_Write>

	//internal lowpass filter
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8001e08:	2305      	movs	r3, #5
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	f107 030f 	add.w	r3, r7, #15
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2301      	movs	r3, #1
 8001e18:	2201      	movs	r2, #1
 8001e1a:	21d2      	movs	r1, #210	; 0xd2
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f003 fa7d 	bl	800531c <HAL_I2C_Mem_Read>
	writeBuffer  = readBuffer | (0x00 << 3);
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001e26:	2305      	movs	r3, #5
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	f107 030e 	add.w	r3, r7, #14
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2301      	movs	r3, #1
 8001e36:	2201      	movs	r2, #1
 8001e38:	21d2      	movs	r1, #210	; 0xd2
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f003 f974 	bl	8005128 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8001e40:	2305      	movs	r3, #5
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	2301      	movs	r3, #1
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	f107 030f 	add.w	r3, r7, #15
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	2214      	movs	r2, #20
 8001e52:	21d2      	movs	r1, #210	; 0xd2
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f003 fa61 	bl	800531c <HAL_I2C_Mem_Read>
	writeBuffer  = readBuffer | (0x00 << 3);
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001e5e:	2305      	movs	r3, #5
 8001e60:	9302      	str	r3, [sp, #8]
 8001e62:	2301      	movs	r3, #1
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	f107 030e 	add.w	r3, r7, #14
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	2214      	movs	r2, #20
 8001e70:	21d2      	movs	r1, #210	; 0xd2
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f003 f958 	bl	8005128 <HAL_I2C_Mem_Write>

	//sample rate divider
	writeBuffer  = 0x00;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, GYRO_SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001e7c:	2305      	movs	r3, #5
 8001e7e:	9302      	str	r3, [sp, #8]
 8001e80:	2301      	movs	r3, #1
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	f107 030e 	add.w	r3, r7, #14
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	21d2      	movs	r1, #210	; 0xd2
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f003 f949 	bl	8005128 <HAL_I2C_Mem_Write>

	writeBuffer  = 0x00;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, ACCEL_SMPLRT_DIV_1, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	9302      	str	r3, [sp, #8]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	f107 030e 	add.w	r3, r7, #14
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	2210      	movs	r2, #16
 8001eac:	21d2      	movs	r1, #210	; 0xd2
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f003 f93a 	bl	8005128 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, ACCEL_SMPLRT_DIV_2, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001eb4:	2305      	movs	r3, #5
 8001eb6:	9302      	str	r3, [sp, #8]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	f107 030e 	add.w	r3, r7, #14
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	2211      	movs	r2, #17
 8001ec6:	21d2      	movs	r1, #210	; 0xd2
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f003 f92d 	bl	8005128 <HAL_I2C_Mem_Write>

	//Gyro Accel Calibration
	ICM20948_Gyro_Calib(hi2c);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f842 	bl	8001f58 <ICM20948_Gyro_Calib>
	ICM20948_Accel_Calib(hi2c);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f8d7 	bl	8002088 <ICM20948_Accel_Calib>

	//set scale
	ICM20948_Accel_Scale(hi2c, _16g);
 8001eda:	2103      	movs	r1, #3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fb2b 	bl	8002538 <ICM20948_Accel_Scale>
	ICM20948_Gyro_Scale(hi2c, _2000dps);
 8001ee2:	2103      	movs	r1, #3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fac5 	bl	8002474 <ICM20948_Gyro_Scale>
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <AK09916_init>:

void AK09916_init(I2C_HandleTypeDef *hi2c){
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b088      	sub	sp, #32
 8001ef6:	af04      	add	r7, sp, #16
 8001ef8:	6078      	str	r0, [r7, #4]
	uint8_t writeBuffer;

	if(AK09916_WHO_AM_I(hi2c)){
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fed5 	bl	8001caa <AK09916_WHO_AM_I>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d023      	beq.n	8001f4e <AK09916_init+0x5c>
		//soft reset
		writeBuffer = 0x01;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, AK09916_addr, CNTL3, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	f107 030f 	add.w	r3, r7, #15
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	2232      	movs	r2, #50	; 0x32
 8001f1c:	2118      	movs	r1, #24
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f003 f902 	bl	8005128 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8001f24:	2064      	movs	r0, #100	; 0x64
 8001f26:	f002 f9cd 	bl	80042c4 <HAL_Delay>

		//select mode
		writeBuffer = continuous_measurement_100hz;
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, AK09916_addr, CNTL2, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001f2e:	2305      	movs	r3, #5
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	2301      	movs	r3, #1
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	f107 030f 	add.w	r3, r7, #15
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	2231      	movs	r2, #49	; 0x31
 8001f40:	2118      	movs	r1, #24
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f003 f8f0 	bl	8005128 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8001f48:	2064      	movs	r0, #100	; 0x64
 8001f4a:	f002 f9bb 	bl	80042c4 <HAL_Delay>
	}
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <ICM20948_Gyro_Calib>:

void ICM20948_Gyro_Calib(I2C_HandleTypeDef *hi2c){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08e      	sub	sp, #56	; 0x38
 8001f5c:	af04      	add	r7, sp, #16
 8001f5e:	6078      	str	r0, [r7, #4]

	int16_t rawData[3] = {0};
 8001f60:	f107 0320 	add.w	r3, r7, #32
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	809a      	strh	r2, [r3, #4]
	int32_t gyro_bias[3] = {0};
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	823b      	strh	r3, [r7, #16]

	for(uint8_t i = 0; i < 100; i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f84:	e019      	b.n	8001fba <ICM20948_Gyro_Calib+0x62>
	{
		ICM20948_readGyro(hi2c, rawData);
 8001f86:	f107 0320 	add.w	r3, r7, #32
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f9e0 	bl	8002352 <ICM20948_readGyro>
		gyro_bias[0] += rawData[0];
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001f98:	4413      	add	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
		gyro_bias[1] += rawData[1];
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001fa2:	4413      	add	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
		gyro_bias[2] += rawData[2];
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001fac:	4413      	add	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < 100; i++)
 8001fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fbe:	2b63      	cmp	r3, #99	; 0x63
 8001fc0:	d9e1      	bls.n	8001f86 <ICM20948_Gyro_Calib+0x2e>
	}

	gyro_bias[0] /= 100;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	4a2f      	ldr	r2, [pc, #188]	; (8002084 <ICM20948_Gyro_Calib+0x12c>)
 8001fc6:	fb82 1203 	smull	r1, r2, r2, r3
 8001fca:	1152      	asrs	r2, r2, #5
 8001fcc:	17db      	asrs	r3, r3, #31
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
	gyro_bias[1] /= 100;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <ICM20948_Gyro_Calib+0x12c>)
 8001fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001fda:	1152      	asrs	r2, r2, #5
 8001fdc:	17db      	asrs	r3, r3, #31
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	61bb      	str	r3, [r7, #24]
	gyro_bias[2] /= 100;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4a27      	ldr	r2, [pc, #156]	; (8002084 <ICM20948_Gyro_Calib+0x12c>)
 8001fe6:	fb82 1203 	smull	r1, r2, r2, r3
 8001fea:	1152      	asrs	r2, r2, #5
 8001fec:	17db      	asrs	r3, r3, #31
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	61fb      	str	r3, [r7, #28]

	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	425b      	negs	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da00      	bge.n	8001ffc <ICM20948_Gyro_Calib+0xa4>
 8001ffa:	3303      	adds	r3, #3
 8001ffc:	109b      	asrs	r3, r3, #2
 8001ffe:	121b      	asrs	r3, r3, #8
 8002000:	b2db      	uxtb	r3, r3
 8002002:	733b      	strb	r3, [r7, #12]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	425b      	negs	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	da00      	bge.n	800200e <ICM20948_Gyro_Calib+0xb6>
 800200c:	3303      	adds	r3, #3
 800200e:	109b      	asrs	r3, r3, #2
 8002010:	b2db      	uxtb	r3, r3
 8002012:	737b      	strb	r3, [r7, #13]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	425b      	negs	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	da00      	bge.n	800201e <ICM20948_Gyro_Calib+0xc6>
 800201c:	3303      	adds	r3, #3
 800201e:	109b      	asrs	r3, r3, #2
 8002020:	121b      	asrs	r3, r3, #8
 8002022:	b2db      	uxtb	r3, r3
 8002024:	73bb      	strb	r3, [r7, #14]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	425b      	negs	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	da00      	bge.n	8002030 <ICM20948_Gyro_Calib+0xd8>
 800202e:	3303      	adds	r3, #3
 8002030:	109b      	asrs	r3, r3, #2
 8002032:	b2db      	uxtb	r3, r3
 8002034:	73fb      	strb	r3, [r7, #15]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	425b      	negs	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	da00      	bge.n	8002040 <ICM20948_Gyro_Calib+0xe8>
 800203e:	3303      	adds	r3, #3
 8002040:	109b      	asrs	r3, r3, #2
 8002042:	121b      	asrs	r3, r3, #8
 8002044:	b2db      	uxtb	r3, r3
 8002046:	743b      	strb	r3, [r7, #16]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	425b      	negs	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	da00      	bge.n	8002052 <ICM20948_Gyro_Calib+0xfa>
 8002050:	3303      	adds	r3, #3
 8002052:	109b      	asrs	r3, r3, #2
 8002054:	b2db      	uxtb	r3, r3
 8002056:	747b      	strb	r3, [r7, #17]

	select_user_bank(hi2c, usr_bank2);
 8002058:	2120      	movs	r1, #32
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fdf0 	bl	8001c40 <select_user_bank>
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, XG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, &gyro_offset[0], 6, I2C_Timeout);
 8002060:	2305      	movs	r3, #5
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	2306      	movs	r3, #6
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2301      	movs	r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	21d2      	movs	r1, #210	; 0xd2
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f003 f857 	bl	8005128 <HAL_I2C_Mem_Write>
}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	51eb851f 	.word	0x51eb851f

08002088 <ICM20948_Accel_Calib>:

void ICM20948_Accel_Calib(I2C_HandleTypeDef *hi2c){
 8002088:	b580      	push	{r7, lr}
 800208a:	b094      	sub	sp, #80	; 0x50
 800208c:	af04      	add	r7, sp, #16
 800208e:	6078      	str	r0, [r7, #4]
	int16_t rawData[3] = {0};
 8002090:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	809a      	strh	r2, [r3, #4]
	uint8_t TemprawData1[2] = {0};
 800209a:	2300      	movs	r3, #0
 800209c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t TemprawData2[2] = {0};
 800209e:	2300      	movs	r3, #0
 80020a0:	863b      	strh	r3, [r7, #48]	; 0x30
	uint8_t TemprawData3[2] = {0};
 80020a2:	2300      	movs	r3, #0
 80020a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	int32_t accel_bias[3] = {0};
 80020a6:	f107 0320 	add.w	r3, r7, #32
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	2300      	movs	r3, #0
 80020c4:	823b      	strh	r3, [r7, #16]

	for(uint8_t i = 0; i < 100; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80020cc:	e019      	b.n	8002102 <ICM20948_Accel_Calib+0x7a>
		{
			ICM20948_readAccel(hi2c, rawData);
 80020ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020d2:	4619      	mov	r1, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f905 	bl	80022e4 <ICM20948_readAccel>
			accel_bias[0] += rawData[0];
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80020e0:	4413      	add	r3, r2
 80020e2:	623b      	str	r3, [r7, #32]
			accel_bias[1] += rawData[1];
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 80020ea:	4413      	add	r3, r2
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
			accel_bias[2] += rawData[2];
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 80020f4:	4413      	add	r3, r2
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
	for(uint8_t i = 0; i < 100; i++)
 80020f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020fc:	3301      	adds	r3, #1
 80020fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002102:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002106:	2b63      	cmp	r3, #99	; 0x63
 8002108:	d9e1      	bls.n	80020ce <ICM20948_Accel_Calib+0x46>
		}

	accel_bias[0] /= 100;
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	4a73      	ldr	r2, [pc, #460]	; (80022dc <ICM20948_Accel_Calib+0x254>)
 800210e:	fb82 1203 	smull	r1, r2, r2, r3
 8002112:	1152      	asrs	r2, r2, #5
 8002114:	17db      	asrs	r3, r3, #31
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	623b      	str	r3, [r7, #32]
	accel_bias[1] /= 100;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	4a6f      	ldr	r2, [pc, #444]	; (80022dc <ICM20948_Accel_Calib+0x254>)
 800211e:	fb82 1203 	smull	r1, r2, r2, r3
 8002122:	1152      	asrs	r2, r2, #5
 8002124:	17db      	asrs	r3, r3, #31
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias[2] /= 100;
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	4a6b      	ldr	r2, [pc, #428]	; (80022dc <ICM20948_Accel_Calib+0x254>)
 800212e:	fb82 1203 	smull	r1, r2, r2, r3
 8002132:	1152      	asrs	r2, r2, #5
 8002134:	17db      	asrs	r3, r3, #31
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28

	uint8_t mask_bit[3] = {0, 0, 0};
 800213a:	4a69      	ldr	r2, [pc, #420]	; (80022e0 <ICM20948_Accel_Calib+0x258>)
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	4611      	mov	r1, r2
 8002144:	8019      	strh	r1, [r3, #0]
 8002146:	3302      	adds	r3, #2
 8002148:	0c12      	lsrs	r2, r2, #16
 800214a:	701a      	strb	r2, [r3, #0]
	select_user_bank(hi2c, usr_bank1);
 800214c:	2110      	movs	r1, #16
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fd76 	bl	8001c40 <select_user_bank>

	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, XA_OFFS_H, I2C_MEMADD_SIZE_8BIT, &TemprawData1[0], 2, I2C_Timeout);
 8002154:	2305      	movs	r3, #5
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	2302      	movs	r3, #2
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2301      	movs	r3, #1
 8002164:	2214      	movs	r2, #20
 8002166:	21d2      	movs	r1, #210	; 0xd2
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f003 f8d7 	bl	800531c <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t)(TemprawData1[0] << 8 | TemprawData1[1]);
 800216e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]
	mask_bit[0] = TemprawData1[1] & 0x01;
 800217c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	723b      	strb	r3, [r7, #8]

	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, YA_OFFS_H, I2C_MEMADD_SIZE_8BIT, &TemprawData2[0], 2, I2C_Timeout);
 8002188:	2305      	movs	r3, #5
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	2302      	movs	r3, #2
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2301      	movs	r3, #1
 8002198:	2217      	movs	r2, #23
 800219a:	21d2      	movs	r1, #210	; 0xd2
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f003 f8bd 	bl	800531c <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t)(TemprawData2[0] << 8 | TemprawData2[1]);
 80021a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
	mask_bit[1] = TemprawData2[1] & 0x01;
 80021b0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	727b      	strb	r3, [r7, #9]

	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, ZA_OFFS_H, I2C_MEMADD_SIZE_8BIT, &TemprawData3[0], 2, I2C_Timeout);
 80021bc:	2305      	movs	r3, #5
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	2302      	movs	r3, #2
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2301      	movs	r3, #1
 80021cc:	221a      	movs	r2, #26
 80021ce:	21d2      	movs	r1, #210	; 0xd2
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f003 f8a3 	bl	800531c <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t)(TemprawData3[0] << 8 | TemprawData3[1]);
 80021d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61fb      	str	r3, [r7, #28]
	mask_bit[2] = TemprawData3[1] & 0x01;
 80021e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	72bb      	strb	r3, [r7, #10]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da00      	bge.n	80021fa <ICM20948_Accel_Calib+0x172>
 80021f8:	3307      	adds	r3, #7
 80021fa:	10db      	asrs	r3, r3, #3
 80021fc:	425b      	negs	r3, r3
 80021fe:	4413      	add	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	2b00      	cmp	r3, #0
 8002208:	da00      	bge.n	800220c <ICM20948_Accel_Calib+0x184>
 800220a:	3307      	adds	r3, #7
 800220c:	10db      	asrs	r3, r3, #3
 800220e:	425b      	negs	r3, r3
 8002210:	4413      	add	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	da00      	bge.n	800221e <ICM20948_Accel_Calib+0x196>
 800221c:	3307      	adds	r3, #7
 800221e:	10db      	asrs	r3, r3, #3
 8002220:	425b      	negs	r3, r3
 8002222:	4413      	add	r3, r2
 8002224:	61fb      	str	r3, [r7, #28]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	121b      	asrs	r3, r3, #8
 800222a:	b2db      	uxtb	r3, r3
 800222c:	733b      	strb	r3, [r7, #12]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	737b      	strb	r3, [r7, #13]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800223a:	7b7a      	ldrb	r2, [r7, #13]
 800223c:	7a3b      	ldrb	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
 8002240:	b2db      	uxtb	r3, r3
 8002242:	737b      	strb	r3, [r7, #13]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	121b      	asrs	r3, r3, #8
 8002248:	b2db      	uxtb	r3, r3
 800224a:	73bb      	strb	r3, [r7, #14]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	73fb      	strb	r3, [r7, #15]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	7a7b      	ldrb	r3, [r7, #9]
 800225c:	4313      	orrs	r3, r2
 800225e:	b2db      	uxtb	r3, r3
 8002260:	73fb      	strb	r3, [r7, #15]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	121b      	asrs	r3, r3, #8
 8002266:	b2db      	uxtb	r3, r3
 8002268:	743b      	strb	r3, [r7, #16]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	747b      	strb	r3, [r7, #17]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8002276:	7c7a      	ldrb	r2, [r7, #17]
 8002278:	7abb      	ldrb	r3, [r7, #10]
 800227a:	4313      	orrs	r3, r2
 800227c:	b2db      	uxtb	r3, r3
 800227e:	747b      	strb	r3, [r7, #17]

	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, XA_OFFS_H, I2C_MEMADD_SIZE_8BIT, &accel_offset[0], 2, I2C_Timeout);
 8002280:	2305      	movs	r3, #5
 8002282:	9302      	str	r3, [sp, #8]
 8002284:	2302      	movs	r3, #2
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	2301      	movs	r3, #1
 8002290:	2214      	movs	r2, #20
 8002292:	21d2      	movs	r1, #210	; 0xd2
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f002 ff47 	bl	8005128 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, YA_OFFS_H, I2C_MEMADD_SIZE_8BIT, &accel_offset[2], 2, I2C_Timeout);
 800229a:	2305      	movs	r3, #5
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	2302      	movs	r3, #2
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	3302      	adds	r3, #2
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2301      	movs	r3, #1
 80022ac:	2217      	movs	r2, #23
 80022ae:	21d2      	movs	r1, #210	; 0xd2
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f002 ff39 	bl	8005128 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, ZA_OFFS_H, I2C_MEMADD_SIZE_8BIT, &accel_offset[4], 2, I2C_Timeout);
 80022b6:	2305      	movs	r3, #5
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	2302      	movs	r3, #2
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	3304      	adds	r3, #4
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2301      	movs	r3, #1
 80022c8:	221a      	movs	r2, #26
 80022ca:	21d2      	movs	r1, #210	; 0xd2
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f002 ff2b 	bl	8005128 <HAL_I2C_Mem_Write>
}
 80022d2:	bf00      	nop
 80022d4:	3740      	adds	r7, #64	; 0x40
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	51eb851f 	.word	0x51eb851f
 80022e0:	08009c5c 	.word	0x08009c5c

080022e4 <ICM20948_readAccel>:

void ICM20948_readAccel(I2C_HandleTypeDef *hi2c, int16_t *Data){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af04      	add	r7, sp, #16
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	uint8_t readAccelBuffer[6];

	select_user_bank(hi2c, usr_bank0);
 80022ee:	2100      	movs	r1, #0
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fca5 	bl	8001c40 <select_user_bank>
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, &readAccelBuffer[0], 6, I2C_Timeout);
 80022f6:	2305      	movs	r3, #5
 80022f8:	9302      	str	r3, [sp, #8]
 80022fa:	2306      	movs	r3, #6
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2301      	movs	r3, #1
 8002306:	222d      	movs	r2, #45	; 0x2d
 8002308:	21d2      	movs	r1, #210	; 0xd2
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f003 f806 	bl	800531c <HAL_I2C_Mem_Read>

	Data[0] = ((int16_t)readAccelBuffer[0] << 8 | readAccelBuffer[1]);
 8002310:	7a3b      	ldrb	r3, [r7, #8]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	b21a      	sxth	r2, r3
 8002316:	7a7b      	ldrb	r3, [r7, #9]
 8002318:	b21b      	sxth	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b21a      	sxth	r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	801a      	strh	r2, [r3, #0]
	Data[1] = ((int16_t)readAccelBuffer[2] << 8 | readAccelBuffer[3]);
 8002322:	7abb      	ldrb	r3, [r7, #10]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	b219      	sxth	r1, r3
 8002328:	7afb      	ldrb	r3, [r7, #11]
 800232a:	b21a      	sxth	r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	3302      	adds	r3, #2
 8002330:	430a      	orrs	r2, r1
 8002332:	b212      	sxth	r2, r2
 8002334:	801a      	strh	r2, [r3, #0]
	Data[2] = ((int16_t)readAccelBuffer[4] << 8 | readAccelBuffer[5]);
 8002336:	7b3b      	ldrb	r3, [r7, #12]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	b219      	sxth	r1, r3
 800233c:	7b7b      	ldrb	r3, [r7, #13]
 800233e:	b21a      	sxth	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	3304      	adds	r3, #4
 8002344:	430a      	orrs	r2, r1
 8002346:	b212      	sxth	r2, r2
 8002348:	801a      	strh	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <ICM20948_readGyro>:

void ICM20948_readGyro(I2C_HandleTypeDef *hi2c, int16_t *Data){
 8002352:	b580      	push	{r7, lr}
 8002354:	b088      	sub	sp, #32
 8002356:	af04      	add	r7, sp, #16
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
	uint8_t readGyroBuffer[6];

	select_user_bank(hi2c, usr_bank0);
 800235c:	2100      	movs	r1, #0
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fc6e 	bl	8001c40 <select_user_bank>
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &readGyroBuffer[0], 6, I2C_Timeout);
 8002364:	2305      	movs	r3, #5
 8002366:	9302      	str	r3, [sp, #8]
 8002368:	2306      	movs	r3, #6
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2301      	movs	r3, #1
 8002374:	2233      	movs	r2, #51	; 0x33
 8002376:	21d2      	movs	r1, #210	; 0xd2
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f002 ffcf 	bl	800531c <HAL_I2C_Mem_Read>

	Data[0] = ((int16_t)readGyroBuffer[0] << 8 | readGyroBuffer[1]);
 800237e:	7a3b      	ldrb	r3, [r7, #8]
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	b21a      	sxth	r2, r3
 8002384:	7a7b      	ldrb	r3, [r7, #9]
 8002386:	b21b      	sxth	r3, r3
 8002388:	4313      	orrs	r3, r2
 800238a:	b21a      	sxth	r2, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	801a      	strh	r2, [r3, #0]
	Data[1] = ((int16_t)readGyroBuffer[2] << 8 | readGyroBuffer[3]);
 8002390:	7abb      	ldrb	r3, [r7, #10]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	b219      	sxth	r1, r3
 8002396:	7afb      	ldrb	r3, [r7, #11]
 8002398:	b21a      	sxth	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	3302      	adds	r3, #2
 800239e:	430a      	orrs	r2, r1
 80023a0:	b212      	sxth	r2, r2
 80023a2:	801a      	strh	r2, [r3, #0]
	Data[2] = ((int16_t)readGyroBuffer[4] << 8 | readGyroBuffer[5]);
 80023a4:	7b3b      	ldrb	r3, [r7, #12]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	b219      	sxth	r1, r3
 80023aa:	7b7b      	ldrb	r3, [r7, #13]
 80023ac:	b21a      	sxth	r2, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	3304      	adds	r3, #4
 80023b2:	430a      	orrs	r2, r1
 80023b4:	b212      	sxth	r2, r2
 80023b6:	801a      	strh	r2, [r3, #0]
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <AK09916_readMagn>:

void AK09916_readMagn(I2C_HandleTypeDef *hi2c, int16_t *Data){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af04      	add	r7, sp, #16
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
	uint8_t readMagnBuffer[6];
	uint8_t drdy, hofl;

	//check DRDY ready status
	HAL_I2C_Mem_Read(hi2c, AK09916_addr, ST1, I2C_MEMADD_SIZE_8BIT, &drdy, 1, I2C_Timeout);
 80023ca:	2305      	movs	r3, #5
 80023cc:	9302      	str	r3, [sp, #8]
 80023ce:	2301      	movs	r3, #1
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	f107 030f 	add.w	r3, r7, #15
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2301      	movs	r3, #1
 80023da:	2210      	movs	r2, #16
 80023dc:	2118      	movs	r1, #24
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f002 ff9c 	bl	800531c <HAL_I2C_Mem_Read>
	if((drdy & 0x01) == 0) return;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d03c      	beq.n	8002468 <AK09916_readMagn+0xa8>

	//Read Magn data
	HAL_I2C_Mem_Read(hi2c, AK09916_addr, HXL, I2C_MEMADD_SIZE_8BIT, &readMagnBuffer[0], 6, I2C_Timeout);
 80023ee:	2305      	movs	r3, #5
 80023f0:	9302      	str	r3, [sp, #8]
 80023f2:	2306      	movs	r3, #6
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	f107 0310 	add.w	r3, r7, #16
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2301      	movs	r3, #1
 80023fe:	2211      	movs	r2, #17
 8002400:	2118      	movs	r1, #24
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f002 ff8a 	bl	800531c <HAL_I2C_Mem_Read>

	//check overflow data
	HAL_I2C_Mem_Read(hi2c, AK09916_addr, ST2, I2C_MEMADD_SIZE_8BIT, &hofl, 1, I2C_Timeout);
 8002408:	2305      	movs	r3, #5
 800240a:	9302      	str	r3, [sp, #8]
 800240c:	2301      	movs	r3, #1
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	f107 030e 	add.w	r3, r7, #14
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	2218      	movs	r2, #24
 800241a:	2118      	movs	r1, #24
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f002 ff7d 	bl	800531c <HAL_I2C_Mem_Read>
	if((hofl & 0x08) == 0x08) return;
 8002422:	7bbb      	ldrb	r3, [r7, #14]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d11f      	bne.n	800246c <AK09916_readMagn+0xac>

	Data[0] = ((int16_t)readMagnBuffer[1] << 8) | readMagnBuffer[0];
 800242c:	7c7b      	ldrb	r3, [r7, #17]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	b21a      	sxth	r2, r3
 8002432:	7c3b      	ldrb	r3, [r7, #16]
 8002434:	b21b      	sxth	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	b21a      	sxth	r2, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	801a      	strh	r2, [r3, #0]
	Data[1] = ((int16_t)readMagnBuffer[3] << 8) | readMagnBuffer[2];
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b219      	sxth	r1, r3
 8002444:	7cbb      	ldrb	r3, [r7, #18]
 8002446:	b21a      	sxth	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	3302      	adds	r3, #2
 800244c:	430a      	orrs	r2, r1
 800244e:	b212      	sxth	r2, r2
 8002450:	801a      	strh	r2, [r3, #0]
	Data[2] = ((int16_t)readMagnBuffer[5] << 8) | readMagnBuffer[4];
 8002452:	7d7b      	ldrb	r3, [r7, #21]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b219      	sxth	r1, r3
 8002458:	7d3b      	ldrb	r3, [r7, #20]
 800245a:	b21a      	sxth	r2, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3304      	adds	r3, #4
 8002460:	430a      	orrs	r2, r1
 8002462:	b212      	sxth	r2, r2
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	e002      	b.n	800246e <AK09916_readMagn+0xae>
	if((drdy & 0x01) == 0) return;
 8002468:	bf00      	nop
 800246a:	e000      	b.n	800246e <AK09916_readMagn+0xae>
	if((hofl & 0x08) == 0x08) return;
 800246c:	bf00      	nop
}
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <ICM20948_Gyro_Scale>:

void ICM20948_Gyro_Scale(I2C_HandleTypeDef *hi2c, gyro_scale Gscale){
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af04      	add	r7, sp, #16
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
	uint8_t renewBuffer;

	select_user_bank(hi2c, usr_bank2);
 8002480:	2120      	movs	r1, #32
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fbdc 	bl	8001c40 <select_user_bank>
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, &renewBuffer, 1, I2C_Timeout);
 8002488:	2305      	movs	r3, #5
 800248a:	9302      	str	r3, [sp, #8]
 800248c:	2301      	movs	r3, #1
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	f107 030f 	add.w	r3, r7, #15
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2301      	movs	r3, #1
 8002498:	2201      	movs	r2, #1
 800249a:	21d2      	movs	r1, #210	; 0xd2
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f002 ff3d 	bl	800531c <HAL_I2C_Mem_Read>

	switch (Gscale) {
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d82c      	bhi.n	8002502 <ICM20948_Gyro_Scale+0x8e>
 80024a8:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <ICM20948_Gyro_Scale+0x3c>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	080024c1 	.word	0x080024c1
 80024b4:	080024cd 	.word	0x080024cd
 80024b8:	080024df 	.word	0x080024df
 80024bc:	080024f1 	.word	0x080024f1
		case _250dps:
			renewBuffer |= 0x00;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	73fb      	strb	r3, [r7, #15]
			GscaleFac = 131.0;
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <ICM20948_Gyro_Scale+0xb0>)
 80024c6:	4a18      	ldr	r2, [pc, #96]	; (8002528 <ICM20948_Gyro_Scale+0xb4>)
 80024c8:	601a      	str	r2, [r3, #0]
			break;
 80024ca:	e01a      	b.n	8002502 <ICM20948_Gyro_Scale+0x8e>
		case _500dps:
			renewBuffer |= 0x02;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	f043 0302 	orr.w	r3, r3, #2
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	73fb      	strb	r3, [r7, #15]
			GscaleFac = 65.5;
 80024d6:	4b13      	ldr	r3, [pc, #76]	; (8002524 <ICM20948_Gyro_Scale+0xb0>)
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <ICM20948_Gyro_Scale+0xb8>)
 80024da:	601a      	str	r2, [r3, #0]
			break;
 80024dc:	e011      	b.n	8002502 <ICM20948_Gyro_Scale+0x8e>
		case _1000dps:
			renewBuffer |= 0x04;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	73fb      	strb	r3, [r7, #15]
			GscaleFac = 32.8;
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <ICM20948_Gyro_Scale+0xb0>)
 80024ea:	4a11      	ldr	r2, [pc, #68]	; (8002530 <ICM20948_Gyro_Scale+0xbc>)
 80024ec:	601a      	str	r2, [r3, #0]
			break;
 80024ee:	e008      	b.n	8002502 <ICM20948_Gyro_Scale+0x8e>
		case _2000dps:
			renewBuffer |= 0x06;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	f043 0306 	orr.w	r3, r3, #6
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	73fb      	strb	r3, [r7, #15]
			GscaleFac = 16.4;
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <ICM20948_Gyro_Scale+0xb0>)
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <ICM20948_Gyro_Scale+0xc0>)
 80024fe:	601a      	str	r2, [r3, #0]
			break;
 8002500:	bf00      	nop
	}

	HAL_I2C_Mem_Write(hi2c, ICM20948_ADO_high, GYRO_CONFIG_1, I2C_MEMADD_SIZE_8BIT, &renewBuffer, 1, I2C_Timeout);
 8002502:	2305      	movs	r3, #5
 8002504:	9302      	str	r3, [sp, #8]
 8002506:	2301      	movs	r3, #1
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	f107 030f 	add.w	r3, r7, #15
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2301      	movs	r3, #1
 8002512:	2201      	movs	r2, #1
 8002514:	21d2      	movs	r1, #210	; 0xd2
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f002 fe06 	bl	8005128 <HAL_I2C_Mem_Write>
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200000c8 	.word	0x200000c8
 8002528:	43030000 	.word	0x43030000
 800252c:	42830000 	.word	0x42830000
 8002530:	42033333 	.word	0x42033333
 8002534:	41833333 	.word	0x41833333

08002538 <ICM20948_Accel_Scale>:

void ICM20948_Accel_Scale(I2C_HandleTypeDef *hi2c, accel_scale Ascale){
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af04      	add	r7, sp, #16
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
	uint8_t renewBuffer;

	select_user_bank(hi2c, usr_bank2);
 8002544:	2120      	movs	r1, #32
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fb7a 	bl	8001c40 <select_user_bank>
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADO_high, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &renewBuffer, 1, I2C_Timeout);
 800254c:	2305      	movs	r3, #5
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	2301      	movs	r3, #1
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	f107 030f 	add.w	r3, r7, #15
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2301      	movs	r3, #1
 800255c:	2214      	movs	r2, #20
 800255e:	21d2      	movs	r1, #210	; 0xd2
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f002 fedb 	bl	800531c <HAL_I2C_Mem_Read>

	switch (Ascale) {
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d830      	bhi.n	80025ce <ICM20948_Accel_Scale+0x96>
 800256c:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <ICM20948_Accel_Scale+0x3c>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	08002585 	.word	0x08002585
 8002578:	08002593 	.word	0x08002593
 800257c:	080025a7 	.word	0x080025a7
 8002580:	080025bb 	.word	0x080025bb
		case _2g:
			renewBuffer |= 0x00;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	73fb      	strb	r3, [r7, #15]
			AscaleFac = 16384;
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <ICM20948_Accel_Scale+0xa0>)
 800258a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800258e:	801a      	strh	r2, [r3, #0]
			break;
 8002590:	e01d      	b.n	80025ce <ICM20948_Accel_Scale+0x96>
		case _4g:
			renewBuffer |= 0x02;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	73fb      	strb	r3, [r7, #15]
			AscaleFac = 8192;
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <ICM20948_Accel_Scale+0xa0>)
 800259e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a2:	801a      	strh	r2, [r3, #0]
			break;
 80025a4:	e013      	b.n	80025ce <ICM20948_Accel_Scale+0x96>
		case _8g:
			renewBuffer |= 0x04;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	73fb      	strb	r3, [r7, #15]
			AscaleFac = 4096;
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <ICM20948_Accel_Scale+0xa0>)
 80025b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b6:	801a      	strh	r2, [r3, #0]
			break;
 80025b8:	e009      	b.n	80025ce <ICM20948_Accel_Scale+0x96>
		case _16g:
			renewBuffer |= 0x06;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	f043 0306 	orr.w	r3, r3, #6
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	73fb      	strb	r3, [r7, #15]
			AscaleFac = 2048;
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <ICM20948_Accel_Scale+0xa0>)
 80025c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025ca:	801a      	strh	r2, [r3, #0]
			break;
 80025cc:	bf00      	nop
	}
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200000cc 	.word	0x200000cc

080025dc <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0b2      	sub	sp, #200	; 0xc8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80025e6:	edc7 0a08 	vstr	s1, [r7, #32]
 80025ea:	ed87 1a07 	vstr	s2, [r7, #28]
 80025ee:	edc7 1a06 	vstr	s3, [r7, #24]
 80025f2:	ed87 2a05 	vstr	s4, [r7, #20]
 80025f6:	edc7 2a04 	vstr	s5, [r7, #16]
 80025fa:	ed87 3a03 	vstr	s6, [r7, #12]
 80025fe:	edc7 3a02 	vstr	s7, [r7, #8]
 8002602:	ed87 4a01 	vstr	s8, [r7, #4]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8002606:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <QuaternionUpdate+0x1ec>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800260e:	4b6e      	ldr	r3, [pc, #440]	; (80027c8 <QuaternionUpdate+0x1ec>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002616:	4b6c      	ldr	r3, [pc, #432]	; (80027c8 <QuaternionUpdate+0x1ec>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800261e:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <QuaternionUpdate+0x1ec>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8002626:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800262a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800262e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
    float _2q2 = 2.0f * q2;
 8002632:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002636:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800263a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    float _2q3 = 2.0f * q3;
 800263e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002642:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002646:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    float _2q4 = 2.0f * q4;
 800264a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800264e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002652:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    float _2q1q3 = 2.0f * q1 * q3;
 8002656:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800265a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800265e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002666:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    float _2q3q4 = 2.0f * q3 * q4;
 800266a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800266e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002672:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    float q1q1 = q1 * q1;
 800267e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002682:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002686:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float q1q2 = q1 * q2;
 800268a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800268e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002696:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    float q1q3 = q1 * q3;
 800269a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800269e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80026a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    float q1q4 = q1 * q4;
 80026aa:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80026ae:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80026b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    float q2q2 = q2 * q2;
 80026ba:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80026be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026c2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    float q2q3 = q2 * q3;
 80026c6:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80026ca:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    float q2q4 = q2 * q4;
 80026d6:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80026da:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float q3q3 = q3 * q3;
 80026e6:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80026ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026ee:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float q3q4 = q3 * q4;
 80026f2:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80026f6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80026fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fe:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float q4q4 = q4 * q4;
 8002702:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002706:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800270a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 800270e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002712:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002716:	edd7 7a08 	vldr	s15, [r7, #32]
 800271a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800271e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002722:	edd7 7a07 	vldr	s15, [r7, #28]
 8002726:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800272a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272e:	eeb0 0a67 	vmov.f32	s0, s15
 8002732:	f006 fffd 	bl	8009730 <sqrtf>
 8002736:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    if (norm == 0.0f) return; // handle NaN
 800273a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800273e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	f000 85b2 	beq.w	80032ae <QuaternionUpdate+0xcd2>
    norm = 1.0f/norm;
 800274a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800274e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002756:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    ax *= norm;
 800275a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800275e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002766:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    ay *= norm;
 800276a:	ed97 7a08 	vldr	s14, [r7, #32]
 800276e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002776:	edc7 7a08 	vstr	s15, [r7, #32]
    az *= norm;
 800277a:	ed97 7a07 	vldr	s14, [r7, #28]
 800277e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002786:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 800278a:	edd7 7a03 	vldr	s15, [r7, #12]
 800278e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002792:	edd7 7a02 	vldr	s15, [r7, #8]
 8002796:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800279a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279e:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80027a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027aa:	eeb0 0a67 	vmov.f32	s0, s15
 80027ae:	f006 ffbf 	bl	8009730 <sqrtf>
 80027b2:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    if (norm == 0.0f) return; // handle NaN
 80027b6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	f000 8576 	beq.w	80032b2 <QuaternionUpdate+0xcd6>
 80027c6:	e001      	b.n	80027cc <QuaternionUpdate+0x1f0>
 80027c8:	20000004 	.word	0x20000004
    norm = 1.0f/norm;
 80027cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027d0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80027d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    mx *= norm;
 80027dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80027e0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e8:	edc7 7a03 	vstr	s15, [r7, #12]
    my *= norm;
 80027ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80027f0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f8:	edc7 7a02 	vstr	s15, [r7, #8]
    mz *= norm;
 80027fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8002800:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002808:	edc7 7a01 	vstr	s15, [r7, #4]

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 800280c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002810:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002814:	ed97 7a03 	vldr	s14, [r7, #12]
 8002818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    _2q1my = 2.0f * q1 * my;
 8002820:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002824:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002828:	ed97 7a02 	vldr	s14, [r7, #8]
 800282c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002830:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    _2q1mz = 2.0f * q1 * mz;
 8002834:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002838:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800283c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002844:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    _2q2mx = 2.0f * q2 * mx;
 8002848:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800284c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002850:	ed97 7a03 	vldr	s14, [r7, #12]
 8002854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002858:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800285c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002860:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002868:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800286c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002874:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002878:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800287c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002888:	edd7 6a03 	vldr	s13, [r7, #12]
 800288c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002898:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800289c:	edd7 7a02 	vldr	s15, [r7, #8]
 80028a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028a4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80028a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b0:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80028b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80028b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028bc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80028c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c8:	edd7 6a03 	vldr	s13, [r7, #12]
 80028cc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80028d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028d8:	edd7 6a03 	vldr	s13, [r7, #12]
 80028dc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80028ec:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80028f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80028f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80028fc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002908:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800290c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002918:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800291c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002928:	edd7 6a02 	vldr	s13, [r7, #8]
 800292c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002934:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002938:	edd7 6a02 	vldr	s13, [r7, #8]
 800293c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800294c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002950:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002954:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800295c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002960:	edd7 6a02 	vldr	s13, [r7, #8]
 8002964:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002970:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    _2bx = sqrtf(hx * hx + hy * hy);
 8002974:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002978:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800297c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002980:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	eeb0 0a67 	vmov.f32	s0, s15
 800298c:	f006 fed0 	bl	8009730 <sqrtf>
 8002990:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8002994:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002998:	eeb1 7a67 	vneg.f32	s14, s15
 800299c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80029a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a4:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80029a8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80029ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b4:	edd7 6a01 	vldr	s13, [r7, #4]
 80029b8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80029bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80029c8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80029cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d4:	edd7 6a01 	vldr	s13, [r7, #4]
 80029d8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80029dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029e4:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80029e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80029f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029fc:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a00:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a0c:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a10:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    _4bx = 2.0f * _2bx;
 8002a20:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a28:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    _4bz = 2.0f * _2bz;
 8002a2c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a34:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002a38:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002a3c:	eeb1 7a67 	vneg.f32	s14, s15
 8002a40:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002a44:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a48:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002a4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a5c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002a60:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a64:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002a68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a74:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a80:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002a84:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002a88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a8c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002a90:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a94:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002a98:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a9c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002aa0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002aa4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002aa8:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002aac:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002ab0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002ab4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002ab8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002abc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ad0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ad4:	eef1 6a67 	vneg.f32	s13, s15
 8002ad8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002adc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ae0:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002ae4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002ae8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002aec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002af0:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002af4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002af8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002afc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b00:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b04:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002b08:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002b0c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002b10:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002b14:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b18:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b2c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002b30:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002b34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b38:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002b3c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b44:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b48:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b4c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002b50:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b54:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002b58:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002b5c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002b60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002b64:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002b80:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b88:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002b8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b98:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ba4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ba8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002bac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002bb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bb4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bb8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002bc8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002bcc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002bd0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002bd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bd8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002bdc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002be0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002be4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002be8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002bec:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bf0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bfc:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002c00:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c08:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c0c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002c10:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002c14:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002c18:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002c1c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c24:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002c28:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c2c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002c30:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c34:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c38:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c40:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c4c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002c50:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c58:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002c5c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002c60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c64:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c68:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002c6c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c70:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002c74:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c7c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002c80:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002c84:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002c88:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c8c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c98:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002ca8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002cac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cb0:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8002cb4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002cb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002cbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cc0:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002cc4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002ccc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002cd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cd4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002cd8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002cdc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002ce0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002ce4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002ce8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002cec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002cf0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cf8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d04:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002d08:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002d0c:	eeb1 7a67 	vneg.f32	s14, s15
 8002d10:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002d14:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d18:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d2c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002d30:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d34:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002d38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d40:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d44:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d50:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002d54:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002d58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d5c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d60:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d64:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002d68:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002d6c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002d70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d74:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002d78:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d7c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d88:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d8c:	eef1 6a67 	vneg.f32	s13, s15
 8002d90:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002d94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d98:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002d9c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002da0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002da4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002da8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002dac:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002db0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002db4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002db8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002dbc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002dc0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002dc4:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002dc8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002dcc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002dd0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002dd4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002dd8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002de0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dec:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002df0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002df4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002df8:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002dfc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002e00:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e04:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e08:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002e0c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002e10:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002e14:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e18:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e1c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002e20:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002e24:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002e28:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e30:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e44:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002e48:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002e4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e50:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8002e54:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002e58:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e60:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002e64:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002e68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e6c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e74:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002e78:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e7c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002e80:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002e84:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002e88:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e8c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e98:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002ea8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002eac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002eb0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002eb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002eb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ebc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ec0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ecc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ed0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ed4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ed8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002edc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ee0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eec:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002ef0:	eef1 6a67 	vneg.f32	s13, s15
 8002ef4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002ef8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002efc:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002f00:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002f04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f08:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002f10:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f14:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002f18:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002f1c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002f20:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002f24:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f28:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002f2c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f30:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002f34:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002f38:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002f3c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f44:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f50:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002f54:	eef1 6a67 	vneg.f32	s13, s15
 8002f58:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002f5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f60:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002f64:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002f68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f70:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002f74:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002f78:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002f7c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002f80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f84:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002f88:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002f8c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002f90:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002f94:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002f98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002f9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fa0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fac:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002fb0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fb8:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002fbc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002fc0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002fc4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002fc8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002fcc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002fd0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002fd4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002fd8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fdc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002fe0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002fe4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002fe8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ff0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8003000:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003004:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003008:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800300c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003010:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003014:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003018:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800301c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003020:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003024:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302c:	eeb0 0a67 	vmov.f32	s0, s15
 8003030:	f006 fb7e 	bl	8009730 <sqrtf>
 8003034:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    norm = 1.0f/norm;
 8003038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800303c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003044:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    s1 *= norm;
 8003048:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800304c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003054:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s2 *= norm;
 8003058:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800305c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003064:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s3 *= norm;
 8003068:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800306c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003074:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s4 *= norm;
 8003078:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800307c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003084:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003088:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800308c:	eeb1 7a67 	vneg.f32	s14, s15
 8003090:	edd7 7a06 	vldr	s15, [r7, #24]
 8003094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003098:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800309c:	edd7 7a05 	vldr	s15, [r7, #20]
 80030a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030a8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80030ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030c0:	4b7e      	ldr	r3, [pc, #504]	; (80032bc <QuaternionUpdate+0xce0>)
 80030c2:	edd3 6a00 	vldr	s13, [r3]
 80030c6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80030ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80030d6:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80030da:	edd7 7a06 	vldr	s15, [r7, #24]
 80030de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030e2:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80030e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f2:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80030f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003102:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003106:	ee27 7a87 	vmul.f32	s14, s15, s14
 800310a:	4b6c      	ldr	r3, [pc, #432]	; (80032bc <QuaternionUpdate+0xce0>)
 800310c:	edd3 6a00 	vldr	s13, [r3]
 8003110:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8003120:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003124:	edd7 7a05 	vldr	s15, [r7, #20]
 8003128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312c:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8003130:	edd7 7a04 	vldr	s15, [r7, #16]
 8003134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003138:	ee37 7a67 	vsub.f32	s14, s14, s15
 800313c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8003140:	edd7 7a06 	vldr	s15, [r7, #24]
 8003144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003150:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003154:	4b59      	ldr	r3, [pc, #356]	; (80032bc <QuaternionUpdate+0xce0>)
 8003156:	edd3 6a00 	vldr	s13, [r3]
 800315a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800315e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003166:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800316a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800316e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003176:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800317a:	edd7 7a05 	vldr	s15, [r7, #20]
 800317e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003186:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800318a:	edd7 7a06 	vldr	s15, [r7, #24]
 800318e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003196:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800319a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800319e:	4b47      	ldr	r3, [pc, #284]	; (80032bc <QuaternionUpdate+0xce0>)
 80031a0:	edd3 6a00 	vldr	s13, [r3]
 80031a4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80031a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    // Integrate to yield quaternion
    q1 += qDot1 * deltaT;
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <QuaternionUpdate+0xce4>)
 80031b6:	ed93 7a00 	vldr	s14, [r3]
 80031ba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80031be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c2:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80031c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ca:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    q2 += qDot2 * deltaT;
 80031ce:	4b3c      	ldr	r3, [pc, #240]	; (80032c0 <QuaternionUpdate+0xce4>)
 80031d0:	ed93 7a00 	vldr	s14, [r3]
 80031d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031dc:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80031e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e4:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
    q3 += qDot3 * deltaT;
 80031e8:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <QuaternionUpdate+0xce4>)
 80031ea:	ed93 7a00 	vldr	s14, [r3]
 80031ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80031f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80031fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fe:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
    q4 += qDot4 * deltaT;
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <QuaternionUpdate+0xce4>)
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800320c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003210:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 800321c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003220:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003224:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003228:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800322c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003230:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003234:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800323c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003240:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003248:	eeb0 0a67 	vmov.f32	s0, s15
 800324c:	f006 fa70 	bl	8009730 <sqrtf>
 8003250:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    norm = 1.0f/norm;
 8003254:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003258:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800325c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003260:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    q[0] = q1 * norm;
 8003264:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003268:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800326c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <QuaternionUpdate+0xce8>)
 8003272:	edc3 7a00 	vstr	s15, [r3]
    q[1] = q2 * norm;
 8003276:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800327a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800327e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <QuaternionUpdate+0xce8>)
 8003284:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] = q3 * norm;
 8003288:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800328c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <QuaternionUpdate+0xce8>)
 8003296:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] = q4 * norm;
 800329a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800329e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <QuaternionUpdate+0xce8>)
 80032a8:	edc3 7a03 	vstr	s15, [r3, #12]
 80032ac:	e002      	b.n	80032b4 <QuaternionUpdate+0xcd8>
    if (norm == 0.0f) return; // handle NaN
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <QuaternionUpdate+0xcd8>
    if (norm == 0.0f) return; // handle NaN
 80032b2:	bf00      	nop
}
 80032b4:	37c8      	adds	r7, #200	; 0xc8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000
 80032c0:	200000f4 	.word	0x200000f4
 80032c4:	20000004 	.word	0x20000004

080032c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032cc:	f000 ff88 	bl	80041e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032d0:	f000 f8a0 	bl	8003414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032d4:	f000 fb7a 	bl	80039cc <MX_GPIO_Init>
  MX_DMA_Init();
 80032d8:	f000 fb40 	bl	800395c <MX_DMA_Init>
  MX_I2C1_Init();
 80032dc:	f000 f902 	bl	80034e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80032e0:	f000 f92e 	bl	8003540 <MX_I2C2_Init>
  MX_TIM1_Init();
 80032e4:	f000 f990 	bl	8003608 <MX_TIM1_Init>
  MX_TIM3_Init();
 80032e8:	f000 fa52 	bl	8003790 <MX_TIM3_Init>
  MX_SPI1_Init();
 80032ec:	f000 f956 	bl	800359c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80032f0:	f000 fae0 	bl	80038b4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80032f4:	f000 fb08 	bl	8003908 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  //initial setPoint
  Roll.setPoint = 0;
 80032f8:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <main+0x128>)
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24
  Pitch.setPoint = 0;
 8003300:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <main+0x12c>)
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	625a      	str	r2, [r3, #36]	; 0x24
  Yaw.setPoint = 0;
 8003308:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <main+0x130>)
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
  Alti.setPoint = 0;
 8003310:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <main+0x134>)
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	625a      	str	r2, [r3, #36]	; 0x24

  //initial gain for all PID
  Roll.kp = 0;
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <main+0x128>)
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
  Roll.ki = 0;
 8003320:	4b33      	ldr	r3, [pc, #204]	; (80033f0 <main+0x128>)
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	605a      	str	r2, [r3, #4]
  Roll.kd = 0;
 8003328:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <main+0x128>)
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	609a      	str	r2, [r3, #8]

  Pitch.kp = 0;
 8003330:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <main+0x12c>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
  Pitch.ki = 0;
 8003338:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <main+0x12c>)
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	605a      	str	r2, [r3, #4]
  Pitch.kd = 0;
 8003340:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <main+0x12c>)
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	609a      	str	r2, [r3, #8]

  Yaw.kp = 0;
 8003348:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <main+0x130>)
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
  Yaw.ki = 0;
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <main+0x130>)
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	605a      	str	r2, [r3, #4]
  Yaw.kd = 0;
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <main+0x130>)
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	609a      	str	r2, [r3, #8]

  Alti.kp = 0;
 8003360:	4b26      	ldr	r3, [pc, #152]	; (80033fc <main+0x134>)
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
  Alti.ki = 0;
 8003368:	4b24      	ldr	r3, [pc, #144]	; (80033fc <main+0x134>)
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	605a      	str	r2, [r3, #4]
  Alti.kd = 0;
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <main+0x134>)
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	609a      	str	r2, [r3, #8]

  //initial output
  Roll.u = 0;
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <main+0x128>)
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	611a      	str	r2, [r3, #16]
  Pitch.u = 0;
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <main+0x12c>)
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  Yaw.u = 0;
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <main+0x130>)
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  Alti.u = 0;
 8003390:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <main+0x134>)
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	611a      	str	r2, [r3, #16]

  //initail deltaT
  Roll.deltaT = 0.001;
 8003398:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <main+0x128>)
 800339a:	4a19      	ldr	r2, [pc, #100]	; (8003400 <main+0x138>)
 800339c:	621a      	str	r2, [r3, #32]
  Pitch.deltaT = 0.001;
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <main+0x12c>)
 80033a0:	4a17      	ldr	r2, [pc, #92]	; (8003400 <main+0x138>)
 80033a2:	621a      	str	r2, [r3, #32]
  Yaw.deltaT = 0.001;
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <main+0x130>)
 80033a6:	4a16      	ldr	r2, [pc, #88]	; (8003400 <main+0x138>)
 80033a8:	621a      	str	r2, [r3, #32]
  Alti.deltaT = 0.001;
 80033aa:	4b14      	ldr	r3, [pc, #80]	; (80033fc <main+0x134>)
 80033ac:	4a14      	ldr	r2, [pc, #80]	; (8003400 <main+0x138>)
 80033ae:	621a      	str	r2, [r3, #32]

  ICM20948_init(&hi2c1);
 80033b0:	4814      	ldr	r0, [pc, #80]	; (8003404 <main+0x13c>)
 80033b2:	f7fe fc99 	bl	8001ce8 <ICM20948_init>
  AK09916_init(&hi2c1);
 80033b6:	4813      	ldr	r0, [pc, #76]	; (8003404 <main+0x13c>)
 80033b8:	f7fe fd9b 	bl	8001ef2 <AK09916_init>
  BMP280_init(&hi2c1);
 80033bc:	4811      	ldr	r0, [pc, #68]	; (8003404 <main+0x13c>)
 80033be:	f7fd fccb 	bl	8000d58 <BMP280_init>
//
//		  PID_function(&Alti, dummyAlti);
//	  }

	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 80033c2:	f000 ff73 	bl	80042ac <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <main+0x140>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d3f8      	bcc.n	80033c2 <main+0xfa>
		timestamp = HAL_GetTick() + 1;
 80033d0:	f000 ff6c 	bl	80042ac <HAL_GetTick>
 80033d4:	4603      	mov	r3, r0
 80033d6:	3301      	adds	r3, #1
 80033d8:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <main+0x140>)
 80033da:	6013      	str	r3, [r2, #0]

		ICM20948_allRead(&hi2c1, &icm20948);
 80033dc:	490b      	ldr	r1, [pc, #44]	; (800340c <main+0x144>)
 80033de:	4809      	ldr	r0, [pc, #36]	; (8003404 <main+0x13c>)
 80033e0:	f7fe f8e2 	bl	80015a8 <ICM20948_allRead>
		BMP280_allRead(&hi2c1, &bmp280);
 80033e4:	490a      	ldr	r1, [pc, #40]	; (8003410 <main+0x148>)
 80033e6:	4807      	ldr	r0, [pc, #28]	; (8003404 <main+0x13c>)
 80033e8:	f7fd fd32 	bl	8000e50 <BMP280_allRead>
  {
 80033ec:	e7e9      	b.n	80033c2 <main+0xfa>
 80033ee:	bf00      	nop
 80033f0:	2000051c 	.word	0x2000051c
 80033f4:	20000544 	.word	0x20000544
 80033f8:	2000056c 	.word	0x2000056c
 80033fc:	20000594 	.word	0x20000594
 8003400:	3a83126f 	.word	0x3a83126f
 8003404:	20000148 	.word	0x20000148
 8003408:	200005bc 	.word	0x200005bc
 800340c:	200004e0 	.word	0x200004e0
 8003410:	20000510 	.word	0x20000510

08003414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b094      	sub	sp, #80	; 0x50
 8003418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800341a:	f107 0320 	add.w	r3, r7, #32
 800341e:	2230      	movs	r2, #48	; 0x30
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f006 f94e 	bl	80096c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003428:	f107 030c 	add.w	r3, r7, #12
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	4b27      	ldr	r3, [pc, #156]	; (80034dc <SystemClock_Config+0xc8>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	4a26      	ldr	r2, [pc, #152]	; (80034dc <SystemClock_Config+0xc8>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
 8003448:	4b24      	ldr	r3, [pc, #144]	; (80034dc <SystemClock_Config+0xc8>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <SystemClock_Config+0xcc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <SystemClock_Config+0xcc>)
 800345e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <SystemClock_Config+0xcc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003470:	2301      	movs	r3, #1
 8003472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003474:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800347a:	2302      	movs	r3, #2
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800347e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003482:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 24;
 8003484:	2318      	movs	r3, #24
 8003486:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003488:	2364      	movs	r3, #100	; 0x64
 800348a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800348c:	2302      	movs	r3, #2
 800348e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003490:	2304      	movs	r3, #4
 8003492:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003494:	f107 0320 	add.w	r3, r7, #32
 8003498:	4618      	mov	r0, r3
 800349a:	f004 f99b 	bl	80077d4 <HAL_RCC_OscConfig>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034a4:	f000 faf0 	bl	8003a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034a8:	230f      	movs	r3, #15
 80034aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ac:	2302      	movs	r3, #2
 80034ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	2103      	movs	r1, #3
 80034c4:	4618      	mov	r0, r3
 80034c6:	f004 fbfd 	bl	8007cc4 <HAL_RCC_ClockConfig>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80034d0:	f000 fada 	bl	8003a88 <Error_Handler>
  }
}
 80034d4:	bf00      	nop
 80034d6:	3750      	adds	r7, #80	; 0x50
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40007000 	.word	0x40007000

080034e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034e8:	4b12      	ldr	r3, [pc, #72]	; (8003534 <MX_I2C1_Init+0x50>)
 80034ea:	4a13      	ldr	r2, [pc, #76]	; (8003538 <MX_I2C1_Init+0x54>)
 80034ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <MX_I2C1_Init+0x50>)
 80034f0:	4a12      	ldr	r2, [pc, #72]	; (800353c <MX_I2C1_Init+0x58>)
 80034f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034f4:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <MX_I2C1_Init+0x50>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <MX_I2C1_Init+0x50>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <MX_I2C1_Init+0x50>)
 8003502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <MX_I2C1_Init+0x50>)
 800350a:	2200      	movs	r2, #0
 800350c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <MX_I2C1_Init+0x50>)
 8003510:	2200      	movs	r2, #0
 8003512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003514:	4b07      	ldr	r3, [pc, #28]	; (8003534 <MX_I2C1_Init+0x50>)
 8003516:	2200      	movs	r2, #0
 8003518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <MX_I2C1_Init+0x50>)
 800351c:	2200      	movs	r2, #0
 800351e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003520:	4804      	ldr	r0, [pc, #16]	; (8003534 <MX_I2C1_Init+0x50>)
 8003522:	f001 fcbd 	bl	8004ea0 <HAL_I2C_Init>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800352c:	f000 faac 	bl	8003a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000148 	.word	0x20000148
 8003538:	40005400 	.word	0x40005400
 800353c:	00061a80 	.word	0x00061a80

08003540 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <MX_I2C2_Init+0x50>)
 8003546:	4a13      	ldr	r2, [pc, #76]	; (8003594 <MX_I2C2_Init+0x54>)
 8003548:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <MX_I2C2_Init+0x50>)
 800354c:	4a12      	ldr	r2, [pc, #72]	; (8003598 <MX_I2C2_Init+0x58>)
 800354e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <MX_I2C2_Init+0x50>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <MX_I2C2_Init+0x50>)
 8003558:	2200      	movs	r2, #0
 800355a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <MX_I2C2_Init+0x50>)
 800355e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003562:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <MX_I2C2_Init+0x50>)
 8003566:	2200      	movs	r2, #0
 8003568:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <MX_I2C2_Init+0x50>)
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <MX_I2C2_Init+0x50>)
 8003572:	2200      	movs	r2, #0
 8003574:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <MX_I2C2_Init+0x50>)
 8003578:	2200      	movs	r2, #0
 800357a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800357c:	4804      	ldr	r0, [pc, #16]	; (8003590 <MX_I2C2_Init+0x50>)
 800357e:	f001 fc8f 	bl	8004ea0 <HAL_I2C_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003588:	f000 fa7e 	bl	8003a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	2000019c 	.word	0x2000019c
 8003594:	40005800 	.word	0x40005800
 8003598:	000186a0 	.word	0x000186a0

0800359c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <MX_SPI1_Init+0x64>)
 80035a2:	4a18      	ldr	r2, [pc, #96]	; (8003604 <MX_SPI1_Init+0x68>)
 80035a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <MX_SPI1_Init+0x64>)
 80035a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <MX_SPI1_Init+0x64>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <MX_SPI1_Init+0x64>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <MX_SPI1_Init+0x64>)
 80035bc:	2200      	movs	r2, #0
 80035be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <MX_SPI1_Init+0x64>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <MX_SPI1_Init+0x64>)
 80035c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <MX_SPI1_Init+0x64>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <MX_SPI1_Init+0x64>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <MX_SPI1_Init+0x64>)
 80035dc:	2200      	movs	r2, #0
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <MX_SPI1_Init+0x64>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <MX_SPI1_Init+0x64>)
 80035e8:	220a      	movs	r2, #10
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035ec:	4804      	ldr	r0, [pc, #16]	; (8003600 <MX_SPI1_Init+0x64>)
 80035ee:	f004 fd49 	bl	8008084 <HAL_SPI_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80035f8:	f000 fa46 	bl	8003a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	200001f0 	.word	0x200001f0
 8003604:	40013000 	.word	0x40013000

08003608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b096      	sub	sp, #88	; 0x58
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800360e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800361c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	611a      	str	r2, [r3, #16]
 8003636:	615a      	str	r2, [r3, #20]
 8003638:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	2220      	movs	r2, #32
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f006 f83f 	bl	80096c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003646:	4b50      	ldr	r3, [pc, #320]	; (8003788 <MX_TIM1_Init+0x180>)
 8003648:	4a50      	ldr	r2, [pc, #320]	; (800378c <MX_TIM1_Init+0x184>)
 800364a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800364c:	4b4e      	ldr	r3, [pc, #312]	; (8003788 <MX_TIM1_Init+0x180>)
 800364e:	2200      	movs	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003652:	4b4d      	ldr	r3, [pc, #308]	; (8003788 <MX_TIM1_Init+0x180>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003658:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <MX_TIM1_Init+0x180>)
 800365a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800365e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003660:	4b49      	ldr	r3, [pc, #292]	; (8003788 <MX_TIM1_Init+0x180>)
 8003662:	2200      	movs	r2, #0
 8003664:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003666:	4b48      	ldr	r3, [pc, #288]	; (8003788 <MX_TIM1_Init+0x180>)
 8003668:	2200      	movs	r2, #0
 800366a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800366c:	4b46      	ldr	r3, [pc, #280]	; (8003788 <MX_TIM1_Init+0x180>)
 800366e:	2200      	movs	r2, #0
 8003670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003672:	4845      	ldr	r0, [pc, #276]	; (8003788 <MX_TIM1_Init+0x180>)
 8003674:	f004 fd8f 	bl	8008196 <HAL_TIM_Base_Init>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800367e:	f000 fa03 	bl	8003a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003688:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800368c:	4619      	mov	r1, r3
 800368e:	483e      	ldr	r0, [pc, #248]	; (8003788 <MX_TIM1_Init+0x180>)
 8003690:	f004 ffe0 	bl	8008654 <HAL_TIM_ConfigClockSource>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800369a:	f000 f9f5 	bl	8003a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800369e:	483a      	ldr	r0, [pc, #232]	; (8003788 <MX_TIM1_Init+0x180>)
 80036a0:	f004 fdc8 	bl	8008234 <HAL_TIM_PWM_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80036aa:	f000 f9ed 	bl	8003a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036ba:	4619      	mov	r1, r3
 80036bc:	4832      	ldr	r0, [pc, #200]	; (8003788 <MX_TIM1_Init+0x180>)
 80036be:	f005 fc55 	bl	8008f6c <HAL_TIMEx_MasterConfigSynchronization>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80036c8:	f000 f9de 	bl	8003a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036cc:	2360      	movs	r3, #96	; 0x60
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036d8:	2300      	movs	r3, #0
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036dc:	2300      	movs	r3, #0
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036e0:	2300      	movs	r3, #0
 80036e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ec:	2200      	movs	r2, #0
 80036ee:	4619      	mov	r1, r3
 80036f0:	4825      	ldr	r0, [pc, #148]	; (8003788 <MX_TIM1_Init+0x180>)
 80036f2:	f004 feed 	bl	80084d0 <HAL_TIM_PWM_ConfigChannel>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80036fc:	f000 f9c4 	bl	8003a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003704:	2204      	movs	r2, #4
 8003706:	4619      	mov	r1, r3
 8003708:	481f      	ldr	r0, [pc, #124]	; (8003788 <MX_TIM1_Init+0x180>)
 800370a:	f004 fee1 	bl	80084d0 <HAL_TIM_PWM_ConfigChannel>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003714:	f000 f9b8 	bl	8003a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371c:	2208      	movs	r2, #8
 800371e:	4619      	mov	r1, r3
 8003720:	4819      	ldr	r0, [pc, #100]	; (8003788 <MX_TIM1_Init+0x180>)
 8003722:	f004 fed5 	bl	80084d0 <HAL_TIM_PWM_ConfigChannel>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800372c:	f000 f9ac 	bl	8003a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003734:	220c      	movs	r2, #12
 8003736:	4619      	mov	r1, r3
 8003738:	4813      	ldr	r0, [pc, #76]	; (8003788 <MX_TIM1_Init+0x180>)
 800373a:	f004 fec9 	bl	80084d0 <HAL_TIM_PWM_ConfigChannel>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003744:	f000 f9a0 	bl	8003a88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800374c:	2300      	movs	r3, #0
 800374e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800375c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003760:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4807      	ldr	r0, [pc, #28]	; (8003788 <MX_TIM1_Init+0x180>)
 800376c:	f005 fc6c 	bl	8009048 <HAL_TIMEx_ConfigBreakDeadTime>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003776:	f000 f987 	bl	8003a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800377a:	4803      	ldr	r0, [pc, #12]	; (8003788 <MX_TIM1_Init+0x180>)
 800377c:	f000 fbd6 	bl	8003f2c <HAL_TIM_MspPostInit>

}
 8003780:	bf00      	nop
 8003782:	3758      	adds	r7, #88	; 0x58
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000248 	.word	0x20000248
 800378c:	40010000 	.word	0x40010000

08003790 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003796:	f107 0318 	add.w	r3, r7, #24
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	609a      	str	r2, [r3, #8]
 80037a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a4:	f107 0310 	add.w	r3, r7, #16
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80037ae:	463b      	mov	r3, r7
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037ba:	4b3c      	ldr	r3, [pc, #240]	; (80038ac <MX_TIM3_Init+0x11c>)
 80037bc:	4a3c      	ldr	r2, [pc, #240]	; (80038b0 <MX_TIM3_Init+0x120>)
 80037be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80037c0:	4b3a      	ldr	r3, [pc, #232]	; (80038ac <MX_TIM3_Init+0x11c>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <MX_TIM3_Init+0x11c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80037cc:	4b37      	ldr	r3, [pc, #220]	; (80038ac <MX_TIM3_Init+0x11c>)
 80037ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d4:	4b35      	ldr	r3, [pc, #212]	; (80038ac <MX_TIM3_Init+0x11c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037da:	4b34      	ldr	r3, [pc, #208]	; (80038ac <MX_TIM3_Init+0x11c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037e0:	4832      	ldr	r0, [pc, #200]	; (80038ac <MX_TIM3_Init+0x11c>)
 80037e2:	f004 fcd8 	bl	8008196 <HAL_TIM_Base_Init>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80037ec:	f000 f94c 	bl	8003a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037f6:	f107 0318 	add.w	r3, r7, #24
 80037fa:	4619      	mov	r1, r3
 80037fc:	482b      	ldr	r0, [pc, #172]	; (80038ac <MX_TIM3_Init+0x11c>)
 80037fe:	f004 ff29 	bl	8008654 <HAL_TIM_ConfigClockSource>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003808:	f000 f93e 	bl	8003a88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800380c:	4827      	ldr	r0, [pc, #156]	; (80038ac <MX_TIM3_Init+0x11c>)
 800380e:	f004 fd6a 	bl	80082e6 <HAL_TIM_IC_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003818:	f000 f936 	bl	8003a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003824:	f107 0310 	add.w	r3, r7, #16
 8003828:	4619      	mov	r1, r3
 800382a:	4820      	ldr	r0, [pc, #128]	; (80038ac <MX_TIM3_Init+0x11c>)
 800382c:	f005 fb9e 	bl	8008f6c <HAL_TIMEx_MasterConfigSynchronization>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8003836:	f000 f927 	bl	8003a88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800383a:	2300      	movs	r3, #0
 800383c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800383e:	2301      	movs	r3, #1
 8003840:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800384a:	463b      	mov	r3, r7
 800384c:	2200      	movs	r2, #0
 800384e:	4619      	mov	r1, r3
 8003850:	4816      	ldr	r0, [pc, #88]	; (80038ac <MX_TIM3_Init+0x11c>)
 8003852:	f004 fda1 	bl	8008398 <HAL_TIM_IC_ConfigChannel>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800385c:	f000 f914 	bl	8003a88 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003860:	463b      	mov	r3, r7
 8003862:	2204      	movs	r2, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4811      	ldr	r0, [pc, #68]	; (80038ac <MX_TIM3_Init+0x11c>)
 8003868:	f004 fd96 	bl	8008398 <HAL_TIM_IC_ConfigChannel>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8003872:	f000 f909 	bl	8003a88 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003876:	463b      	mov	r3, r7
 8003878:	2208      	movs	r2, #8
 800387a:	4619      	mov	r1, r3
 800387c:	480b      	ldr	r0, [pc, #44]	; (80038ac <MX_TIM3_Init+0x11c>)
 800387e:	f004 fd8b 	bl	8008398 <HAL_TIM_IC_ConfigChannel>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8003888:	f000 f8fe 	bl	8003a88 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800388c:	463b      	mov	r3, r7
 800388e:	220c      	movs	r2, #12
 8003890:	4619      	mov	r1, r3
 8003892:	4806      	ldr	r0, [pc, #24]	; (80038ac <MX_TIM3_Init+0x11c>)
 8003894:	f004 fd80 	bl	8008398 <HAL_TIM_IC_ConfigChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 800389e:	f000 f8f3 	bl	8003a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038a2:	bf00      	nop
 80038a4:	3728      	adds	r7, #40	; 0x28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000290 	.word	0x20000290
 80038b0:	40000400 	.word	0x40000400

080038b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <MX_USART2_UART_Init+0x4c>)
 80038ba:	4a12      	ldr	r2, [pc, #72]	; (8003904 <MX_USART2_UART_Init+0x50>)
 80038bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <MX_USART2_UART_Init+0x4c>)
 80038c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <MX_USART2_UART_Init+0x4c>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <MX_USART2_UART_Init+0x4c>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <MX_USART2_UART_Init+0x4c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <MX_USART2_UART_Init+0x4c>)
 80038da:	220c      	movs	r2, #12
 80038dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <MX_USART2_UART_Init+0x4c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <MX_USART2_UART_Init+0x4c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038ea:	4805      	ldr	r0, [pc, #20]	; (8003900 <MX_USART2_UART_Init+0x4c>)
 80038ec:	f005 fbfe 	bl	80090ec <HAL_UART_Init>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80038f6:	f000 f8c7 	bl	8003a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000458 	.word	0x20000458
 8003904:	40004400 	.word	0x40004400

08003908 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <MX_USART6_UART_Init+0x4c>)
 800390e:	4a12      	ldr	r2, [pc, #72]	; (8003958 <MX_USART6_UART_Init+0x50>)
 8003910:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <MX_USART6_UART_Init+0x4c>)
 8003914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003918:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <MX_USART6_UART_Init+0x4c>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <MX_USART6_UART_Init+0x4c>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <MX_USART6_UART_Init+0x4c>)
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <MX_USART6_UART_Init+0x4c>)
 800392e:	220c      	movs	r2, #12
 8003930:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <MX_USART6_UART_Init+0x4c>)
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <MX_USART6_UART_Init+0x4c>)
 800393a:	2200      	movs	r2, #0
 800393c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800393e:	4805      	ldr	r0, [pc, #20]	; (8003954 <MX_USART6_UART_Init+0x4c>)
 8003940:	f005 fbd4 	bl	80090ec <HAL_UART_Init>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800394a:	f000 f89d 	bl	8003a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	2000049c 	.word	0x2000049c
 8003958:	40011400 	.word	0x40011400

0800395c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <MX_DMA_Init+0x6c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <MX_DMA_Init+0x6c>)
 800396c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <MX_DMA_Init+0x6c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	200d      	movs	r0, #13
 8003984:	f000 fd9d 	bl	80044c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003988:	200d      	movs	r0, #13
 800398a:	f000 fdb6 	bl	80044fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	2100      	movs	r1, #0
 8003992:	200f      	movs	r0, #15
 8003994:	f000 fd95 	bl	80044c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003998:	200f      	movs	r0, #15
 800399a:	f000 fdae 	bl	80044fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	2010      	movs	r0, #16
 80039a4:	f000 fd8d 	bl	80044c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80039a8:	2010      	movs	r0, #16
 80039aa:	f000 fda6 	bl	80044fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	2100      	movs	r1, #0
 80039b2:	202f      	movs	r0, #47	; 0x2f
 80039b4:	f000 fd85 	bl	80044c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80039b8:	202f      	movs	r0, #47	; 0x2f
 80039ba:	f000 fd9e 	bl	80044fa <HAL_NVIC_EnableIRQ>

}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800

080039cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d2:	f107 0314 	add.w	r3, r7, #20
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <MX_GPIO_Init+0xb4>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	4a25      	ldr	r2, [pc, #148]	; (8003a80 <MX_GPIO_Init+0xb4>)
 80039ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f0:	6313      	str	r3, [r2, #48]	; 0x30
 80039f2:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <MX_GPIO_Init+0xb4>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <MX_GPIO_Init+0xb4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <MX_GPIO_Init+0xb4>)
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <MX_GPIO_Init+0xb4>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <MX_GPIO_Init+0xb4>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <MX_GPIO_Init+0xb4>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <MX_GPIO_Init+0xb4>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <MX_GPIO_Init+0xb4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4a10      	ldr	r2, [pc, #64]	; (8003a80 <MX_GPIO_Init+0xb4>)
 8003a40:	f043 0302 	orr.w	r3, r3, #2
 8003a44:	6313      	str	r3, [r2, #48]	; 0x30
 8003a46:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <MX_GPIO_Init+0xb4>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 8003a52:	2200      	movs	r2, #0
 8003a54:	2102      	movs	r1, #2
 8003a56:	480b      	ldr	r0, [pc, #44]	; (8003a84 <MX_GPIO_Init+0xb8>)
 8003a58:	f001 fa08 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WP_Pin */
  GPIO_InitStruct.Pin = WP_Pin;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	4619      	mov	r1, r3
 8003a72:	4804      	ldr	r0, [pc, #16]	; (8003a84 <MX_GPIO_Init+0xb8>)
 8003a74:	f001 f876 	bl	8004b64 <HAL_GPIO_Init>

}
 8003a78:	bf00      	nop
 8003a7a:	3728      	adds	r7, #40	; 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40020800 	.word	0x40020800

08003a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a8c:	b672      	cpsid	i
}
 8003a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a90:	e7fe      	b.n	8003a90 <Error_Handler+0x8>
	...

08003a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_MspInit+0x4c>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	4a0f      	ldr	r2, [pc, #60]	; (8003ae0 <HAL_MspInit+0x4c>)
 8003aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <HAL_MspInit+0x4c>)
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_MspInit+0x4c>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <HAL_MspInit+0x4c>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_MspInit+0x4c>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800

08003ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08c      	sub	sp, #48	; 0x30
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aec:	f107 031c 	add.w	r3, r7, #28
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	60da      	str	r2, [r3, #12]
 8003afa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a43      	ldr	r2, [pc, #268]	; (8003c10 <HAL_I2C_MspInit+0x12c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d13c      	bne.n	8003b80 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	4b42      	ldr	r3, [pc, #264]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	4a41      	ldr	r2, [pc, #260]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	6313      	str	r3, [r2, #48]	; 0x30
 8003b16:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b22:	23c0      	movs	r3, #192	; 0xc0
 8003b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b26:	2312      	movs	r3, #18
 8003b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b32:	2304      	movs	r3, #4
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b36:	f107 031c 	add.w	r3, r7, #28
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4836      	ldr	r0, [pc, #216]	; (8003c18 <HAL_I2C_MspInit+0x134>)
 8003b3e:	f001 f811 	bl	8004b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	4a32      	ldr	r2, [pc, #200]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b50:	6413      	str	r3, [r2, #64]	; 0x40
 8003b52:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2100      	movs	r1, #0
 8003b62:	201f      	movs	r0, #31
 8003b64:	f000 fcad 	bl	80044c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b68:	201f      	movs	r0, #31
 8003b6a:	f000 fcc6 	bl	80044fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2100      	movs	r1, #0
 8003b72:	2020      	movs	r0, #32
 8003b74:	f000 fca5 	bl	80044c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b78:	2020      	movs	r0, #32
 8003b7a:	f000 fcbe 	bl	80044fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003b7e:	e042      	b.n	8003c06 <HAL_I2C_MspInit+0x122>
  else if(hi2c->Instance==I2C2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a25      	ldr	r2, [pc, #148]	; (8003c1c <HAL_I2C_MspInit+0x138>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d13d      	bne.n	8003c06 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bac:	2312      	movs	r3, #18
 8003bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003bb8:	2304      	movs	r3, #4
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbc:	f107 031c 	add.w	r3, r7, #28
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4815      	ldr	r0, [pc, #84]	; (8003c18 <HAL_I2C_MspInit+0x134>)
 8003bc4:	f000 ffce 	bl	8004b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bce:	2312      	movs	r3, #18
 8003bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003bda:	2309      	movs	r3, #9
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bde:	f107 031c 	add.w	r3, r7, #28
 8003be2:	4619      	mov	r1, r3
 8003be4:	480c      	ldr	r0, [pc, #48]	; (8003c18 <HAL_I2C_MspInit+0x134>)
 8003be6:	f000 ffbd 	bl	8004b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003bf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_I2C_MspInit+0x130>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
}
 8003c06:	bf00      	nop
 8003c08:	3730      	adds	r7, #48	; 0x30
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40005400 	.word	0x40005400
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40005800 	.word	0x40005800

08003c20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <HAL_SPI_MspInit+0x84>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d12b      	bne.n	8003c9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <HAL_SPI_MspInit+0x88>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <HAL_SPI_MspInit+0x88>)
 8003c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c50:	6453      	str	r3, [r2, #68]	; 0x44
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <HAL_SPI_MspInit+0x88>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_SPI_MspInit+0x88>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	4a10      	ldr	r2, [pc, #64]	; (8003ca8 <HAL_SPI_MspInit+0x88>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <HAL_SPI_MspInit+0x88>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003c7a:	23e0      	movs	r3, #224	; 0xe0
 8003c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c86:	2303      	movs	r3, #3
 8003c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c8a:	2305      	movs	r3, #5
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	4619      	mov	r1, r3
 8003c94:	4805      	ldr	r0, [pc, #20]	; (8003cac <HAL_SPI_MspInit+0x8c>)
 8003c96:	f000 ff65 	bl	8004b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003c9a:	bf00      	nop
 8003c9c:	3728      	adds	r7, #40	; 0x28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40013000 	.word	0x40013000
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40020000 	.word	0x40020000

08003cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	; 0x28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a8b      	ldr	r2, [pc, #556]	; (8003efc <HAL_TIM_Base_MspInit+0x24c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	4b8a      	ldr	r3, [pc, #552]	; (8003f00 <HAL_TIM_Base_MspInit+0x250>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	4a89      	ldr	r2, [pc, #548]	; (8003f00 <HAL_TIM_Base_MspInit+0x250>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce2:	4b87      	ldr	r3, [pc, #540]	; (8003f00 <HAL_TIM_Base_MspInit+0x250>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003cee:	e101      	b.n	8003ef4 <HAL_TIM_Base_MspInit+0x244>
  else if(htim_base->Instance==TIM3)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a83      	ldr	r2, [pc, #524]	; (8003f04 <HAL_TIM_Base_MspInit+0x254>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	f040 80fc 	bne.w	8003ef4 <HAL_TIM_Base_MspInit+0x244>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	4b7f      	ldr	r3, [pc, #508]	; (8003f00 <HAL_TIM_Base_MspInit+0x250>)
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	4a7e      	ldr	r2, [pc, #504]	; (8003f00 <HAL_TIM_Base_MspInit+0x250>)
 8003d06:	f043 0302 	orr.w	r3, r3, #2
 8003d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0c:	4b7c      	ldr	r3, [pc, #496]	; (8003f00 <HAL_TIM_Base_MspInit+0x250>)
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	4b78      	ldr	r3, [pc, #480]	; (8003f00 <HAL_TIM_Base_MspInit+0x250>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	4a77      	ldr	r2, [pc, #476]	; (8003f00 <HAL_TIM_Base_MspInit+0x250>)
 8003d22:	f043 0302 	orr.w	r3, r3, #2
 8003d26:	6313      	str	r3, [r2, #48]	; 0x30
 8003d28:	4b75      	ldr	r3, [pc, #468]	; (8003f00 <HAL_TIM_Base_MspInit+0x250>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWN_IN3_Pin|PWN_IN4_Pin|PWN_IN1_Pin|PWN_IN2_Pin;
 8003d34:	2333      	movs	r3, #51	; 0x33
 8003d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d40:	2300      	movs	r3, #0
 8003d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d44:	2302      	movs	r3, #2
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d48:	f107 0314 	add.w	r3, r7, #20
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	486e      	ldr	r0, [pc, #440]	; (8003f08 <HAL_TIM_Base_MspInit+0x258>)
 8003d50:	f000 ff08 	bl	8004b64 <HAL_GPIO_Init>
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8003d54:	4b6d      	ldr	r3, [pc, #436]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d56:	4a6e      	ldr	r2, [pc, #440]	; (8003f10 <HAL_TIM_Base_MspInit+0x260>)
 8003d58:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8003d5a:	4b6c      	ldr	r3, [pc, #432]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d5c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003d60:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d62:	4b6a      	ldr	r3, [pc, #424]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8003d6e:	4b67      	ldr	r3, [pc, #412]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d74:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d76:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d7c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d7e:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d84:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8003d86:	4b61      	ldr	r3, [pc, #388]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d8c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8003d8e:	4b5f      	ldr	r3, [pc, #380]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d94:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8003d9a:	485c      	ldr	r0, [pc, #368]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003d9c:	f000 fbc8 	bl	8004530 <HAL_DMA_Init>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_TIM_Base_MspInit+0xfa>
      Error_Handler();
 8003da6:	f7ff fe6f 	bl	8003a88 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a57      	ldr	r2, [pc, #348]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24
 8003db0:	4a56      	ldr	r2, [pc, #344]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a54      	ldr	r2, [pc, #336]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003dba:	639a      	str	r2, [r3, #56]	; 0x38
 8003dbc:	4a53      	ldr	r2, [pc, #332]	; (8003f0c <HAL_TIM_Base_MspInit+0x25c>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8003dc2:	4b54      	ldr	r3, [pc, #336]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003dc4:	4a54      	ldr	r2, [pc, #336]	; (8003f18 <HAL_TIM_Base_MspInit+0x268>)
 8003dc6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8003dc8:	4b52      	ldr	r3, [pc, #328]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003dca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003dce:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dd0:	4b50      	ldr	r3, [pc, #320]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd6:	4b4f      	ldr	r3, [pc, #316]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003ddc:	4b4d      	ldr	r3, [pc, #308]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003de2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003de4:	4b4b      	ldr	r3, [pc, #300]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dea:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003dec:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003df2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8003df4:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dfa:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003dfc:	4b45      	ldr	r3, [pc, #276]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e02:	4b44      	ldr	r3, [pc, #272]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003e08:	4842      	ldr	r0, [pc, #264]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003e0a:	f000 fb91 	bl	8004530 <HAL_DMA_Init>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_TIM_Base_MspInit+0x168>
      Error_Handler();
 8003e14:	f7ff fe38 	bl	8003a88 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a3e      	ldr	r2, [pc, #248]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003e1c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e1e:	4a3d      	ldr	r2, [pc, #244]	; (8003f14 <HAL_TIM_Base_MspInit+0x264>)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8003e24:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e26:	4a3e      	ldr	r2, [pc, #248]	; (8003f20 <HAL_TIM_Base_MspInit+0x270>)
 8003e28:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8003e2a:	4b3c      	ldr	r3, [pc, #240]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e2c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003e30:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e32:	4b3a      	ldr	r3, [pc, #232]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e38:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003e3e:	4b37      	ldr	r3, [pc, #220]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e44:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e46:	4b35      	ldr	r3, [pc, #212]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e4c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e4e:	4b33      	ldr	r3, [pc, #204]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e54:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8003e56:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e5c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003e5e:	4b2f      	ldr	r3, [pc, #188]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e64:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003e6a:	482c      	ldr	r0, [pc, #176]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e6c:	f000 fb60 	bl	8004530 <HAL_DMA_Init>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_TIM_Base_MspInit+0x1ca>
      Error_Handler();
 8003e76:	f7ff fe07 	bl	8003a88 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a27      	ldr	r2, [pc, #156]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e80:	4a26      	ldr	r2, [pc, #152]	; (8003f1c <HAL_TIM_Base_MspInit+0x26c>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8003e86:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003e88:	4a27      	ldr	r2, [pc, #156]	; (8003f28 <HAL_TIM_Base_MspInit+0x278>)
 8003e8a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8003e8c:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003e8e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003e92:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e94:	4b23      	ldr	r3, [pc, #140]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e9a:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003ea0:	4b20      	ldr	r3, [pc, #128]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ea6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eae:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003eb0:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eb6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ebe:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003ec0:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ec6:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8003ecc:	4815      	ldr	r0, [pc, #84]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003ece:	f000 fb2f 	bl	8004530 <HAL_DMA_Init>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_TIM_Base_MspInit+0x22c>
      Error_Handler();
 8003ed8:	f7ff fdd6 	bl	8003a88 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee2:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003eec:	621a      	str	r2, [r3, #32]
 8003eee:	4a0d      	ldr	r2, [pc, #52]	; (8003f24 <HAL_TIM_Base_MspInit+0x274>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003ef4:	bf00      	nop
 8003ef6:	3728      	adds	r7, #40	; 0x28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40020400 	.word	0x40020400
 8003f0c:	200002d8 	.word	0x200002d8
 8003f10:	40026070 	.word	0x40026070
 8003f14:	20000338 	.word	0x20000338
 8003f18:	40026088 	.word	0x40026088
 8003f1c:	20000398 	.word	0x20000398
 8003f20:	400260b8 	.word	0x400260b8
 8003f24:	200003f8 	.word	0x200003f8
 8003f28:	40026040 	.word	0x40026040

08003f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 030c 	add.w	r3, r7, #12
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <HAL_TIM_MspPostInit+0x68>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d11e      	bne.n	8003f8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <HAL_TIM_MspPostInit+0x6c>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	4a10      	ldr	r2, [pc, #64]	; (8003f98 <HAL_TIM_MspPostInit+0x6c>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5e:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <HAL_TIM_MspPostInit+0x6c>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ESC_PWM1_Pin|ESC_PWM2_Pin|ESC_PWM3_Pin|ESC_PWM4_Pin;
 8003f6a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003f6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f70:	2302      	movs	r3, #2
 8003f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f80:	f107 030c 	add.w	r3, r7, #12
 8003f84:	4619      	mov	r1, r3
 8003f86:	4805      	ldr	r0, [pc, #20]	; (8003f9c <HAL_TIM_MspPostInit+0x70>)
 8003f88:	f000 fdec 	bl	8004b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003f8c:	bf00      	nop
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40020000 	.word	0x40020000

08003fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08c      	sub	sp, #48	; 0x30
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 031c 	add.w	r3, r7, #28
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a32      	ldr	r2, [pc, #200]	; (8004088 <HAL_UART_MspInit+0xe8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d12c      	bne.n	800401c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	4b31      	ldr	r3, [pc, #196]	; (800408c <HAL_UART_MspInit+0xec>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4a30      	ldr	r2, [pc, #192]	; (800408c <HAL_UART_MspInit+0xec>)
 8003fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_UART_MspInit+0xec>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	; (800408c <HAL_UART_MspInit+0xec>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	4a29      	ldr	r2, [pc, #164]	; (800408c <HAL_UART_MspInit+0xec>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6313      	str	r3, [r2, #48]	; 0x30
 8003fee:	4b27      	ldr	r3, [pc, #156]	; (800408c <HAL_UART_MspInit+0xec>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	2302      	movs	r3, #2
 8004000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004006:	2303      	movs	r3, #3
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800400a:	2307      	movs	r3, #7
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400e:	f107 031c 	add.w	r3, r7, #28
 8004012:	4619      	mov	r1, r3
 8004014:	481e      	ldr	r0, [pc, #120]	; (8004090 <HAL_UART_MspInit+0xf0>)
 8004016:	f000 fda5 	bl	8004b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800401a:	e030      	b.n	800407e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <HAL_UART_MspInit+0xf4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d12b      	bne.n	800407e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <HAL_UART_MspInit+0xec>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_UART_MspInit+0xec>)
 8004030:	f043 0320 	orr.w	r3, r3, #32
 8004034:	6453      	str	r3, [r2, #68]	; 0x44
 8004036:	4b15      	ldr	r3, [pc, #84]	; (800408c <HAL_UART_MspInit+0xec>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <HAL_UART_MspInit+0xec>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a10      	ldr	r2, [pc, #64]	; (800408c <HAL_UART_MspInit+0xec>)
 800404c:	f043 0304 	orr.w	r3, r3, #4
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <HAL_UART_MspInit+0xec>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800405e:	23c0      	movs	r3, #192	; 0xc0
 8004060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004062:	2302      	movs	r3, #2
 8004064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406a:	2303      	movs	r3, #3
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800406e:	2308      	movs	r3, #8
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004072:	f107 031c 	add.w	r3, r7, #28
 8004076:	4619      	mov	r1, r3
 8004078:	4807      	ldr	r0, [pc, #28]	; (8004098 <HAL_UART_MspInit+0xf8>)
 800407a:	f000 fd73 	bl	8004b64 <HAL_GPIO_Init>
}
 800407e:	bf00      	nop
 8004080:	3730      	adds	r7, #48	; 0x30
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40004400 	.word	0x40004400
 800408c:	40023800 	.word	0x40023800
 8004090:	40020000 	.word	0x40020000
 8004094:	40011400 	.word	0x40011400
 8004098:	40020800 	.word	0x40020800

0800409c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040a0:	e7fe      	b.n	80040a0 <NMI_Handler+0x4>

080040a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040a6:	e7fe      	b.n	80040a6 <HardFault_Handler+0x4>

080040a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040ac:	e7fe      	b.n	80040ac <MemManage_Handler+0x4>

080040ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040b2:	e7fe      	b.n	80040b2 <BusFault_Handler+0x4>

080040b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b8:	e7fe      	b.n	80040b8 <UsageFault_Handler+0x4>

080040ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040ba:	b480      	push	{r7}
 80040bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040da:	bf00      	nop
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e8:	f000 f8cc 	bl	8004284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <DMA1_Stream2_IRQHandler+0x10>)
 80040f6:	f000 faeb 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200003f8 	.word	0x200003f8

08004104 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8004108:	4802      	ldr	r0, [pc, #8]	; (8004114 <DMA1_Stream4_IRQHandler+0x10>)
 800410a:	f000 fae1 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200002d8 	.word	0x200002d8

08004118 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <DMA1_Stream5_IRQHandler+0x10>)
 800411e:	f000 fad7 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000338 	.word	0x20000338

0800412c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004130:	4802      	ldr	r0, [pc, #8]	; (800413c <I2C1_EV_IRQHandler+0x10>)
 8004132:	f001 fb19 	bl	8005768 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000148 	.word	0x20000148

08004140 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <I2C1_ER_IRQHandler+0x10>)
 8004146:	f001 fc80 	bl	8005a4a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000148 	.word	0x20000148

08004154 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8004158:	4802      	ldr	r0, [pc, #8]	; (8004164 <DMA1_Stream7_IRQHandler+0x10>)
 800415a:	f000 fab9 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000398 	.word	0x20000398

08004168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <SystemInit+0x20>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <SystemInit+0x20>)
 8004174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800418c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004190:	480d      	ldr	r0, [pc, #52]	; (80041c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004192:	490e      	ldr	r1, [pc, #56]	; (80041cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004194:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004198:	e002      	b.n	80041a0 <LoopCopyDataInit>

0800419a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800419a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800419c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800419e:	3304      	adds	r3, #4

080041a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041a4:	d3f9      	bcc.n	800419a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041a6:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041a8:	4c0b      	ldr	r4, [pc, #44]	; (80041d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041ac:	e001      	b.n	80041b2 <LoopFillZerobss>

080041ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041b0:	3204      	adds	r2, #4

080041b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041b4:	d3fb      	bcc.n	80041ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041b6:	f7ff ffd7 	bl	8004168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041ba:	f005 fa5f 	bl	800967c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041be:	f7ff f883 	bl	80032c8 <main>
  bx  lr    
 80041c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80041c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041cc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80041d0:	08009ccc 	.word	0x08009ccc
  ldr r2, =_sbss
 80041d4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80041d8:	200005c4 	.word	0x200005c4

080041dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041dc:	e7fe      	b.n	80041dc <ADC_IRQHandler>
	...

080041e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041e4:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <HAL_Init+0x40>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a0d      	ldr	r2, [pc, #52]	; (8004220 <HAL_Init+0x40>)
 80041ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_Init+0x40>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_Init+0x40>)
 80041f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041fc:	4b08      	ldr	r3, [pc, #32]	; (8004220 <HAL_Init+0x40>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a07      	ldr	r2, [pc, #28]	; (8004220 <HAL_Init+0x40>)
 8004202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004208:	2003      	movs	r0, #3
 800420a:	f000 f94f 	bl	80044ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800420e:	200f      	movs	r0, #15
 8004210:	f000 f808 	bl	8004224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004214:	f7ff fc3e 	bl	8003a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023c00 	.word	0x40023c00

08004224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <HAL_InitTick+0x54>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_InitTick+0x58>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	4619      	mov	r1, r3
 8004236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800423a:	fbb3 f3f1 	udiv	r3, r3, r1
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f967 	bl	8004516 <HAL_SYSTICK_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e00e      	b.n	8004270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b0f      	cmp	r3, #15
 8004256:	d80a      	bhi.n	800426e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004258:	2200      	movs	r2, #0
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	f000 f92f 	bl	80044c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004264:	4a06      	ldr	r2, [pc, #24]	; (8004280 <HAL_InitTick+0x5c>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000014 	.word	0x20000014
 800427c:	2000001c 	.word	0x2000001c
 8004280:	20000018 	.word	0x20000018

08004284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_IncTick+0x20>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_IncTick+0x24>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4413      	add	r3, r2
 8004294:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <HAL_IncTick+0x24>)
 8004296:	6013      	str	r3, [r2, #0]
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	2000001c 	.word	0x2000001c
 80042a8:	200005c0 	.word	0x200005c0

080042ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return uwTick;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_GetTick+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	200005c0 	.word	0x200005c0

080042c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042cc:	f7ff ffee 	bl	80042ac <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d005      	beq.n	80042ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_Delay+0x44>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042ea:	bf00      	nop
 80042ec:	f7ff ffde 	bl	80042ac <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d8f7      	bhi.n	80042ec <HAL_Delay+0x28>
  {
  }
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	2000001c 	.word	0x2000001c

0800430c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <__NVIC_SetPriorityGrouping+0x44>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004328:	4013      	ands	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800433e:	4a04      	ldr	r2, [pc, #16]	; (8004350 <__NVIC_SetPriorityGrouping+0x44>)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	60d3      	str	r3, [r2, #12]
}
 8004344:	bf00      	nop
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <__NVIC_GetPriorityGrouping+0x18>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	0a1b      	lsrs	r3, r3, #8
 800435e:	f003 0307 	and.w	r3, r3, #7
}
 8004362:	4618      	mov	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437e:	2b00      	cmp	r3, #0
 8004380:	db0b      	blt.n	800439a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	f003 021f 	and.w	r2, r3, #31
 8004388:	4907      	ldr	r1, [pc, #28]	; (80043a8 <__NVIC_EnableIRQ+0x38>)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	2001      	movs	r0, #1
 8004392:	fa00 f202 	lsl.w	r2, r0, r2
 8004396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	e000e100 	.word	0xe000e100

080043ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	6039      	str	r1, [r7, #0]
 80043b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	db0a      	blt.n	80043d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	490c      	ldr	r1, [pc, #48]	; (80043f8 <__NVIC_SetPriority+0x4c>)
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	0112      	lsls	r2, r2, #4
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	440b      	add	r3, r1
 80043d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043d4:	e00a      	b.n	80043ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	4908      	ldr	r1, [pc, #32]	; (80043fc <__NVIC_SetPriority+0x50>)
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	3b04      	subs	r3, #4
 80043e4:	0112      	lsls	r2, r2, #4
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	440b      	add	r3, r1
 80043ea:	761a      	strb	r2, [r3, #24]
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	e000e100 	.word	0xe000e100
 80043fc:	e000ed00 	.word	0xe000ed00

08004400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	; 0x24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f1c3 0307 	rsb	r3, r3, #7
 800441a:	2b04      	cmp	r3, #4
 800441c:	bf28      	it	cs
 800441e:	2304      	movcs	r3, #4
 8004420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3304      	adds	r3, #4
 8004426:	2b06      	cmp	r3, #6
 8004428:	d902      	bls.n	8004430 <NVIC_EncodePriority+0x30>
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3b03      	subs	r3, #3
 800442e:	e000      	b.n	8004432 <NVIC_EncodePriority+0x32>
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004434:	f04f 32ff 	mov.w	r2, #4294967295
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43da      	mvns	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	401a      	ands	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004448:	f04f 31ff 	mov.w	r1, #4294967295
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	43d9      	mvns	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004458:	4313      	orrs	r3, r2
         );
}
 800445a:	4618      	mov	r0, r3
 800445c:	3724      	adds	r7, #36	; 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3b01      	subs	r3, #1
 8004474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004478:	d301      	bcc.n	800447e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800447a:	2301      	movs	r3, #1
 800447c:	e00f      	b.n	800449e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <SysTick_Config+0x40>)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3b01      	subs	r3, #1
 8004484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004486:	210f      	movs	r1, #15
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	f7ff ff8e 	bl	80043ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <SysTick_Config+0x40>)
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004496:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <SysTick_Config+0x40>)
 8004498:	2207      	movs	r2, #7
 800449a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	e000e010 	.word	0xe000e010

080044ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ff29 	bl	800430c <__NVIC_SetPriorityGrouping>
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	4603      	mov	r3, r0
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044d4:	f7ff ff3e 	bl	8004354 <__NVIC_GetPriorityGrouping>
 80044d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f7ff ff8e 	bl	8004400 <NVIC_EncodePriority>
 80044e4:	4602      	mov	r2, r0
 80044e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff5d 	bl	80043ac <__NVIC_SetPriority>
}
 80044f2:	bf00      	nop
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	4603      	mov	r3, r0
 8004502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff31 	bl	8004370 <__NVIC_EnableIRQ>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff ffa2 	bl	8004468 <SysTick_Config>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800453c:	f7ff feb6 	bl	80042ac <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e099      	b.n	8004680 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800456c:	e00f      	b.n	800458e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800456e:	f7ff fe9d 	bl	80042ac <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b05      	cmp	r3, #5
 800457a:	d908      	bls.n	800458e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2203      	movs	r2, #3
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e078      	b.n	8004680 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e8      	bne.n	800456e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4b38      	ldr	r3, [pc, #224]	; (8004688 <HAL_DMA_Init+0x158>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d107      	bne.n	80045f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	4313      	orrs	r3, r2
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 0307 	bic.w	r3, r3, #7
 800460e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b04      	cmp	r3, #4
 8004620:	d117      	bne.n	8004652 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00e      	beq.n	8004652 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fa19 	bl	8004a6c <DMA_CheckFifoParam>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2240      	movs	r2, #64	; 0x40
 8004644:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800464e:	2301      	movs	r3, #1
 8004650:	e016      	b.n	8004680 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f9d0 	bl	8004a00 <DMA_CalcBaseAndBitshift>
 8004660:	4603      	mov	r3, r0
 8004662:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	223f      	movs	r2, #63	; 0x3f
 800466a:	409a      	lsls	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	f010803f 	.word	0xf010803f

0800468c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d004      	beq.n	80046aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2280      	movs	r2, #128	; 0x80
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e00c      	b.n	80046c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2205      	movs	r2, #5
 80046ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0201 	bic.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046dc:	4b8e      	ldr	r3, [pc, #568]	; (8004918 <HAL_DMA_IRQHandler+0x248>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a8e      	ldr	r2, [pc, #568]	; (800491c <HAL_DMA_IRQHandler+0x24c>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	0a9b      	lsrs	r3, r3, #10
 80046e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	2208      	movs	r2, #8
 80046fc:	409a      	lsls	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4013      	ands	r3, r2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01a      	beq.n	800473c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d013      	beq.n	800473c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0204 	bic.w	r2, r2, #4
 8004722:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	2208      	movs	r2, #8
 800472a:	409a      	lsls	r2, r3
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	2201      	movs	r2, #1
 8004742:	409a      	lsls	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d012      	beq.n	8004772 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00b      	beq.n	8004772 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	2201      	movs	r2, #1
 8004760:	409a      	lsls	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	f043 0202 	orr.w	r2, r3, #2
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004776:	2204      	movs	r2, #4
 8004778:	409a      	lsls	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d012      	beq.n	80047a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004794:	2204      	movs	r2, #4
 8004796:	409a      	lsls	r2, r3
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f043 0204 	orr.w	r2, r3, #4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	2210      	movs	r2, #16
 80047ae:	409a      	lsls	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d043      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d03c      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ca:	2210      	movs	r2, #16
 80047cc:	409a      	lsls	r2, r3
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d018      	beq.n	8004812 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d108      	bne.n	8004800 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d024      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
 80047fe:	e01f      	b.n	8004840 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01b      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	4798      	blx	r3
 8004810:	e016      	b.n	8004840 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d107      	bne.n	8004830 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0208 	bic.w	r2, r2, #8
 800482e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	2220      	movs	r2, #32
 8004846:	409a      	lsls	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 808f 	beq.w	8004970 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8087 	beq.w	8004970 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004866:	2220      	movs	r2, #32
 8004868:	409a      	lsls	r2, r3
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b05      	cmp	r3, #5
 8004878:	d136      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0216 	bic.w	r2, r2, #22
 8004888:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004898:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <HAL_DMA_IRQHandler+0x1da>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0208 	bic.w	r2, r2, #8
 80048b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	223f      	movs	r2, #63	; 0x3f
 80048c0:	409a      	lsls	r2, r3
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d07e      	beq.n	80049dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
        }
        return;
 80048e6:	e079      	b.n	80049dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01d      	beq.n	8004932 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10d      	bne.n	8004920 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	2b00      	cmp	r3, #0
 800490a:	d031      	beq.n	8004970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
 8004914:	e02c      	b.n	8004970 <HAL_DMA_IRQHandler+0x2a0>
 8004916:	bf00      	nop
 8004918:	20000014 	.word	0x20000014
 800491c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d023      	beq.n	8004970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
 8004930:	e01e      	b.n	8004970 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10f      	bne.n	8004960 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0210 	bic.w	r2, r2, #16
 800494e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004974:	2b00      	cmp	r3, #0
 8004976:	d032      	beq.n	80049de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d022      	beq.n	80049ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2205      	movs	r2, #5
 8004988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	3301      	adds	r3, #1
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d307      	bcc.n	80049b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f2      	bne.n	800499c <HAL_DMA_IRQHandler+0x2cc>
 80049b6:	e000      	b.n	80049ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
 80049da:	e000      	b.n	80049de <HAL_DMA_IRQHandler+0x30e>
        return;
 80049dc:	bf00      	nop
    }
  }
}
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f2:	b2db      	uxtb	r3, r3
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	3b10      	subs	r3, #16
 8004a10:	4a14      	ldr	r2, [pc, #80]	; (8004a64 <DMA_CalcBaseAndBitshift+0x64>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a1a:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <DMA_CalcBaseAndBitshift+0x68>)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d909      	bls.n	8004a42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	1d1a      	adds	r2, r3, #4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a40:	e007      	b.n	8004a52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a4a:	f023 0303 	bic.w	r3, r3, #3
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	aaaaaaab 	.word	0xaaaaaaab
 8004a68:	08009c78 	.word	0x08009c78

08004a6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11f      	bne.n	8004ac6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d856      	bhi.n	8004b3a <DMA_CheckFifoParam+0xce>
 8004a8c:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <DMA_CheckFifoParam+0x28>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004aa5 	.word	0x08004aa5
 8004a98:	08004ab7 	.word	0x08004ab7
 8004a9c:	08004aa5 	.word	0x08004aa5
 8004aa0:	08004b3b 	.word	0x08004b3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d046      	beq.n	8004b3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab4:	e043      	b.n	8004b3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004abe:	d140      	bne.n	8004b42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac4:	e03d      	b.n	8004b42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ace:	d121      	bne.n	8004b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d837      	bhi.n	8004b46 <DMA_CheckFifoParam+0xda>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <DMA_CheckFifoParam+0x70>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004af3 	.word	0x08004af3
 8004ae4:	08004aed 	.word	0x08004aed
 8004ae8:	08004b05 	.word	0x08004b05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      break;
 8004af0:	e030      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d025      	beq.n	8004b4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b02:	e022      	b.n	8004b4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b0c:	d11f      	bne.n	8004b4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b12:	e01c      	b.n	8004b4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d903      	bls.n	8004b22 <DMA_CheckFifoParam+0xb6>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d003      	beq.n	8004b28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b20:	e018      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	73fb      	strb	r3, [r7, #15]
      break;
 8004b26:	e015      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00e      	beq.n	8004b52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e00b      	b.n	8004b52 <DMA_CheckFifoParam+0xe6>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e00a      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e008      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;
 8004b42:	bf00      	nop
 8004b44:	e006      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;
 8004b46:	bf00      	nop
 8004b48:	e004      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e002      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;
 8004b52:	bf00      	nop
    }
  } 
  
  return status; 
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop

08004b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b089      	sub	sp, #36	; 0x24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	e159      	b.n	8004e34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b80:	2201      	movs	r2, #1
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4013      	ands	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	f040 8148 	bne.w	8004e2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d005      	beq.n	8004bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d130      	bne.n	8004c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bec:	2201      	movs	r2, #1
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 0201 	and.w	r2, r3, #1
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d017      	beq.n	8004c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	2203      	movs	r2, #3
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d123      	bne.n	8004ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	08da      	lsrs	r2, r3, #3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3208      	adds	r2, #8
 8004c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	220f      	movs	r2, #15
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4013      	ands	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	08da      	lsrs	r2, r3, #3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3208      	adds	r2, #8
 8004ca2:	69b9      	ldr	r1, [r7, #24]
 8004ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	2203      	movs	r2, #3
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 0203 	and.w	r2, r3, #3
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80a2 	beq.w	8004e2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	4b57      	ldr	r3, [pc, #348]	; (8004e4c <HAL_GPIO_Init+0x2e8>)
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf2:	4a56      	ldr	r2, [pc, #344]	; (8004e4c <HAL_GPIO_Init+0x2e8>)
 8004cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cfa:	4b54      	ldr	r3, [pc, #336]	; (8004e4c <HAL_GPIO_Init+0x2e8>)
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d06:	4a52      	ldr	r2, [pc, #328]	; (8004e50 <HAL_GPIO_Init+0x2ec>)
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	220f      	movs	r2, #15
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a49      	ldr	r2, [pc, #292]	; (8004e54 <HAL_GPIO_Init+0x2f0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d019      	beq.n	8004d66 <HAL_GPIO_Init+0x202>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a48      	ldr	r2, [pc, #288]	; (8004e58 <HAL_GPIO_Init+0x2f4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <HAL_GPIO_Init+0x1fe>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a47      	ldr	r2, [pc, #284]	; (8004e5c <HAL_GPIO_Init+0x2f8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00d      	beq.n	8004d5e <HAL_GPIO_Init+0x1fa>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a46      	ldr	r2, [pc, #280]	; (8004e60 <HAL_GPIO_Init+0x2fc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <HAL_GPIO_Init+0x1f6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a45      	ldr	r2, [pc, #276]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d101      	bne.n	8004d56 <HAL_GPIO_Init+0x1f2>
 8004d52:	2304      	movs	r3, #4
 8004d54:	e008      	b.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d56:	2307      	movs	r3, #7
 8004d58:	e006      	b.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e004      	b.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e002      	b.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d66:	2300      	movs	r3, #0
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	f002 0203 	and.w	r2, r2, #3
 8004d6e:	0092      	lsls	r2, r2, #2
 8004d70:	4093      	lsls	r3, r2
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d78:	4935      	ldr	r1, [pc, #212]	; (8004e50 <HAL_GPIO_Init+0x2ec>)
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	089b      	lsrs	r3, r3, #2
 8004d7e:	3302      	adds	r3, #2
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d86:	4b38      	ldr	r3, [pc, #224]	; (8004e68 <HAL_GPIO_Init+0x304>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4013      	ands	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004daa:	4a2f      	ldr	r2, [pc, #188]	; (8004e68 <HAL_GPIO_Init+0x304>)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004db0:	4b2d      	ldr	r3, [pc, #180]	; (8004e68 <HAL_GPIO_Init+0x304>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	43db      	mvns	r3, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dd4:	4a24      	ldr	r2, [pc, #144]	; (8004e68 <HAL_GPIO_Init+0x304>)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dda:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <HAL_GPIO_Init+0x304>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	43db      	mvns	r3, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4013      	ands	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dfe:	4a1a      	ldr	r2, [pc, #104]	; (8004e68 <HAL_GPIO_Init+0x304>)
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e04:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <HAL_GPIO_Init+0x304>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e28:	4a0f      	ldr	r2, [pc, #60]	; (8004e68 <HAL_GPIO_Init+0x304>)
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3301      	adds	r3, #1
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	f67f aea2 	bls.w	8004b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	3724      	adds	r7, #36	; 0x24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40013800 	.word	0x40013800
 8004e54:	40020000 	.word	0x40020000
 8004e58:	40020400 	.word	0x40020400
 8004e5c:	40020800 	.word	0x40020800
 8004e60:	40020c00 	.word	0x40020c00
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40013c00 	.word	0x40013c00

08004e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	807b      	strh	r3, [r7, #2]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e7c:	787b      	ldrb	r3, [r7, #1]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e82:	887a      	ldrh	r2, [r7, #2]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e88:	e003      	b.n	8004e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e8a:	887b      	ldrh	r3, [r7, #2]
 8004e8c:	041a      	lsls	r2, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	619a      	str	r2, [r3, #24]
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e12b      	b.n	800510a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fe fe0c 	bl	8003ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0201 	bic.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f04:	f003 f896 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 8004f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4a81      	ldr	r2, [pc, #516]	; (8005114 <HAL_I2C_Init+0x274>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d807      	bhi.n	8004f24 <HAL_I2C_Init+0x84>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a80      	ldr	r2, [pc, #512]	; (8005118 <HAL_I2C_Init+0x278>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	bf94      	ite	ls
 8004f1c:	2301      	movls	r3, #1
 8004f1e:	2300      	movhi	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e006      	b.n	8004f32 <HAL_I2C_Init+0x92>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a7d      	ldr	r2, [pc, #500]	; (800511c <HAL_I2C_Init+0x27c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	bf94      	ite	ls
 8004f2c:	2301      	movls	r3, #1
 8004f2e:	2300      	movhi	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0e7      	b.n	800510a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a78      	ldr	r2, [pc, #480]	; (8005120 <HAL_I2C_Init+0x280>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	0c9b      	lsrs	r3, r3, #18
 8004f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4a6a      	ldr	r2, [pc, #424]	; (8005114 <HAL_I2C_Init+0x274>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d802      	bhi.n	8004f74 <HAL_I2C_Init+0xd4>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3301      	adds	r3, #1
 8004f72:	e009      	b.n	8004f88 <HAL_I2C_Init+0xe8>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	4a69      	ldr	r2, [pc, #420]	; (8005124 <HAL_I2C_Init+0x284>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	099b      	lsrs	r3, r3, #6
 8004f86:	3301      	adds	r3, #1
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	495c      	ldr	r1, [pc, #368]	; (8005114 <HAL_I2C_Init+0x274>)
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	d819      	bhi.n	8004fdc <HAL_I2C_Init+0x13c>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	1e59      	subs	r1, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fb6:	1c59      	adds	r1, r3, #1
 8004fb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fbc:	400b      	ands	r3, r1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_I2C_Init+0x138>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1e59      	subs	r1, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd6:	e051      	b.n	800507c <HAL_I2C_Init+0x1dc>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	e04f      	b.n	800507c <HAL_I2C_Init+0x1dc>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d111      	bne.n	8005008 <HAL_I2C_Init+0x168>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1e58      	subs	r0, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	440b      	add	r3, r1
 8004ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	e012      	b.n	800502e <HAL_I2C_Init+0x18e>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1e58      	subs	r0, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6859      	ldr	r1, [r3, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	0099      	lsls	r1, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	fbb0 f3f3 	udiv	r3, r0, r3
 800501e:	3301      	adds	r3, #1
 8005020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_Init+0x196>
 8005032:	2301      	movs	r3, #1
 8005034:	e022      	b.n	800507c <HAL_I2C_Init+0x1dc>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10e      	bne.n	800505c <HAL_I2C_Init+0x1bc>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1e58      	subs	r0, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6859      	ldr	r1, [r3, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	440b      	add	r3, r1
 800504c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005050:	3301      	adds	r3, #1
 8005052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	e00f      	b.n	800507c <HAL_I2C_Init+0x1dc>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1e58      	subs	r0, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6859      	ldr	r1, [r3, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	0099      	lsls	r1, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005072:	3301      	adds	r3, #1
 8005074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	6809      	ldr	r1, [r1, #0]
 8005080:	4313      	orrs	r3, r2
 8005082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69da      	ldr	r2, [r3, #28]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6911      	ldr	r1, [r2, #16]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68d2      	ldr	r2, [r2, #12]
 80050b6:	4311      	orrs	r1, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	430b      	orrs	r3, r1
 80050be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	000186a0 	.word	0x000186a0
 8005118:	001e847f 	.word	0x001e847f
 800511c:	003d08ff 	.word	0x003d08ff
 8005120:	431bde83 	.word	0x431bde83
 8005124:	10624dd3 	.word	0x10624dd3

08005128 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	4608      	mov	r0, r1
 8005132:	4611      	mov	r1, r2
 8005134:	461a      	mov	r2, r3
 8005136:	4603      	mov	r3, r0
 8005138:	817b      	strh	r3, [r7, #10]
 800513a:	460b      	mov	r3, r1
 800513c:	813b      	strh	r3, [r7, #8]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005142:	f7ff f8b3 	bl	80042ac <HAL_GetTick>
 8005146:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	f040 80d9 	bne.w	8005308 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	2319      	movs	r3, #25
 800515c:	2201      	movs	r2, #1
 800515e:	496d      	ldr	r1, [pc, #436]	; (8005314 <HAL_I2C_Mem_Write+0x1ec>)
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f002 f90d 	bl	8007380 <I2C_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800516c:	2302      	movs	r3, #2
 800516e:	e0cc      	b.n	800530a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_I2C_Mem_Write+0x56>
 800517a:	2302      	movs	r3, #2
 800517c:	e0c5      	b.n	800530a <HAL_I2C_Mem_Write+0x1e2>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	d007      	beq.n	80051a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2221      	movs	r2, #33	; 0x21
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2240      	movs	r2, #64	; 0x40
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a3a      	ldr	r2, [r7, #32]
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a4d      	ldr	r2, [pc, #308]	; (8005318 <HAL_I2C_Mem_Write+0x1f0>)
 80051e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051e6:	88f8      	ldrh	r0, [r7, #6]
 80051e8:	893a      	ldrh	r2, [r7, #8]
 80051ea:	8979      	ldrh	r1, [r7, #10]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	4603      	mov	r3, r0
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f001 fe9c 	bl	8006f34 <I2C_RequestMemoryWrite>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d052      	beq.n	80052a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e081      	b.n	800530a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f002 f98e 	bl	800752c <I2C_WaitOnTXEFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	2b04      	cmp	r3, #4
 800521c:	d107      	bne.n	800522e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e06b      	b.n	800530a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	781a      	ldrb	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d11b      	bne.n	80052a8 <HAL_I2C_Mem_Write+0x180>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	2b00      	cmp	r3, #0
 8005276:	d017      	beq.n	80052a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	781a      	ldrb	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1aa      	bne.n	8005206 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f002 f97a 	bl	80075ae <I2C_WaitOnBTFFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00d      	beq.n	80052dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d107      	bne.n	80052d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e016      	b.n	800530a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	e000      	b.n	800530a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005308:	2302      	movs	r3, #2
  }
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	00100002 	.word	0x00100002
 8005318:	ffff0000 	.word	0xffff0000

0800531c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08c      	sub	sp, #48	; 0x30
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	461a      	mov	r2, r3
 800532a:	4603      	mov	r3, r0
 800532c:	817b      	strh	r3, [r7, #10]
 800532e:	460b      	mov	r3, r1
 8005330:	813b      	strh	r3, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005336:	f7fe ffb9 	bl	80042ac <HAL_GetTick>
 800533a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b20      	cmp	r3, #32
 8005346:	f040 8208 	bne.w	800575a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	2319      	movs	r3, #25
 8005350:	2201      	movs	r2, #1
 8005352:	497b      	ldr	r1, [pc, #492]	; (8005540 <HAL_I2C_Mem_Read+0x224>)
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f002 f813 	bl	8007380 <I2C_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005360:	2302      	movs	r3, #2
 8005362:	e1fb      	b.n	800575c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_I2C_Mem_Read+0x56>
 800536e:	2302      	movs	r3, #2
 8005370:	e1f4      	b.n	800575c <HAL_I2C_Mem_Read+0x440>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	d007      	beq.n	8005398 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2222      	movs	r2, #34	; 0x22
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2240      	movs	r2, #64	; 0x40
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a5b      	ldr	r2, [pc, #364]	; (8005544 <HAL_I2C_Mem_Read+0x228>)
 80053d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053da:	88f8      	ldrh	r0, [r7, #6]
 80053dc:	893a      	ldrh	r2, [r7, #8]
 80053de:	8979      	ldrh	r1, [r7, #10]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	4603      	mov	r3, r0
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f001 fe38 	bl	8007060 <I2C_RequestMemoryRead>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e1b0      	b.n	800575c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d113      	bne.n	800542a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005402:	2300      	movs	r3, #0
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	623b      	str	r3, [r7, #32]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	623b      	str	r3, [r7, #32]
 8005416:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	e184      	b.n	8005734 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542e:	2b01      	cmp	r3, #1
 8005430:	d11b      	bne.n	800546a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005440:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e164      	b.n	8005734 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546e:	2b02      	cmp	r3, #2
 8005470:	d11b      	bne.n	80054aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005480:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	e144      	b.n	8005734 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80054c0:	e138      	b.n	8005734 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	f200 80f1 	bhi.w	80056ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d123      	bne.n	800551c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f002 f8db 	bl	8007694 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e139      	b.n	800575c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	855a      	strh	r2, [r3, #42]	; 0x2a
 800551a:	e10b      	b.n	8005734 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005520:	2b02      	cmp	r3, #2
 8005522:	d14e      	bne.n	80055c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	2200      	movs	r2, #0
 800552c:	4906      	ldr	r1, [pc, #24]	; (8005548 <HAL_I2C_Mem_Read+0x22c>)
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f001 ff26 	bl	8007380 <I2C_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e10e      	b.n	800575c <HAL_I2C_Mem_Read+0x440>
 800553e:	bf00      	nop
 8005540:	00100002 	.word	0x00100002
 8005544:	ffff0000 	.word	0xffff0000
 8005548:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055c0:	e0b8      	b.n	8005734 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	2200      	movs	r2, #0
 80055ca:	4966      	ldr	r1, [pc, #408]	; (8005764 <HAL_I2C_Mem_Read+0x448>)
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f001 fed7 	bl	8007380 <I2C_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0bf      	b.n	800575c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	2200      	movs	r2, #0
 8005626:	494f      	ldr	r1, [pc, #316]	; (8005764 <HAL_I2C_Mem_Read+0x448>)
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f001 fea9 	bl	8007380 <I2C_WaitOnFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e091      	b.n	800575c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ac:	e042      	b.n	8005734 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f001 ffee 	bl	8007694 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e04c      	b.n	800575c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d118      	bne.n	8005734 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005738:	2b00      	cmp	r3, #0
 800573a:	f47f aec2 	bne.w	80054c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e000      	b.n	800575c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
  }
}
 800575c:	4618      	mov	r0, r3
 800575e:	3728      	adds	r7, #40	; 0x28
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	00010004 	.word	0x00010004

08005768 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005788:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	2b10      	cmp	r3, #16
 8005796:	d003      	beq.n	80057a0 <HAL_I2C_EV_IRQHandler+0x38>
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	f040 80c1 	bne.w	8005922 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10d      	bne.n	80057d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057c0:	d003      	beq.n	80057ca <HAL_I2C_EV_IRQHandler+0x62>
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80057c8:	d101      	bne.n	80057ce <HAL_I2C_EV_IRQHandler+0x66>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <HAL_I2C_EV_IRQHandler+0x68>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	f000 8132 	beq.w	8005a3a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00c      	beq.n	80057fa <HAL_I2C_EV_IRQHandler+0x92>
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	0a5b      	lsrs	r3, r3, #9
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d006      	beq.n	80057fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 ffd6 	bl	800779e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fd83 	bl	80062fe <I2C_Master_SB>
 80057f8:	e092      	b.n	8005920 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	08db      	lsrs	r3, r3, #3
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_I2C_EV_IRQHandler+0xb2>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	0a5b      	lsrs	r3, r3, #9
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fdf9 	bl	800640a <I2C_Master_ADD10>
 8005818:	e082      	b.n	8005920 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	085b      	lsrs	r3, r3, #1
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d009      	beq.n	800583a <HAL_I2C_EV_IRQHandler+0xd2>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	0a5b      	lsrs	r3, r3, #9
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fe13 	bl	800645e <I2C_Master_ADDR>
 8005838:	e072      	b.n	8005920 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	089b      	lsrs	r3, r3, #2
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d03b      	beq.n	80058be <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005854:	f000 80f3 	beq.w	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	09db      	lsrs	r3, r3, #7
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00f      	beq.n	8005884 <HAL_I2C_EV_IRQHandler+0x11c>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	0a9b      	lsrs	r3, r3, #10
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <HAL_I2C_EV_IRQHandler+0x11c>
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	089b      	lsrs	r3, r3, #2
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d103      	bne.n	8005884 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f9f3 	bl	8005c68 <I2C_MasterTransmit_TXE>
 8005882:	e04d      	b.n	8005920 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80d6 	beq.w	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	0a5b      	lsrs	r3, r3, #9
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80cf 	beq.w	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	2b21      	cmp	r3, #33	; 0x21
 80058a4:	d103      	bne.n	80058ae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fa7a 	bl	8005da0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058ac:	e0c7      	b.n	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	f040 80c4 	bne.w	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fae8 	bl	8005e8c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058bc:	e0bf      	b.n	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058cc:	f000 80b7 	beq.w	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	099b      	lsrs	r3, r3, #6
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00f      	beq.n	80058fc <HAL_I2C_EV_IRQHandler+0x194>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	0a9b      	lsrs	r3, r3, #10
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <HAL_I2C_EV_IRQHandler+0x194>
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	089b      	lsrs	r3, r3, #2
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d103      	bne.n	80058fc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fb5d 	bl	8005fb4 <I2C_MasterReceive_RXNE>
 80058fa:	e011      	b.n	8005920 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 809a 	beq.w	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	0a5b      	lsrs	r3, r3, #9
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8093 	beq.w	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fc06 	bl	800612a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800591e:	e08e      	b.n	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005920:	e08d      	b.n	8005a3e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d004      	beq.n	8005934 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	e007      	b.n	8005944 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d012      	beq.n	8005976 <HAL_I2C_EV_IRQHandler+0x20e>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	0a5b      	lsrs	r3, r3, #9
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00c      	beq.n	8005976 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800596c:	69b9      	ldr	r1, [r7, #24]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 ffc4 	bl	80068fc <I2C_Slave_ADDR>
 8005974:	e066      	b.n	8005a44 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	091b      	lsrs	r3, r3, #4
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <HAL_I2C_EV_IRQHandler+0x22e>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	0a5b      	lsrs	r3, r3, #9
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fffe 	bl	8006990 <I2C_Slave_STOPF>
 8005994:	e056      	b.n	8005a44 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005996:	7bbb      	ldrb	r3, [r7, #14]
 8005998:	2b21      	cmp	r3, #33	; 0x21
 800599a:	d002      	beq.n	80059a2 <HAL_I2C_EV_IRQHandler+0x23a>
 800599c:	7bbb      	ldrb	r3, [r7, #14]
 800599e:	2b29      	cmp	r3, #41	; 0x29
 80059a0:	d125      	bne.n	80059ee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	09db      	lsrs	r3, r3, #7
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00f      	beq.n	80059ce <HAL_I2C_EV_IRQHandler+0x266>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	0a9b      	lsrs	r3, r3, #10
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_I2C_EV_IRQHandler+0x266>
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 feda 	bl	8006780 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059cc:	e039      	b.n	8005a42 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	089b      	lsrs	r3, r3, #2
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d033      	beq.n	8005a42 <HAL_I2C_EV_IRQHandler+0x2da>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	0a5b      	lsrs	r3, r3, #9
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d02d      	beq.n	8005a42 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 ff07 	bl	80067fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059ec:	e029      	b.n	8005a42 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	099b      	lsrs	r3, r3, #6
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00f      	beq.n	8005a1a <HAL_I2C_EV_IRQHandler+0x2b2>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	0a9b      	lsrs	r3, r3, #10
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 ff12 	bl	800683c <I2C_SlaveReceive_RXNE>
 8005a18:	e014      	b.n	8005a44 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	089b      	lsrs	r3, r3, #2
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00e      	beq.n	8005a44 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	0a5b      	lsrs	r3, r3, #9
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d008      	beq.n	8005a44 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 ff40 	bl	80068b8 <I2C_SlaveReceive_BTF>
 8005a38:	e004      	b.n	8005a44 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005a3a:	bf00      	nop
 8005a3c:	e002      	b.n	8005a44 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a3e:	bf00      	nop
 8005a40:	e000      	b.n	8005a44 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a42:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b08a      	sub	sp, #40	; 0x28
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a6c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <HAL_I2C_ER_IRQHandler+0x4e>
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	0a1b      	lsrs	r3, r3, #8
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d008      	beq.n	8005a98 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a96:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	0a5b      	lsrs	r3, r3, #9
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_I2C_ER_IRQHandler+0x78>
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	f043 0302 	orr.w	r3, r3, #2
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005ac0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	0a9b      	lsrs	r3, r3, #10
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d03f      	beq.n	8005b4e <HAL_I2C_ER_IRQHandler+0x104>
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	0a1b      	lsrs	r3, r3, #8
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d039      	beq.n	8005b4e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005ada:	7efb      	ldrb	r3, [r7, #27]
 8005adc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005af4:	7ebb      	ldrb	r3, [r7, #26]
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d112      	bne.n	8005b20 <HAL_I2C_ER_IRQHandler+0xd6>
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10f      	bne.n	8005b20 <HAL_I2C_ER_IRQHandler+0xd6>
 8005b00:	7cfb      	ldrb	r3, [r7, #19]
 8005b02:	2b21      	cmp	r3, #33	; 0x21
 8005b04:	d008      	beq.n	8005b18 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005b06:	7cfb      	ldrb	r3, [r7, #19]
 8005b08:	2b29      	cmp	r3, #41	; 0x29
 8005b0a:	d005      	beq.n	8005b18 <HAL_I2C_ER_IRQHandler+0xce>
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	2b28      	cmp	r3, #40	; 0x28
 8005b10:	d106      	bne.n	8005b20 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b21      	cmp	r3, #33	; 0x21
 8005b16:	d103      	bne.n	8005b20 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 f869 	bl	8006bf0 <I2C_Slave_AF>
 8005b1e:	e016      	b.n	8005b4e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b28:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	f043 0304 	orr.w	r3, r3, #4
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b32:	7efb      	ldrb	r3, [r7, #27]
 8005b34:	2b10      	cmp	r3, #16
 8005b36:	d002      	beq.n	8005b3e <HAL_I2C_ER_IRQHandler+0xf4>
 8005b38:	7efb      	ldrb	r3, [r7, #27]
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	d107      	bne.n	8005b4e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	0adb      	lsrs	r3, r3, #11
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00e      	beq.n	8005b78 <HAL_I2C_ER_IRQHandler+0x12e>
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	0a1b      	lsrs	r3, r3, #8
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	f043 0308 	orr.w	r3, r3, #8
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005b76:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d008      	beq.n	8005b90 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f001 f8a0 	bl	8006cd0 <I2C_ITError>
  }
}
 8005b90:	bf00      	nop
 8005b92:	3728      	adds	r7, #40	; 0x28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d150      	bne.n	8005d30 <I2C_MasterTransmit_TXE+0xc8>
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	2b21      	cmp	r3, #33	; 0x21
 8005c92:	d14d      	bne.n	8005d30 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d01d      	beq.n	8005cd6 <I2C_MasterTransmit_TXE+0x6e>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d01a      	beq.n	8005cd6 <I2C_MasterTransmit_TXE+0x6e>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ca6:	d016      	beq.n	8005cd6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cb6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2211      	movs	r2, #17
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff ff62 	bl	8005b98 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cd4:	e060      	b.n	8005d98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ce4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	d107      	bne.n	8005d20 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff ff7d 	bl	8005c18 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d1e:	e03b      	b.n	8005d98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff ff35 	bl	8005b98 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d2e:	e033      	b.n	8005d98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	2b21      	cmp	r3, #33	; 0x21
 8005d34:	d005      	beq.n	8005d42 <I2C_MasterTransmit_TXE+0xda>
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d12d      	bne.n	8005d98 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b22      	cmp	r3, #34	; 0x22
 8005d40:	d12a      	bne.n	8005d98 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d108      	bne.n	8005d5e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005d5c:	e01c      	b.n	8005d98 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d103      	bne.n	8005d72 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f88e 	bl	8005e8c <I2C_MemoryTransmit_TXE_BTF>
}
 8005d70:	e012      	b.n	8005d98 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	781a      	ldrb	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d96:	e7ff      	b.n	8005d98 <I2C_MasterTransmit_TXE+0x130>
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b21      	cmp	r3, #33	; 0x21
 8005db8:	d164      	bne.n	8005e84 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d012      	beq.n	8005dea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	781a      	ldrb	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005de8:	e04c      	b.n	8005e84 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d01d      	beq.n	8005e2c <I2C_MasterTransmit_BTF+0x8c>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d01a      	beq.n	8005e2c <I2C_MasterTransmit_BTF+0x8c>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dfc:	d016      	beq.n	8005e2c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e0c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2211      	movs	r2, #17
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff feb7 	bl	8005b98 <HAL_I2C_MasterTxCpltCallback>
}
 8005e2a:	e02b      	b.n	8005e84 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e3a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e4a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b40      	cmp	r3, #64	; 0x40
 8005e64:	d107      	bne.n	8005e76 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fed2 	bl	8005c18 <HAL_I2C_MemTxCpltCallback>
}
 8005e74:	e006      	b.n	8005e84 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff fe8a 	bl	8005b98 <HAL_I2C_MasterTxCpltCallback>
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11d      	bne.n	8005ee0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10b      	bne.n	8005ec4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebc:	1c9a      	adds	r2, r3, #2
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005ec2:	e073      	b.n	8005fac <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	121b      	asrs	r3, r3, #8
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ede:	e065      	b.n	8005fac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10b      	bne.n	8005f00 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005efe:	e055      	b.n	8005fac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d151      	bne.n	8005fac <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b22      	cmp	r3, #34	; 0x22
 8005f0c:	d10d      	bne.n	8005f2a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f1c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f28:	e040      	b.n	8005fac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d015      	beq.n	8005f60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b21      	cmp	r3, #33	; 0x21
 8005f38:	d112      	bne.n	8005f60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f5e:	e025      	b.n	8005fac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d120      	bne.n	8005fac <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	2b21      	cmp	r3, #33	; 0x21
 8005f6e:	d11d      	bne.n	8005fac <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f7e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff fe36 	bl	8005c18 <HAL_I2C_MemTxCpltCallback>
}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b22      	cmp	r3, #34	; 0x22
 8005fc6:	f040 80ac 	bne.w	8006122 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d921      	bls.n	800601c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b03      	cmp	r3, #3
 8006006:	f040 808c 	bne.w	8006122 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006018:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800601a:	e082      	b.n	8006122 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	2b02      	cmp	r3, #2
 8006022:	d075      	beq.n	8006110 <I2C_MasterReceive_RXNE+0x15c>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d002      	beq.n	8006030 <I2C_MasterReceive_RXNE+0x7c>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d16f      	bne.n	8006110 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 fafd 	bl	8007630 <I2C_WaitOnSTOPRequestThroughIT>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d142      	bne.n	80060c2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800605a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d10a      	bne.n	80060ac <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fdc1 	bl	8005c2c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060aa:	e03a      	b.n	8006122 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2212      	movs	r2, #18
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff fd76 	bl	8005bac <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060c0:	e02f      	b.n	8006122 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff fd99 	bl	8005c40 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800610e:	e008      	b.n	8006122 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800611e:	605a      	str	r2, [r3, #4]
}
 8006120:	e7ff      	b.n	8006122 <I2C_MasterReceive_RXNE+0x16e>
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b04      	cmp	r3, #4
 8006140:	d11b      	bne.n	800617a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006150:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006178:	e0bd      	b.n	80062f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b03      	cmp	r3, #3
 8006182:	d129      	bne.n	80061d8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006192:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b04      	cmp	r3, #4
 8006198:	d00a      	beq.n	80061b0 <I2C_MasterReceive_BTF+0x86>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d007      	beq.n	80061b0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691a      	ldr	r2, [r3, #16]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061d6:	e08e      	b.n	80062f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d176      	bne.n	80062d0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d002      	beq.n	80061ee <I2C_MasterReceive_BTF+0xc4>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d108      	bne.n	8006200 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e019      	b.n	8006234 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b04      	cmp	r3, #4
 8006204:	d002      	beq.n	800620c <I2C_MasterReceive_BTF+0xe2>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d108      	bne.n	800621e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	e00a      	b.n	8006234 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b10      	cmp	r3, #16
 8006222:	d007      	beq.n	8006234 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006232:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800628e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d10a      	bne.n	80062ba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fcba 	bl	8005c2c <HAL_I2C_MemRxCpltCallback>
}
 80062b8:	e01d      	b.n	80062f6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2212      	movs	r2, #18
 80062c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff fc6f 	bl	8005bac <HAL_I2C_MasterRxCpltCallback>
}
 80062ce:	e012      	b.n	80062f6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691a      	ldr	r2, [r3, #16]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d117      	bne.n	8006342 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800632a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800632c:	e067      	b.n	80063fe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	b2da      	uxtb	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	611a      	str	r2, [r3, #16]
}
 8006340:	e05d      	b.n	80063fe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800634a:	d133      	bne.n	80063b4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b21      	cmp	r3, #33	; 0x21
 8006356:	d109      	bne.n	800636c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635c:	b2db      	uxtb	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006368:	611a      	str	r2, [r3, #16]
 800636a:	e008      	b.n	800637e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f043 0301 	orr.w	r3, r3, #1
 8006376:	b2da      	uxtb	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <I2C_Master_SB+0x92>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	2b00      	cmp	r3, #0
 8006396:	d032      	beq.n	80063fe <I2C_Master_SB+0x100>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d02d      	beq.n	80063fe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b0:	605a      	str	r2, [r3, #4]
}
 80063b2:	e024      	b.n	80063fe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10e      	bne.n	80063da <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	11db      	asrs	r3, r3, #7
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	f003 0306 	and.w	r3, r3, #6
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f063 030f 	orn	r3, r3, #15
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	611a      	str	r2, [r3, #16]
}
 80063d8:	e011      	b.n	80063fe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d10d      	bne.n	80063fe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	11db      	asrs	r3, r3, #7
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f003 0306 	and.w	r3, r3, #6
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f063 030e 	orn	r3, r3, #14
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	611a      	str	r2, [r3, #16]
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	b2da      	uxtb	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	2b00      	cmp	r3, #0
 8006424:	d004      	beq.n	8006430 <I2C_Master_ADD10+0x26>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d108      	bne.n	8006442 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00c      	beq.n	8006452 <I2C_Master_ADD10+0x48>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006450:	605a      	str	r2, [r3, #4]
  }
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800645e:	b480      	push	{r7}
 8006460:	b091      	sub	sp, #68	; 0x44
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800646c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b22      	cmp	r3, #34	; 0x22
 8006486:	f040 8169 	bne.w	800675c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <I2C_Master_ADDR+0x54>
 8006492:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d10b      	bne.n	80064b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649a:	2300      	movs	r3, #0
 800649c:	633b      	str	r3, [r7, #48]	; 0x30
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	633b      	str	r3, [r7, #48]	; 0x30
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	633b      	str	r3, [r7, #48]	; 0x30
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	e160      	b.n	8006774 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d11d      	bne.n	80064f6 <I2C_Master_ADDR+0x98>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064c2:	d118      	bne.n	80064f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c4:	2300      	movs	r3, #0
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	651a      	str	r2, [r3, #80]	; 0x50
 80064f4:	e13e      	b.n	8006774 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d113      	bne.n	8006528 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006500:	2300      	movs	r3, #0
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e115      	b.n	8006754 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	f040 808a 	bne.w	8006648 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800653a:	d137      	bne.n	80065ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655a:	d113      	bne.n	8006584 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800656a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800656c:	2300      	movs	r3, #0
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	e0e7      	b.n	8006754 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006584:	2300      	movs	r3, #0
 8006586:	623b      	str	r3, [r7, #32]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	623b      	str	r3, [r7, #32]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	623b      	str	r3, [r7, #32]
 8006598:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e0d3      	b.n	8006754 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d02e      	beq.n	8006610 <I2C_Master_ADDR+0x1b2>
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d02b      	beq.n	8006610 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ba:	2b12      	cmp	r3, #18
 80065bc:	d102      	bne.n	80065c4 <I2C_Master_ADDR+0x166>
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d125      	bne.n	8006610 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d00e      	beq.n	80065e8 <I2C_Master_ADDR+0x18a>
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d00b      	beq.n	80065e8 <I2C_Master_ADDR+0x18a>
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d008      	beq.n	80065e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	e007      	b.n	80065f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f8:	2300      	movs	r3, #0
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	e0a1      	b.n	8006754 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800661e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006620:	2300      	movs	r3, #0
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	e085      	b.n	8006754 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d14d      	bne.n	80066ee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006654:	2b04      	cmp	r3, #4
 8006656:	d016      	beq.n	8006686 <I2C_Master_ADDR+0x228>
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	2b02      	cmp	r3, #2
 800665c:	d013      	beq.n	8006686 <I2C_Master_ADDR+0x228>
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	2b10      	cmp	r3, #16
 8006662:	d010      	beq.n	8006686 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006672:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e007      	b.n	8006696 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006694:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a4:	d117      	bne.n	80066d6 <I2C_Master_ADDR+0x278>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066ac:	d00b      	beq.n	80066c6 <I2C_Master_ADDR+0x268>
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d008      	beq.n	80066c6 <I2C_Master_ADDR+0x268>
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d005      	beq.n	80066c6 <I2C_Master_ADDR+0x268>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	2b10      	cmp	r3, #16
 80066be:	d002      	beq.n	80066c6 <I2C_Master_ADDR+0x268>
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d107      	bne.n	80066d6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	e032      	b.n	8006754 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800670c:	d117      	bne.n	800673e <I2C_Master_ADDR+0x2e0>
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006714:	d00b      	beq.n	800672e <I2C_Master_ADDR+0x2d0>
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	2b01      	cmp	r3, #1
 800671a:	d008      	beq.n	800672e <I2C_Master_ADDR+0x2d0>
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	2b08      	cmp	r3, #8
 8006720:	d005      	beq.n	800672e <I2C_Master_ADDR+0x2d0>
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	2b10      	cmp	r3, #16
 8006726:	d002      	beq.n	800672e <I2C_Master_ADDR+0x2d0>
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	2b20      	cmp	r3, #32
 800672c:	d107      	bne.n	800673e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800673c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673e:	2300      	movs	r3, #0
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800675a:	e00b      	b.n	8006774 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800675c:	2300      	movs	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
}
 8006772:	e7ff      	b.n	8006774 <I2C_Master_ADDR+0x316>
 8006774:	bf00      	nop
 8006776:	3744      	adds	r7, #68	; 0x44
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d02b      	beq.n	80067f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d114      	bne.n	80067f2 <I2C_SlaveTransmit_TXE+0x72>
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	2b29      	cmp	r3, #41	; 0x29
 80067cc:	d111      	bne.n	80067f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2221      	movs	r2, #33	; 0x21
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2228      	movs	r2, #40	; 0x28
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff f9e7 	bl	8005bc0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d011      	beq.n	8006830 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006850:	b29b      	uxth	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d02c      	beq.n	80068b0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d114      	bne.n	80068b0 <I2C_SlaveReceive_RXNE+0x74>
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	2b2a      	cmp	r3, #42	; 0x2a
 800688a:	d111      	bne.n	80068b0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2222      	movs	r2, #34	; 0x22
 80068a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2228      	movs	r2, #40	; 0x28
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff f992 	bl	8005bd4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80068b0:	bf00      	nop
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d012      	beq.n	80068f0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006916:	2b28      	cmp	r3, #40	; 0x28
 8006918:	d127      	bne.n	800696a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006928:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	089b      	lsrs	r3, r3, #2
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	09db      	lsrs	r3, r3, #7
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d103      	bne.n	800694e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	81bb      	strh	r3, [r7, #12]
 800694c:	e002      	b.n	8006954 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800695c:	89ba      	ldrh	r2, [r7, #12]
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff f940 	bl	8005be8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006968:	e00e      	b.n	8006988 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800696a:	2300      	movs	r3, #0
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006988:	bf00      	nop
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80069b0:	2300      	movs	r3, #0
 80069b2:	60bb      	str	r3, [r7, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ec:	d172      	bne.n	8006ad4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	2b22      	cmp	r3, #34	; 0x22
 80069f2:	d002      	beq.n	80069fa <I2C_Slave_STOPF+0x6a>
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b2a      	cmp	r3, #42	; 0x2a
 80069f8:	d135      	bne.n	8006a66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f043 0204 	orr.w	r2, r3, #4
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fd ffd6 	bl	80049e4 <HAL_DMA_GetState>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d049      	beq.n	8006ad2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	4a69      	ldr	r2, [pc, #420]	; (8006be8 <I2C_Slave_STOPF+0x258>)
 8006a44:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fd fe1e 	bl	800468c <HAL_DMA_Abort_IT>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d03d      	beq.n	8006ad2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a64:	e035      	b.n	8006ad2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f043 0204 	orr.w	r2, r3, #4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fd ffa0 	bl	80049e4 <HAL_DMA_GetState>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d014      	beq.n	8006ad4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aae:	4a4e      	ldr	r2, [pc, #312]	; (8006be8 <I2C_Slave_STOPF+0x258>)
 8006ab0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fd fde8 	bl	800468c <HAL_DMA_Abort_IT>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d008      	beq.n	8006ad4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006acc:	4610      	mov	r0, r2
 8006ace:	4798      	blx	r3
 8006ad0:	e000      	b.n	8006ad4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ad2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d03e      	beq.n	8006b5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d112      	bne.n	8006b12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	d112      	bne.n	8006b46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	f043 0204 	orr.w	r2, r3, #4
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8b3 	bl	8006cd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006b6a:	e039      	b.n	8006be0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b70:	d109      	bne.n	8006b86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2228      	movs	r2, #40	; 0x28
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff f827 	bl	8005bd4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b28      	cmp	r3, #40	; 0x28
 8006b90:	d111      	bne.n	8006bb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a15      	ldr	r2, [pc, #84]	; (8006bec <I2C_Slave_STOPF+0x25c>)
 8006b96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff f828 	bl	8005c04 <HAL_I2C_ListenCpltCallback>
}
 8006bb4:	e014      	b.n	8006be0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	2b22      	cmp	r3, #34	; 0x22
 8006bbc:	d002      	beq.n	8006bc4 <I2C_Slave_STOPF+0x234>
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b22      	cmp	r3, #34	; 0x22
 8006bc2:	d10d      	bne.n	8006be0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fe fffa 	bl	8005bd4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006be0:	bf00      	nop
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	08007231 	.word	0x08007231
 8006bec:	ffff0000 	.word	0xffff0000

08006bf0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d002      	beq.n	8006c12 <I2C_Slave_AF+0x22>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d129      	bne.n	8006c66 <I2C_Slave_AF+0x76>
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	2b28      	cmp	r3, #40	; 0x28
 8006c16:	d126      	bne.n	8006c66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a2c      	ldr	r2, [pc, #176]	; (8006ccc <I2C_Slave_AF+0xdc>)
 8006c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fe ffd0 	bl	8005c04 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006c64:	e02e      	b.n	8006cc4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b21      	cmp	r3, #33	; 0x21
 8006c6a:	d126      	bne.n	8006cba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a17      	ldr	r2, [pc, #92]	; (8006ccc <I2C_Slave_AF+0xdc>)
 8006c70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2221      	movs	r2, #33	; 0x21
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ca0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fe ff84 	bl	8005bc0 <HAL_I2C_SlaveTxCpltCallback>
}
 8006cb8:	e004      	b.n	8006cc4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cc2:	615a      	str	r2, [r3, #20]
}
 8006cc4:	bf00      	nop
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	ffff0000 	.word	0xffff0000

08006cd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	2b10      	cmp	r3, #16
 8006cec:	d002      	beq.n	8006cf4 <I2C_ITError+0x24>
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d10a      	bne.n	8006d0a <I2C_ITError+0x3a>
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b22      	cmp	r3, #34	; 0x22
 8006cf8:	d107      	bne.n	8006d0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d10:	2b28      	cmp	r3, #40	; 0x28
 8006d12:	d107      	bne.n	8006d24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2228      	movs	r2, #40	; 0x28
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d22:	e015      	b.n	8006d50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d32:	d00a      	beq.n	8006d4a <I2C_ITError+0x7a>
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	2b60      	cmp	r3, #96	; 0x60
 8006d38:	d007      	beq.n	8006d4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d5e:	d162      	bne.n	8006e26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d020      	beq.n	8006dc0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	4a6a      	ldr	r2, [pc, #424]	; (8006f2c <I2C_ITError+0x25c>)
 8006d84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fd fc7e 	bl	800468c <HAL_DMA_Abort_IT>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 8089 	beq.w	8006eaa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0201 	bic.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4798      	blx	r3
 8006dbe:	e074      	b.n	8006eaa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	4a59      	ldr	r2, [pc, #356]	; (8006f2c <I2C_ITError+0x25c>)
 8006dc6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fd fc5d 	bl	800468c <HAL_DMA_Abort_IT>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d068      	beq.n	8006eaa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d10b      	bne.n	8006dfe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e20:	4610      	mov	r0, r2
 8006e22:	4798      	blx	r3
 8006e24:	e041      	b.n	8006eaa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b60      	cmp	r3, #96	; 0x60
 8006e30:	d125      	bne.n	8006e7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4a:	2b40      	cmp	r3, #64	; 0x40
 8006e4c:	d10b      	bne.n	8006e66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	691a      	ldr	r2, [r3, #16]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0201 	bic.w	r2, r2, #1
 8006e74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fe feec 	bl	8005c54 <HAL_I2C_AbortCpltCallback>
 8006e7c:	e015      	b.n	8006eaa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d10b      	bne.n	8006ea4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fe fecb 	bl	8005c40 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10e      	bne.n	8006ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d007      	beq.n	8006ee8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ee6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d113      	bne.n	8006f24 <I2C_ITError+0x254>
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b28      	cmp	r3, #40	; 0x28
 8006f00:	d110      	bne.n	8006f24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a0a      	ldr	r2, [pc, #40]	; (8006f30 <I2C_ITError+0x260>)
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fe fe70 	bl	8005c04 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	08007231 	.word	0x08007231
 8006f30:	ffff0000 	.word	0xffff0000

08006f34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	4611      	mov	r1, r2
 8006f40:	461a      	mov	r2, r3
 8006f42:	4603      	mov	r3, r0
 8006f44:	817b      	strh	r3, [r7, #10]
 8006f46:	460b      	mov	r3, r1
 8006f48:	813b      	strh	r3, [r7, #8]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fa08 	bl	8007380 <I2C_WaitOnFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f84:	d103      	bne.n	8006f8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e05f      	b.n	8007052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f92:	897b      	ldrh	r3, [r7, #10]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	6a3a      	ldr	r2, [r7, #32]
 8006fa6:	492d      	ldr	r1, [pc, #180]	; (800705c <I2C_RequestMemoryWrite+0x128>)
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fa40 	bl	800742e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e04c      	b.n	8007052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd0:	6a39      	ldr	r1, [r7, #32]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 faaa 	bl	800752c <I2C_WaitOnTXEFlagUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00d      	beq.n	8006ffa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d107      	bne.n	8006ff6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ff4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e02b      	b.n	8007052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ffa:	88fb      	ldrh	r3, [r7, #6]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d105      	bne.n	800700c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007000:	893b      	ldrh	r3, [r7, #8]
 8007002:	b2da      	uxtb	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	611a      	str	r2, [r3, #16]
 800700a:	e021      	b.n	8007050 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800700c:	893b      	ldrh	r3, [r7, #8]
 800700e:	0a1b      	lsrs	r3, r3, #8
 8007010:	b29b      	uxth	r3, r3
 8007012:	b2da      	uxtb	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800701a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701c:	6a39      	ldr	r1, [r7, #32]
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 fa84 	bl	800752c <I2C_WaitOnTXEFlagUntilTimeout>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00d      	beq.n	8007046 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	2b04      	cmp	r3, #4
 8007030:	d107      	bne.n	8007042 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007040:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e005      	b.n	8007052 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007046:	893b      	ldrh	r3, [r7, #8]
 8007048:	b2da      	uxtb	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	00010002 	.word	0x00010002

08007060 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	4608      	mov	r0, r1
 800706a:	4611      	mov	r1, r2
 800706c:	461a      	mov	r2, r3
 800706e:	4603      	mov	r3, r0
 8007070:	817b      	strh	r3, [r7, #10]
 8007072:	460b      	mov	r3, r1
 8007074:	813b      	strh	r3, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007088:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007098:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f96a 	bl	8007380 <I2C_WaitOnFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c0:	d103      	bne.n	80070ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e0aa      	b.n	8007224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070ce:	897b      	ldrh	r3, [r7, #10]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	461a      	mov	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	6a3a      	ldr	r2, [r7, #32]
 80070e2:	4952      	ldr	r1, [pc, #328]	; (800722c <I2C_RequestMemoryRead+0x1cc>)
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f9a2 	bl	800742e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e097      	b.n	8007224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800710a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800710c:	6a39      	ldr	r1, [r7, #32]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fa0c 	bl	800752c <I2C_WaitOnTXEFlagUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00d      	beq.n	8007136 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	2b04      	cmp	r3, #4
 8007120:	d107      	bne.n	8007132 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007130:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e076      	b.n	8007224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d105      	bne.n	8007148 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800713c:	893b      	ldrh	r3, [r7, #8]
 800713e:	b2da      	uxtb	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	611a      	str	r2, [r3, #16]
 8007146:	e021      	b.n	800718c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007148:	893b      	ldrh	r3, [r7, #8]
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	b29b      	uxth	r3, r3
 800714e:	b2da      	uxtb	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007158:	6a39      	ldr	r1, [r7, #32]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f9e6 	bl	800752c <I2C_WaitOnTXEFlagUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00d      	beq.n	8007182 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	2b04      	cmp	r3, #4
 800716c:	d107      	bne.n	800717e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800717c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e050      	b.n	8007224 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007182:	893b      	ldrh	r3, [r7, #8]
 8007184:	b2da      	uxtb	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800718c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718e:	6a39      	ldr	r1, [r7, #32]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f9cb 	bl	800752c <I2C_WaitOnTXEFlagUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00d      	beq.n	80071b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d107      	bne.n	80071b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e035      	b.n	8007224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f8d3 	bl	8007380 <I2C_WaitOnFlagUntilTimeout>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00d      	beq.n	80071fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ee:	d103      	bne.n	80071f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e013      	b.n	8007224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071fc:	897b      	ldrh	r3, [r7, #10]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f043 0301 	orr.w	r3, r3, #1
 8007204:	b2da      	uxtb	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	6a3a      	ldr	r2, [r7, #32]
 8007210:	4906      	ldr	r1, [pc, #24]	; (800722c <I2C_RequestMemoryRead+0x1cc>)
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 f90b 	bl	800742e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	00010002 	.word	0x00010002

08007230 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007240:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007248:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800724a:	4b4b      	ldr	r3, [pc, #300]	; (8007378 <I2C_DMAAbort+0x148>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	08db      	lsrs	r3, r3, #3
 8007250:	4a4a      	ldr	r2, [pc, #296]	; (800737c <I2C_DMAAbort+0x14c>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	0a1a      	lsrs	r2, r3, #8
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	00da      	lsls	r2, r3, #3
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	f043 0220 	orr.w	r2, r3, #32
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007276:	e00a      	b.n	800728e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3b01      	subs	r3, #1
 800727c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800728c:	d0ea      	beq.n	8007264 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729a:	2200      	movs	r2, #0
 800729c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	2200      	movs	r2, #0
 80072ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2200      	movs	r2, #0
 80072c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d0:	2200      	movs	r2, #0
 80072d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	2200      	movs	r2, #0
 80072e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0201 	bic.w	r2, r2, #1
 80072f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b60      	cmp	r3, #96	; 0x60
 80072fe:	d10e      	bne.n	800731e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2200      	movs	r2, #0
 8007314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007316:	6978      	ldr	r0, [r7, #20]
 8007318:	f7fe fc9c 	bl	8005c54 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800731c:	e027      	b.n	800736e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800731e:	7cfb      	ldrb	r3, [r7, #19]
 8007320:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007324:	2b28      	cmp	r3, #40	; 0x28
 8007326:	d117      	bne.n	8007358 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0201 	orr.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007346:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2228      	movs	r2, #40	; 0x28
 8007352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007356:	e007      	b.n	8007368 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2220      	movs	r2, #32
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007368:	6978      	ldr	r0, [r7, #20]
 800736a:	f7fe fc69 	bl	8005c40 <HAL_I2C_ErrorCallback>
}
 800736e:	bf00      	nop
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000014 	.word	0x20000014
 800737c:	14f8b589 	.word	0x14f8b589

08007380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	4613      	mov	r3, r2
 800738e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007390:	e025      	b.n	80073de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d021      	beq.n	80073de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739a:	f7fc ff87 	bl	80042ac <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d302      	bcc.n	80073b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d116      	bne.n	80073de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f043 0220 	orr.w	r2, r3, #32
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e023      	b.n	8007426 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d10d      	bne.n	8007404 <I2C_WaitOnFlagUntilTimeout+0x84>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	43da      	mvns	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4013      	ands	r3, r2
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	bf0c      	ite	eq
 80073fa:	2301      	moveq	r3, #1
 80073fc:	2300      	movne	r3, #0
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	461a      	mov	r2, r3
 8007402:	e00c      	b.n	800741e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	43da      	mvns	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4013      	ands	r3, r2
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	bf0c      	ite	eq
 8007416:	2301      	moveq	r3, #1
 8007418:	2300      	movne	r3, #0
 800741a:	b2db      	uxtb	r3, r3
 800741c:	461a      	mov	r2, r3
 800741e:	79fb      	ldrb	r3, [r7, #7]
 8007420:	429a      	cmp	r2, r3
 8007422:	d0b6      	beq.n	8007392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
 800743a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800743c:	e051      	b.n	80074e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800744c:	d123      	bne.n	8007496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800745c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007466:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2220      	movs	r2, #32
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	f043 0204 	orr.w	r2, r3, #4
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e046      	b.n	8007524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d021      	beq.n	80074e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749e:	f7fc ff05 	bl	80042ac <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d302      	bcc.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d116      	bne.n	80074e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f043 0220 	orr.w	r2, r3, #32
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e020      	b.n	8007524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	0c1b      	lsrs	r3, r3, #16
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d10c      	bne.n	8007506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	43da      	mvns	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4013      	ands	r3, r2
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bf14      	ite	ne
 80074fe:	2301      	movne	r3, #1
 8007500:	2300      	moveq	r3, #0
 8007502:	b2db      	uxtb	r3, r3
 8007504:	e00b      	b.n	800751e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	43da      	mvns	r2, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	4013      	ands	r3, r2
 8007512:	b29b      	uxth	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	bf14      	ite	ne
 8007518:	2301      	movne	r3, #1
 800751a:	2300      	moveq	r3, #0
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d18d      	bne.n	800743e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007538:	e02d      	b.n	8007596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f900 	bl	8007740 <I2C_IsAcknowledgeFailed>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e02d      	b.n	80075a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d021      	beq.n	8007596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007552:	f7fc feab 	bl	80042ac <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	d302      	bcc.n	8007568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d116      	bne.n	8007596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f043 0220 	orr.w	r2, r3, #32
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e007      	b.n	80075a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a0:	2b80      	cmp	r3, #128	; 0x80
 80075a2:	d1ca      	bne.n	800753a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075ba:	e02d      	b.n	8007618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 f8bf 	bl	8007740 <I2C_IsAcknowledgeFailed>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e02d      	b.n	8007628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d2:	d021      	beq.n	8007618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d4:	f7fc fe6a 	bl	80042ac <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d302      	bcc.n	80075ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d116      	bne.n	8007618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007604:	f043 0220 	orr.w	r2, r3, #32
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e007      	b.n	8007628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	f003 0304 	and.w	r3, r3, #4
 8007622:	2b04      	cmp	r3, #4
 8007624:	d1ca      	bne.n	80075bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800763c:	4b13      	ldr	r3, [pc, #76]	; (800768c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	08db      	lsrs	r3, r3, #3
 8007642:	4a13      	ldr	r2, [pc, #76]	; (8007690 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007644:	fba2 2303 	umull	r2, r3, r2, r3
 8007648:	0a1a      	lsrs	r2, r3, #8
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3b01      	subs	r3, #1
 8007656:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d107      	bne.n	800766e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	f043 0220 	orr.w	r2, r3, #32
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e008      	b.n	8007680 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800767c:	d0e9      	beq.n	8007652 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	20000014 	.word	0x20000014
 8007690:	14f8b589 	.word	0x14f8b589

08007694 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076a0:	e042      	b.n	8007728 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b10      	cmp	r3, #16
 80076ae:	d119      	bne.n	80076e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0210 	mvn.w	r2, #16
 80076b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e029      	b.n	8007738 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e4:	f7fc fde2 	bl	80042ac <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d302      	bcc.n	80076fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d116      	bne.n	8007728 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007714:	f043 0220 	orr.w	r2, r3, #32
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e007      	b.n	8007738 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007732:	2b40      	cmp	r3, #64	; 0x40
 8007734:	d1b5      	bne.n	80076a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007756:	d11b      	bne.n	8007790 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007760:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	f043 0204 	orr.w	r2, r3, #4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e000      	b.n	8007792 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80077ae:	d103      	bne.n	80077b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80077b6:	e007      	b.n	80077c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80077c0:	d102      	bne.n	80077c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2208      	movs	r2, #8
 80077c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e267      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d075      	beq.n	80078de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077f2:	4b88      	ldr	r3, [pc, #544]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 030c 	and.w	r3, r3, #12
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d00c      	beq.n	8007818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077fe:	4b85      	ldr	r3, [pc, #532]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007806:	2b08      	cmp	r3, #8
 8007808:	d112      	bne.n	8007830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800780a:	4b82      	ldr	r3, [pc, #520]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007816:	d10b      	bne.n	8007830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007818:	4b7e      	ldr	r3, [pc, #504]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d05b      	beq.n	80078dc <HAL_RCC_OscConfig+0x108>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d157      	bne.n	80078dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e242      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007838:	d106      	bne.n	8007848 <HAL_RCC_OscConfig+0x74>
 800783a:	4b76      	ldr	r3, [pc, #472]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a75      	ldr	r2, [pc, #468]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	e01d      	b.n	8007884 <HAL_RCC_OscConfig+0xb0>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007850:	d10c      	bne.n	800786c <HAL_RCC_OscConfig+0x98>
 8007852:	4b70      	ldr	r3, [pc, #448]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a6f      	ldr	r2, [pc, #444]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	4b6d      	ldr	r3, [pc, #436]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a6c      	ldr	r2, [pc, #432]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e00b      	b.n	8007884 <HAL_RCC_OscConfig+0xb0>
 800786c:	4b69      	ldr	r3, [pc, #420]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a68      	ldr	r2, [pc, #416]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	4b66      	ldr	r3, [pc, #408]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a65      	ldr	r2, [pc, #404]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 800787e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d013      	beq.n	80078b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800788c:	f7fc fd0e 	bl	80042ac <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007894:	f7fc fd0a 	bl	80042ac <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b64      	cmp	r3, #100	; 0x64
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e207      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078a6:	4b5b      	ldr	r3, [pc, #364]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0f0      	beq.n	8007894 <HAL_RCC_OscConfig+0xc0>
 80078b2:	e014      	b.n	80078de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078b4:	f7fc fcfa 	bl	80042ac <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078bc:	f7fc fcf6 	bl	80042ac <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b64      	cmp	r3, #100	; 0x64
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e1f3      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ce:	4b51      	ldr	r3, [pc, #324]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f0      	bne.n	80078bc <HAL_RCC_OscConfig+0xe8>
 80078da:	e000      	b.n	80078de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d063      	beq.n	80079b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078ea:	4b4a      	ldr	r3, [pc, #296]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 030c 	and.w	r3, r3, #12
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078f6:	4b47      	ldr	r3, [pc, #284]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078fe:	2b08      	cmp	r3, #8
 8007900:	d11c      	bne.n	800793c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007902:	4b44      	ldr	r3, [pc, #272]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d116      	bne.n	800793c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800790e:	4b41      	ldr	r3, [pc, #260]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <HAL_RCC_OscConfig+0x152>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d001      	beq.n	8007926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e1c7      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007926:	4b3b      	ldr	r3, [pc, #236]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	4937      	ldr	r1, [pc, #220]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007936:	4313      	orrs	r3, r2
 8007938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800793a:	e03a      	b.n	80079b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d020      	beq.n	8007986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007944:	4b34      	ldr	r3, [pc, #208]	; (8007a18 <HAL_RCC_OscConfig+0x244>)
 8007946:	2201      	movs	r2, #1
 8007948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794a:	f7fc fcaf 	bl	80042ac <HAL_GetTick>
 800794e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007950:	e008      	b.n	8007964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007952:	f7fc fcab 	bl	80042ac <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d901      	bls.n	8007964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e1a8      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007964:	4b2b      	ldr	r3, [pc, #172]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0f0      	beq.n	8007952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007970:	4b28      	ldr	r3, [pc, #160]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	4925      	ldr	r1, [pc, #148]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007980:	4313      	orrs	r3, r2
 8007982:	600b      	str	r3, [r1, #0]
 8007984:	e015      	b.n	80079b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007986:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <HAL_RCC_OscConfig+0x244>)
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800798c:	f7fc fc8e 	bl	80042ac <HAL_GetTick>
 8007990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007992:	e008      	b.n	80079a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007994:	f7fc fc8a 	bl	80042ac <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d901      	bls.n	80079a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e187      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079a6:	4b1b      	ldr	r3, [pc, #108]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f0      	bne.n	8007994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0308 	and.w	r3, r3, #8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d036      	beq.n	8007a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d016      	beq.n	80079f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079c6:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <HAL_RCC_OscConfig+0x248>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079cc:	f7fc fc6e 	bl	80042ac <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079d4:	f7fc fc6a 	bl	80042ac <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e167      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079e6:	4b0b      	ldr	r3, [pc, #44]	; (8007a14 <HAL_RCC_OscConfig+0x240>)
 80079e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f0      	beq.n	80079d4 <HAL_RCC_OscConfig+0x200>
 80079f2:	e01b      	b.n	8007a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079f4:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <HAL_RCC_OscConfig+0x248>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079fa:	f7fc fc57 	bl	80042ac <HAL_GetTick>
 80079fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a00:	e00e      	b.n	8007a20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a02:	f7fc fc53 	bl	80042ac <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d907      	bls.n	8007a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e150      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
 8007a14:	40023800 	.word	0x40023800
 8007a18:	42470000 	.word	0x42470000
 8007a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a20:	4b88      	ldr	r3, [pc, #544]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1ea      	bne.n	8007a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 8097 	beq.w	8007b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a3e:	4b81      	ldr	r3, [pc, #516]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10f      	bne.n	8007a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60bb      	str	r3, [r7, #8]
 8007a4e:	4b7d      	ldr	r3, [pc, #500]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	4a7c      	ldr	r2, [pc, #496]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a58:	6413      	str	r3, [r2, #64]	; 0x40
 8007a5a:	4b7a      	ldr	r3, [pc, #488]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a62:	60bb      	str	r3, [r7, #8]
 8007a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a66:	2301      	movs	r3, #1
 8007a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a6a:	4b77      	ldr	r3, [pc, #476]	; (8007c48 <HAL_RCC_OscConfig+0x474>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d118      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a76:	4b74      	ldr	r3, [pc, #464]	; (8007c48 <HAL_RCC_OscConfig+0x474>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a73      	ldr	r2, [pc, #460]	; (8007c48 <HAL_RCC_OscConfig+0x474>)
 8007a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a82:	f7fc fc13 	bl	80042ac <HAL_GetTick>
 8007a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a88:	e008      	b.n	8007a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a8a:	f7fc fc0f 	bl	80042ac <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d901      	bls.n	8007a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e10c      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a9c:	4b6a      	ldr	r3, [pc, #424]	; (8007c48 <HAL_RCC_OscConfig+0x474>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0f0      	beq.n	8007a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d106      	bne.n	8007abe <HAL_RCC_OscConfig+0x2ea>
 8007ab0:	4b64      	ldr	r3, [pc, #400]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab4:	4a63      	ldr	r2, [pc, #396]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	6713      	str	r3, [r2, #112]	; 0x70
 8007abc:	e01c      	b.n	8007af8 <HAL_RCC_OscConfig+0x324>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	2b05      	cmp	r3, #5
 8007ac4:	d10c      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x30c>
 8007ac6:	4b5f      	ldr	r3, [pc, #380]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aca:	4a5e      	ldr	r2, [pc, #376]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007acc:	f043 0304 	orr.w	r3, r3, #4
 8007ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad2:	4b5c      	ldr	r3, [pc, #368]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad6:	4a5b      	ldr	r2, [pc, #364]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ad8:	f043 0301 	orr.w	r3, r3, #1
 8007adc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ade:	e00b      	b.n	8007af8 <HAL_RCC_OscConfig+0x324>
 8007ae0:	4b58      	ldr	r3, [pc, #352]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae4:	4a57      	ldr	r2, [pc, #348]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ae6:	f023 0301 	bic.w	r3, r3, #1
 8007aea:	6713      	str	r3, [r2, #112]	; 0x70
 8007aec:	4b55      	ldr	r3, [pc, #340]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af0:	4a54      	ldr	r2, [pc, #336]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007af2:	f023 0304 	bic.w	r3, r3, #4
 8007af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d015      	beq.n	8007b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b00:	f7fc fbd4 	bl	80042ac <HAL_GetTick>
 8007b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b06:	e00a      	b.n	8007b1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b08:	f7fc fbd0 	bl	80042ac <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d901      	bls.n	8007b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e0cb      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b1e:	4b49      	ldr	r3, [pc, #292]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0ee      	beq.n	8007b08 <HAL_RCC_OscConfig+0x334>
 8007b2a:	e014      	b.n	8007b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b2c:	f7fc fbbe 	bl	80042ac <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b32:	e00a      	b.n	8007b4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b34:	f7fc fbba 	bl	80042ac <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e0b5      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b4a:	4b3e      	ldr	r3, [pc, #248]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1ee      	bne.n	8007b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d105      	bne.n	8007b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b5c:	4b39      	ldr	r3, [pc, #228]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	4a38      	ldr	r2, [pc, #224]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 80a1 	beq.w	8007cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b72:	4b34      	ldr	r3, [pc, #208]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f003 030c 	and.w	r3, r3, #12
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	d05c      	beq.n	8007c38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d141      	bne.n	8007c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b86:	4b31      	ldr	r3, [pc, #196]	; (8007c4c <HAL_RCC_OscConfig+0x478>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b8c:	f7fc fb8e 	bl	80042ac <HAL_GetTick>
 8007b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b94:	f7fc fb8a 	bl	80042ac <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e087      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba6:	4b27      	ldr	r3, [pc, #156]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f0      	bne.n	8007b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69da      	ldr	r2, [r3, #28]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	019b      	lsls	r3, r3, #6
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc8:	085b      	lsrs	r3, r3, #1
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	041b      	lsls	r3, r3, #16
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	061b      	lsls	r3, r3, #24
 8007bd6:	491b      	ldr	r1, [pc, #108]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bdc:	4b1b      	ldr	r3, [pc, #108]	; (8007c4c <HAL_RCC_OscConfig+0x478>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be2:	f7fc fb63 	bl	80042ac <HAL_GetTick>
 8007be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007be8:	e008      	b.n	8007bfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bea:	f7fc fb5f 	bl	80042ac <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d901      	bls.n	8007bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e05c      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bfc:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d0f0      	beq.n	8007bea <HAL_RCC_OscConfig+0x416>
 8007c08:	e054      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c0a:	4b10      	ldr	r3, [pc, #64]	; (8007c4c <HAL_RCC_OscConfig+0x478>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c10:	f7fc fb4c 	bl	80042ac <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c18:	f7fc fb48 	bl	80042ac <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e045      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c2a:	4b06      	ldr	r3, [pc, #24]	; (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x444>
 8007c36:	e03d      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d107      	bne.n	8007c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e038      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
 8007c44:	40023800 	.word	0x40023800
 8007c48:	40007000 	.word	0x40007000
 8007c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c50:	4b1b      	ldr	r3, [pc, #108]	; (8007cc0 <HAL_RCC_OscConfig+0x4ec>)
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d028      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d121      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d11a      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c80:	4013      	ands	r3, r2
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d111      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	085b      	lsrs	r3, r3, #1
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d107      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d001      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e000      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40023800 	.word	0x40023800

08007cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0cc      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd8:	4b68      	ldr	r3, [pc, #416]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0307 	and.w	r3, r3, #7
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d90c      	bls.n	8007d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce6:	4b65      	ldr	r3, [pc, #404]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cee:	4b63      	ldr	r3, [pc, #396]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d001      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e0b8      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d020      	beq.n	8007d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d18:	4b59      	ldr	r3, [pc, #356]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	4a58      	ldr	r2, [pc, #352]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0308 	and.w	r3, r3, #8
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d30:	4b53      	ldr	r3, [pc, #332]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	4a52      	ldr	r2, [pc, #328]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d3c:	4b50      	ldr	r3, [pc, #320]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	494d      	ldr	r1, [pc, #308]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d044      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d107      	bne.n	8007d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d62:	4b47      	ldr	r3, [pc, #284]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d119      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e07f      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d003      	beq.n	8007d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d107      	bne.n	8007d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d82:	4b3f      	ldr	r3, [pc, #252]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d109      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e06f      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d92:	4b3b      	ldr	r3, [pc, #236]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e067      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007da2:	4b37      	ldr	r3, [pc, #220]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f023 0203 	bic.w	r2, r3, #3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	4934      	ldr	r1, [pc, #208]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007db4:	f7fc fa7a 	bl	80042ac <HAL_GetTick>
 8007db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dba:	e00a      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dbc:	f7fc fa76 	bl	80042ac <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e04f      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dd2:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f003 020c 	and.w	r2, r3, #12
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d1eb      	bne.n	8007dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007de4:	4b25      	ldr	r3, [pc, #148]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d20c      	bcs.n	8007e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df2:	4b22      	ldr	r3, [pc, #136]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dfa:	4b20      	ldr	r3, [pc, #128]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d001      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e032      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e18:	4b19      	ldr	r3, [pc, #100]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	4916      	ldr	r1, [pc, #88]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0308 	and.w	r3, r3, #8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d009      	beq.n	8007e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e36:	4b12      	ldr	r3, [pc, #72]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	490e      	ldr	r1, [pc, #56]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e4a:	f000 f821 	bl	8007e90 <HAL_RCC_GetSysClockFreq>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	091b      	lsrs	r3, r3, #4
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	490a      	ldr	r1, [pc, #40]	; (8007e84 <HAL_RCC_ClockConfig+0x1c0>)
 8007e5c:	5ccb      	ldrb	r3, [r1, r3]
 8007e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e62:	4a09      	ldr	r2, [pc, #36]	; (8007e88 <HAL_RCC_ClockConfig+0x1c4>)
 8007e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e66:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <HAL_RCC_ClockConfig+0x1c8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fc f9da 	bl	8004224 <HAL_InitTick>

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40023c00 	.word	0x40023c00
 8007e80:	40023800 	.word	0x40023800
 8007e84:	08009c60 	.word	0x08009c60
 8007e88:	20000014 	.word	0x20000014
 8007e8c:	20000018 	.word	0x20000018

08007e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e94:	b090      	sub	sp, #64	; 0x40
 8007e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ea8:	4b59      	ldr	r3, [pc, #356]	; (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 030c 	and.w	r3, r3, #12
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d00d      	beq.n	8007ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	f200 80a1 	bhi.w	8007ffc <HAL_RCC_GetSysClockFreq+0x16c>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d003      	beq.n	8007eca <HAL_RCC_GetSysClockFreq+0x3a>
 8007ec2:	e09b      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ec4:	4b53      	ldr	r3, [pc, #332]	; (8008014 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ec6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007ec8:	e09b      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007eca:	4b53      	ldr	r3, [pc, #332]	; (8008018 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ecc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ece:	e098      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ed0:	4b4f      	ldr	r3, [pc, #316]	; (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007eda:	4b4d      	ldr	r3, [pc, #308]	; (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d028      	beq.n	8007f38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ee6:	4b4a      	ldr	r3, [pc, #296]	; (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	099b      	lsrs	r3, r3, #6
 8007eec:	2200      	movs	r2, #0
 8007eee:	623b      	str	r3, [r7, #32]
 8007ef0:	627a      	str	r2, [r7, #36]	; 0x24
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4b47      	ldr	r3, [pc, #284]	; (8008018 <HAL_RCC_GetSysClockFreq+0x188>)
 8007efc:	fb03 f201 	mul.w	r2, r3, r1
 8007f00:	2300      	movs	r3, #0
 8007f02:	fb00 f303 	mul.w	r3, r0, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	4a43      	ldr	r2, [pc, #268]	; (8008018 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f0a:	fba0 1202 	umull	r1, r2, r0, r2
 8007f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f10:	460a      	mov	r2, r1
 8007f12:	62ba      	str	r2, [r7, #40]	; 0x28
 8007f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f16:	4413      	add	r3, r2
 8007f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	61bb      	str	r3, [r7, #24]
 8007f20:	61fa      	str	r2, [r7, #28]
 8007f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f2a:	f7f8 fd93 	bl	8000a54 <__aeabi_uldivmod>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4613      	mov	r3, r2
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f36:	e053      	b.n	8007fe0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f38:	4b35      	ldr	r3, [pc, #212]	; (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	099b      	lsrs	r3, r3, #6
 8007f3e:	2200      	movs	r2, #0
 8007f40:	613b      	str	r3, [r7, #16]
 8007f42:	617a      	str	r2, [r7, #20]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007f4a:	f04f 0b00 	mov.w	fp, #0
 8007f4e:	4652      	mov	r2, sl
 8007f50:	465b      	mov	r3, fp
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f04f 0100 	mov.w	r1, #0
 8007f5a:	0159      	lsls	r1, r3, #5
 8007f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f60:	0150      	lsls	r0, r2, #5
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	ebb2 080a 	subs.w	r8, r2, sl
 8007f6a:	eb63 090b 	sbc.w	r9, r3, fp
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f82:	ebb2 0408 	subs.w	r4, r2, r8
 8007f86:	eb63 0509 	sbc.w	r5, r3, r9
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	f04f 0300 	mov.w	r3, #0
 8007f92:	00eb      	lsls	r3, r5, #3
 8007f94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f98:	00e2      	lsls	r2, r4, #3
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	461d      	mov	r5, r3
 8007f9e:	eb14 030a 	adds.w	r3, r4, sl
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	eb45 030b 	adc.w	r3, r5, fp
 8007fa8:	607b      	str	r3, [r7, #4]
 8007faa:	f04f 0200 	mov.w	r2, #0
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	028b      	lsls	r3, r1, #10
 8007fba:	4621      	mov	r1, r4
 8007fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	028a      	lsls	r2, r1, #10
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fca:	2200      	movs	r2, #0
 8007fcc:	60bb      	str	r3, [r7, #8]
 8007fce:	60fa      	str	r2, [r7, #12]
 8007fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fd4:	f7f8 fd3e 	bl	8000a54 <__aeabi_uldivmod>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4613      	mov	r3, r2
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	3301      	adds	r3, #1
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007ff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ffa:	e002      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ffe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008004:	4618      	mov	r0, r3
 8008006:	3740      	adds	r7, #64	; 0x40
 8008008:	46bd      	mov	sp, r7
 800800a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800800e:	bf00      	nop
 8008010:	40023800 	.word	0x40023800
 8008014:	00f42400 	.word	0x00f42400
 8008018:	02dc6c00 	.word	0x02dc6c00

0800801c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008020:	4b03      	ldr	r3, [pc, #12]	; (8008030 <HAL_RCC_GetHCLKFreq+0x14>)
 8008022:	681b      	ldr	r3, [r3, #0]
}
 8008024:	4618      	mov	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000014 	.word	0x20000014

08008034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008038:	f7ff fff0 	bl	800801c <HAL_RCC_GetHCLKFreq>
 800803c:	4602      	mov	r2, r0
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	0a9b      	lsrs	r3, r3, #10
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	4903      	ldr	r1, [pc, #12]	; (8008058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800804a:	5ccb      	ldrb	r3, [r1, r3]
 800804c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008050:	4618      	mov	r0, r3
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40023800 	.word	0x40023800
 8008058:	08009c70 	.word	0x08009c70

0800805c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008060:	f7ff ffdc 	bl	800801c <HAL_RCC_GetHCLKFreq>
 8008064:	4602      	mov	r2, r0
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	0b5b      	lsrs	r3, r3, #13
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	4903      	ldr	r1, [pc, #12]	; (8008080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008072:	5ccb      	ldrb	r3, [r1, r3]
 8008074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008078:	4618      	mov	r0, r3
 800807a:	bd80      	pop	{r7, pc}
 800807c:	40023800 	.word	0x40023800
 8008080:	08009c70 	.word	0x08009c70

08008084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e07b      	b.n	800818e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	2b00      	cmp	r3, #0
 800809c:	d108      	bne.n	80080b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080a6:	d009      	beq.n	80080bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	61da      	str	r2, [r3, #28]
 80080ae:	e005      	b.n	80080bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fb fda2 	bl	8003c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f003 0302 	and.w	r3, r3, #2
 8008118:	431a      	orrs	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008140:	ea42 0103 	orr.w	r1, r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008148:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	0c1b      	lsrs	r3, r3, #16
 800815a:	f003 0104 	and.w	r1, r3, #4
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	f003 0210 	and.w	r2, r3, #16
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69da      	ldr	r2, [r3, #28]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800817c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e041      	b.n	800822c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d106      	bne.n	80081c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7fb fd77 	bl	8003cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2202      	movs	r2, #2
 80081c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3304      	adds	r3, #4
 80081d2:	4619      	mov	r1, r3
 80081d4:	4610      	mov	r0, r2
 80081d6:	f000 fb05 	bl	80087e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e041      	b.n	80082ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d106      	bne.n	8008260 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f839 	bl	80082d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3304      	adds	r3, #4
 8008270:	4619      	mov	r1, r3
 8008272:	4610      	mov	r0, r2
 8008274:	f000 fab6 	bl	80087e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082da:	bf00      	nop
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e041      	b.n	800837c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d106      	bne.n	8008312 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f839 	bl	8008384 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2202      	movs	r2, #2
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3304      	adds	r3, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f000 fa5d 	bl	80087e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e088      	b.n	80084c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d11b      	bne.n	80083fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	6819      	ldr	r1, [r3, #0]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f000 fc12 	bl	8008bfc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699a      	ldr	r2, [r3, #24]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 020c 	bic.w	r2, r2, #12
 80083e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6999      	ldr	r1, [r3, #24]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	619a      	str	r2, [r3, #24]
 80083fa:	e060      	b.n	80084be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d11c      	bne.n	800843c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	6819      	ldr	r1, [r3, #0]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f000 fc8a 	bl	8008d2a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	699a      	ldr	r2, [r3, #24]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008424:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6999      	ldr	r1, [r3, #24]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	021a      	lsls	r2, r3, #8
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	619a      	str	r2, [r3, #24]
 800843a:	e040      	b.n	80084be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b08      	cmp	r3, #8
 8008440:	d11b      	bne.n	800847a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6819      	ldr	r1, [r3, #0]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f000 fcd7 	bl	8008e04 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69da      	ldr	r2, [r3, #28]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 020c 	bic.w	r2, r2, #12
 8008464:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69d9      	ldr	r1, [r3, #28]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	61da      	str	r2, [r3, #28]
 8008478:	e021      	b.n	80084be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b0c      	cmp	r3, #12
 800847e:	d11c      	bne.n	80084ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6818      	ldr	r0, [r3, #0]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	6819      	ldr	r1, [r3, #0]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f000 fcf4 	bl	8008e7c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69da      	ldr	r2, [r3, #28]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80084a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	69d9      	ldr	r1, [r3, #28]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	021a      	lsls	r2, r3, #8
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	61da      	str	r2, [r3, #28]
 80084b8:	e001      	b.n	80084be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d101      	bne.n	80084ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084ea:	2302      	movs	r3, #2
 80084ec:	e0ae      	b.n	800864c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b0c      	cmp	r3, #12
 80084fa:	f200 809f 	bhi.w	800863c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	08008539 	.word	0x08008539
 8008508:	0800863d 	.word	0x0800863d
 800850c:	0800863d 	.word	0x0800863d
 8008510:	0800863d 	.word	0x0800863d
 8008514:	08008579 	.word	0x08008579
 8008518:	0800863d 	.word	0x0800863d
 800851c:	0800863d 	.word	0x0800863d
 8008520:	0800863d 	.word	0x0800863d
 8008524:	080085bb 	.word	0x080085bb
 8008528:	0800863d 	.word	0x0800863d
 800852c:	0800863d 	.word	0x0800863d
 8008530:	0800863d 	.word	0x0800863d
 8008534:	080085fb 	.word	0x080085fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f9d0 	bl	80088e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699a      	ldr	r2, [r3, #24]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0208 	orr.w	r2, r2, #8
 8008552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0204 	bic.w	r2, r2, #4
 8008562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6999      	ldr	r1, [r3, #24]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	691a      	ldr	r2, [r3, #16]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	619a      	str	r2, [r3, #24]
      break;
 8008576:	e064      	b.n	8008642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fa16 	bl	80089b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6999      	ldr	r1, [r3, #24]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	021a      	lsls	r2, r3, #8
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	619a      	str	r2, [r3, #24]
      break;
 80085b8:	e043      	b.n	8008642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68b9      	ldr	r1, [r7, #8]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 fa61 	bl	8008a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69da      	ldr	r2, [r3, #28]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f042 0208 	orr.w	r2, r2, #8
 80085d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69da      	ldr	r2, [r3, #28]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 0204 	bic.w	r2, r2, #4
 80085e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69d9      	ldr	r1, [r3, #28]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	691a      	ldr	r2, [r3, #16]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	61da      	str	r2, [r3, #28]
      break;
 80085f8:	e023      	b.n	8008642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 faab 	bl	8008b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69da      	ldr	r2, [r3, #28]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69d9      	ldr	r1, [r3, #28]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	021a      	lsls	r2, r3, #8
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	61da      	str	r2, [r3, #28]
      break;
 800863a:	e002      	b.n	8008642 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	75fb      	strb	r3, [r7, #23]
      break;
 8008640:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800864a:	7dfb      	ldrb	r3, [r7, #23]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008668:	2b01      	cmp	r3, #1
 800866a:	d101      	bne.n	8008670 <HAL_TIM_ConfigClockSource+0x1c>
 800866c:	2302      	movs	r3, #2
 800866e:	e0b4      	b.n	80087da <HAL_TIM_ConfigClockSource+0x186>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800868e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a8:	d03e      	beq.n	8008728 <HAL_TIM_ConfigClockSource+0xd4>
 80086aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ae:	f200 8087 	bhi.w	80087c0 <HAL_TIM_ConfigClockSource+0x16c>
 80086b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b6:	f000 8086 	beq.w	80087c6 <HAL_TIM_ConfigClockSource+0x172>
 80086ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086be:	d87f      	bhi.n	80087c0 <HAL_TIM_ConfigClockSource+0x16c>
 80086c0:	2b70      	cmp	r3, #112	; 0x70
 80086c2:	d01a      	beq.n	80086fa <HAL_TIM_ConfigClockSource+0xa6>
 80086c4:	2b70      	cmp	r3, #112	; 0x70
 80086c6:	d87b      	bhi.n	80087c0 <HAL_TIM_ConfigClockSource+0x16c>
 80086c8:	2b60      	cmp	r3, #96	; 0x60
 80086ca:	d050      	beq.n	800876e <HAL_TIM_ConfigClockSource+0x11a>
 80086cc:	2b60      	cmp	r3, #96	; 0x60
 80086ce:	d877      	bhi.n	80087c0 <HAL_TIM_ConfigClockSource+0x16c>
 80086d0:	2b50      	cmp	r3, #80	; 0x50
 80086d2:	d03c      	beq.n	800874e <HAL_TIM_ConfigClockSource+0xfa>
 80086d4:	2b50      	cmp	r3, #80	; 0x50
 80086d6:	d873      	bhi.n	80087c0 <HAL_TIM_ConfigClockSource+0x16c>
 80086d8:	2b40      	cmp	r3, #64	; 0x40
 80086da:	d058      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x13a>
 80086dc:	2b40      	cmp	r3, #64	; 0x40
 80086de:	d86f      	bhi.n	80087c0 <HAL_TIM_ConfigClockSource+0x16c>
 80086e0:	2b30      	cmp	r3, #48	; 0x30
 80086e2:	d064      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x15a>
 80086e4:	2b30      	cmp	r3, #48	; 0x30
 80086e6:	d86b      	bhi.n	80087c0 <HAL_TIM_ConfigClockSource+0x16c>
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	d060      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x15a>
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d867      	bhi.n	80087c0 <HAL_TIM_ConfigClockSource+0x16c>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d05c      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x15a>
 80086f4:	2b10      	cmp	r3, #16
 80086f6:	d05a      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x15a>
 80086f8:	e062      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6818      	ldr	r0, [r3, #0]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	6899      	ldr	r1, [r3, #8]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f000 fc0f 	bl	8008f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800871c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	609a      	str	r2, [r3, #8]
      break;
 8008726:	e04f      	b.n	80087c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	6899      	ldr	r1, [r3, #8]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f000 fbf8 	bl	8008f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800874a:	609a      	str	r2, [r3, #8]
      break;
 800874c:	e03c      	b.n	80087c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	6859      	ldr	r1, [r3, #4]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	461a      	mov	r2, r3
 800875c:	f000 fab6 	bl	8008ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2150      	movs	r1, #80	; 0x50
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fbc5 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 800876c:	e02c      	b.n	80087c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6818      	ldr	r0, [r3, #0]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	6859      	ldr	r1, [r3, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	461a      	mov	r2, r3
 800877c:	f000 fb12 	bl	8008da4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2160      	movs	r1, #96	; 0x60
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fbb5 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 800878c:	e01c      	b.n	80087c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6818      	ldr	r0, [r3, #0]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	6859      	ldr	r1, [r3, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	461a      	mov	r2, r3
 800879c:	f000 fa96 	bl	8008ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2140      	movs	r1, #64	; 0x40
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fba5 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 80087ac:	e00c      	b.n	80087c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f000 fb9c 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 80087be:	e003      	b.n	80087c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	73fb      	strb	r3, [r7, #15]
      break;
 80087c4:	e000      	b.n	80087c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a34      	ldr	r2, [pc, #208]	; (80088c8 <TIM_Base_SetConfig+0xe4>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d00f      	beq.n	800881c <TIM_Base_SetConfig+0x38>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008802:	d00b      	beq.n	800881c <TIM_Base_SetConfig+0x38>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a31      	ldr	r2, [pc, #196]	; (80088cc <TIM_Base_SetConfig+0xe8>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d007      	beq.n	800881c <TIM_Base_SetConfig+0x38>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a30      	ldr	r2, [pc, #192]	; (80088d0 <TIM_Base_SetConfig+0xec>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d003      	beq.n	800881c <TIM_Base_SetConfig+0x38>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a2f      	ldr	r2, [pc, #188]	; (80088d4 <TIM_Base_SetConfig+0xf0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d108      	bne.n	800882e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a25      	ldr	r2, [pc, #148]	; (80088c8 <TIM_Base_SetConfig+0xe4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01b      	beq.n	800886e <TIM_Base_SetConfig+0x8a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883c:	d017      	beq.n	800886e <TIM_Base_SetConfig+0x8a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a22      	ldr	r2, [pc, #136]	; (80088cc <TIM_Base_SetConfig+0xe8>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <TIM_Base_SetConfig+0x8a>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a21      	ldr	r2, [pc, #132]	; (80088d0 <TIM_Base_SetConfig+0xec>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00f      	beq.n	800886e <TIM_Base_SetConfig+0x8a>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a20      	ldr	r2, [pc, #128]	; (80088d4 <TIM_Base_SetConfig+0xf0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d00b      	beq.n	800886e <TIM_Base_SetConfig+0x8a>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a1f      	ldr	r2, [pc, #124]	; (80088d8 <TIM_Base_SetConfig+0xf4>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d007      	beq.n	800886e <TIM_Base_SetConfig+0x8a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a1e      	ldr	r2, [pc, #120]	; (80088dc <TIM_Base_SetConfig+0xf8>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d003      	beq.n	800886e <TIM_Base_SetConfig+0x8a>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a1d      	ldr	r2, [pc, #116]	; (80088e0 <TIM_Base_SetConfig+0xfc>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d108      	bne.n	8008880 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	4313      	orrs	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	689a      	ldr	r2, [r3, #8]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a08      	ldr	r2, [pc, #32]	; (80088c8 <TIM_Base_SetConfig+0xe4>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d103      	bne.n	80088b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	691a      	ldr	r2, [r3, #16]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	615a      	str	r2, [r3, #20]
}
 80088ba:	bf00      	nop
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	40010000 	.word	0x40010000
 80088cc:	40000400 	.word	0x40000400
 80088d0:	40000800 	.word	0x40000800
 80088d4:	40000c00 	.word	0x40000c00
 80088d8:	40014000 	.word	0x40014000
 80088dc:	40014400 	.word	0x40014400
 80088e0:	40014800 	.word	0x40014800

080088e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f023 0201 	bic.w	r2, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f023 0302 	bic.w	r3, r3, #2
 800892c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a1c      	ldr	r2, [pc, #112]	; (80089ac <TIM_OC1_SetConfig+0xc8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d10c      	bne.n	800895a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f023 0308 	bic.w	r3, r3, #8
 8008946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f023 0304 	bic.w	r3, r3, #4
 8008958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a13      	ldr	r2, [pc, #76]	; (80089ac <TIM_OC1_SetConfig+0xc8>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d111      	bne.n	8008986 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4313      	orrs	r3, r2
 800897a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	4313      	orrs	r3, r2
 8008984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	621a      	str	r2, [r3, #32]
}
 80089a0:	bf00      	nop
 80089a2:	371c      	adds	r7, #28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	40010000 	.word	0x40010000

080089b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	f023 0210 	bic.w	r2, r3, #16
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f023 0320 	bic.w	r3, r3, #32
 80089fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a1e      	ldr	r2, [pc, #120]	; (8008a84 <TIM_OC2_SetConfig+0xd4>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d10d      	bne.n	8008a2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a15      	ldr	r2, [pc, #84]	; (8008a84 <TIM_OC2_SetConfig+0xd4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d113      	bne.n	8008a5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	621a      	str	r2, [r3, #32]
}
 8008a76:	bf00      	nop
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	40010000 	.word	0x40010000

08008a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a1d      	ldr	r2, [pc, #116]	; (8008b58 <TIM_OC3_SetConfig+0xd0>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d10d      	bne.n	8008b02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	021b      	lsls	r3, r3, #8
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a14      	ldr	r2, [pc, #80]	; (8008b58 <TIM_OC3_SetConfig+0xd0>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d113      	bne.n	8008b32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	621a      	str	r2, [r3, #32]
}
 8008b4c:	bf00      	nop
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	40010000 	.word	0x40010000

08008b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	021b      	lsls	r3, r3, #8
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	031b      	lsls	r3, r3, #12
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a10      	ldr	r2, [pc, #64]	; (8008bf8 <TIM_OC4_SetConfig+0x9c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d109      	bne.n	8008bd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	019b      	lsls	r3, r3, #6
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	40010000 	.word	0x40010000

08008bfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	f023 0201 	bic.w	r2, r3, #1
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4a24      	ldr	r2, [pc, #144]	; (8008cb8 <TIM_TI1_SetConfig+0xbc>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d013      	beq.n	8008c52 <TIM_TI1_SetConfig+0x56>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c30:	d00f      	beq.n	8008c52 <TIM_TI1_SetConfig+0x56>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4a21      	ldr	r2, [pc, #132]	; (8008cbc <TIM_TI1_SetConfig+0xc0>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d00b      	beq.n	8008c52 <TIM_TI1_SetConfig+0x56>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	4a20      	ldr	r2, [pc, #128]	; (8008cc0 <TIM_TI1_SetConfig+0xc4>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d007      	beq.n	8008c52 <TIM_TI1_SetConfig+0x56>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4a1f      	ldr	r2, [pc, #124]	; (8008cc4 <TIM_TI1_SetConfig+0xc8>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d003      	beq.n	8008c52 <TIM_TI1_SetConfig+0x56>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4a1e      	ldr	r2, [pc, #120]	; (8008cc8 <TIM_TI1_SetConfig+0xcc>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d101      	bne.n	8008c56 <TIM_TI1_SetConfig+0x5a>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e000      	b.n	8008c58 <TIM_TI1_SetConfig+0x5c>
 8008c56:	2300      	movs	r3, #0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d008      	beq.n	8008c6e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f023 0303 	bic.w	r3, r3, #3
 8008c62:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	e003      	b.n	8008c76 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f043 0301 	orr.w	r3, r3, #1
 8008c74:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	011b      	lsls	r3, r3, #4
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f023 030a 	bic.w	r3, r3, #10
 8008c90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	f003 030a 	and.w	r3, r3, #10
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	40010000 	.word	0x40010000
 8008cbc:	40000400 	.word	0x40000400
 8008cc0:	40000800 	.word	0x40000800
 8008cc4:	40000c00 	.word	0x40000c00
 8008cc8:	40014000 	.word	0x40014000

08008ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	f023 0201 	bic.w	r2, r3, #1
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f023 030a 	bic.w	r3, r3, #10
 8008d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	621a      	str	r2, [r3, #32]
}
 8008d1e:	bf00      	nop
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b087      	sub	sp, #28
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
 8008d36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6a1b      	ldr	r3, [r3, #32]
 8008d3c:	f023 0210 	bic.w	r2, r3, #16
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	031b      	lsls	r3, r3, #12
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	621a      	str	r2, [r3, #32]
}
 8008d98:	bf00      	nop
 8008d9a:	371c      	adds	r7, #28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	f023 0210 	bic.w	r2, r3, #16
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	031b      	lsls	r3, r3, #12
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008de0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	621a      	str	r2, [r3, #32]
}
 8008df8:	bf00      	nop
 8008dfa:	371c      	adds	r7, #28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f023 0303 	bic.w	r3, r3, #3
 8008e30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008e54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	621a      	str	r2, [r3, #32]
}
 8008e70:	bf00      	nop
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ea8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	021b      	lsls	r3, r3, #8
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008eba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	031b      	lsls	r3, r3, #12
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008ece:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	031b      	lsls	r3, r3, #12
 8008ed4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b085      	sub	sp, #20
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f043 0307 	orr.w	r3, r3, #7
 8008f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	609a      	str	r2, [r3, #8]
}
 8008f20:	bf00      	nop
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	021a      	lsls	r2, r3, #8
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	609a      	str	r2, [r3, #8]
}
 8008f60:	bf00      	nop
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d101      	bne.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f80:	2302      	movs	r3, #2
 8008f82:	e050      	b.n	8009026 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a1c      	ldr	r2, [pc, #112]	; (8009034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d018      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd0:	d013      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a18      	ldr	r2, [pc, #96]	; (8009038 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d00e      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a16      	ldr	r2, [pc, #88]	; (800903c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d009      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a15      	ldr	r2, [pc, #84]	; (8009040 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d004      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a13      	ldr	r2, [pc, #76]	; (8009044 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d10c      	bne.n	8009014 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	4313      	orrs	r3, r2
 800900a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40010000 	.word	0x40010000
 8009038:	40000400 	.word	0x40000400
 800903c:	40000800 	.word	0x40000800
 8009040:	40000c00 	.word	0x40000c00
 8009044:	40014000 	.word	0x40014000

08009048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009060:	2302      	movs	r3, #2
 8009062:	e03d      	b.n	80090e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	4313      	orrs	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	4313      	orrs	r3, r2
 8009094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e03f      	b.n	800917e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7fa ff44 	bl	8003fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2224      	movs	r2, #36	; 0x24
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800912e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f829 	bl	8009188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	691a      	ldr	r2, [r3, #16]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	695a      	ldr	r2, [r3, #20]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68da      	ldr	r2, [r3, #12]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2220      	movs	r2, #32
 8009178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800918c:	b0c0      	sub	sp, #256	; 0x100
 800918e:	af00      	add	r7, sp, #0
 8009190:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80091a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a4:	68d9      	ldr	r1, [r3, #12]
 80091a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	ea40 0301 	orr.w	r3, r0, r1
 80091b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	431a      	orrs	r2, r3
 80091c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	431a      	orrs	r2, r3
 80091c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091e0:	f021 010c 	bic.w	r1, r1, #12
 80091e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091ee:	430b      	orrs	r3, r1
 80091f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009202:	6999      	ldr	r1, [r3, #24]
 8009204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	ea40 0301 	orr.w	r3, r0, r1
 800920e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	4b8f      	ldr	r3, [pc, #572]	; (8009454 <UART_SetConfig+0x2cc>)
 8009218:	429a      	cmp	r2, r3
 800921a:	d005      	beq.n	8009228 <UART_SetConfig+0xa0>
 800921c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	4b8d      	ldr	r3, [pc, #564]	; (8009458 <UART_SetConfig+0x2d0>)
 8009224:	429a      	cmp	r2, r3
 8009226:	d104      	bne.n	8009232 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009228:	f7fe ff18 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 800922c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009230:	e003      	b.n	800923a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009232:	f7fe feff 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 8009236:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800923a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009244:	f040 810c 	bne.w	8009460 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800924c:	2200      	movs	r2, #0
 800924e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009252:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009256:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800925a:	4622      	mov	r2, r4
 800925c:	462b      	mov	r3, r5
 800925e:	1891      	adds	r1, r2, r2
 8009260:	65b9      	str	r1, [r7, #88]	; 0x58
 8009262:	415b      	adcs	r3, r3
 8009264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800926a:	4621      	mov	r1, r4
 800926c:	eb12 0801 	adds.w	r8, r2, r1
 8009270:	4629      	mov	r1, r5
 8009272:	eb43 0901 	adc.w	r9, r3, r1
 8009276:	f04f 0200 	mov.w	r2, #0
 800927a:	f04f 0300 	mov.w	r3, #0
 800927e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800928a:	4690      	mov	r8, r2
 800928c:	4699      	mov	r9, r3
 800928e:	4623      	mov	r3, r4
 8009290:	eb18 0303 	adds.w	r3, r8, r3
 8009294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009298:	462b      	mov	r3, r5
 800929a:	eb49 0303 	adc.w	r3, r9, r3
 800929e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80092b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092b6:	460b      	mov	r3, r1
 80092b8:	18db      	adds	r3, r3, r3
 80092ba:	653b      	str	r3, [r7, #80]	; 0x50
 80092bc:	4613      	mov	r3, r2
 80092be:	eb42 0303 	adc.w	r3, r2, r3
 80092c2:	657b      	str	r3, [r7, #84]	; 0x54
 80092c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80092c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80092cc:	f7f7 fbc2 	bl	8000a54 <__aeabi_uldivmod>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4b61      	ldr	r3, [pc, #388]	; (800945c <UART_SetConfig+0x2d4>)
 80092d6:	fba3 2302 	umull	r2, r3, r3, r2
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	011c      	lsls	r4, r3, #4
 80092de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092f0:	4642      	mov	r2, r8
 80092f2:	464b      	mov	r3, r9
 80092f4:	1891      	adds	r1, r2, r2
 80092f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80092f8:	415b      	adcs	r3, r3
 80092fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009300:	4641      	mov	r1, r8
 8009302:	eb12 0a01 	adds.w	sl, r2, r1
 8009306:	4649      	mov	r1, r9
 8009308:	eb43 0b01 	adc.w	fp, r3, r1
 800930c:	f04f 0200 	mov.w	r2, #0
 8009310:	f04f 0300 	mov.w	r3, #0
 8009314:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009318:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800931c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009320:	4692      	mov	sl, r2
 8009322:	469b      	mov	fp, r3
 8009324:	4643      	mov	r3, r8
 8009326:	eb1a 0303 	adds.w	r3, sl, r3
 800932a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800932e:	464b      	mov	r3, r9
 8009330:	eb4b 0303 	adc.w	r3, fp, r3
 8009334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009344:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009348:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800934c:	460b      	mov	r3, r1
 800934e:	18db      	adds	r3, r3, r3
 8009350:	643b      	str	r3, [r7, #64]	; 0x40
 8009352:	4613      	mov	r3, r2
 8009354:	eb42 0303 	adc.w	r3, r2, r3
 8009358:	647b      	str	r3, [r7, #68]	; 0x44
 800935a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800935e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009362:	f7f7 fb77 	bl	8000a54 <__aeabi_uldivmod>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	4611      	mov	r1, r2
 800936c:	4b3b      	ldr	r3, [pc, #236]	; (800945c <UART_SetConfig+0x2d4>)
 800936e:	fba3 2301 	umull	r2, r3, r3, r1
 8009372:	095b      	lsrs	r3, r3, #5
 8009374:	2264      	movs	r2, #100	; 0x64
 8009376:	fb02 f303 	mul.w	r3, r2, r3
 800937a:	1acb      	subs	r3, r1, r3
 800937c:	00db      	lsls	r3, r3, #3
 800937e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009382:	4b36      	ldr	r3, [pc, #216]	; (800945c <UART_SetConfig+0x2d4>)
 8009384:	fba3 2302 	umull	r2, r3, r3, r2
 8009388:	095b      	lsrs	r3, r3, #5
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009390:	441c      	add	r4, r3
 8009392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009396:	2200      	movs	r2, #0
 8009398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800939c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80093a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80093a4:	4642      	mov	r2, r8
 80093a6:	464b      	mov	r3, r9
 80093a8:	1891      	adds	r1, r2, r2
 80093aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80093ac:	415b      	adcs	r3, r3
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093b4:	4641      	mov	r1, r8
 80093b6:	1851      	adds	r1, r2, r1
 80093b8:	6339      	str	r1, [r7, #48]	; 0x30
 80093ba:	4649      	mov	r1, r9
 80093bc:	414b      	adcs	r3, r1
 80093be:	637b      	str	r3, [r7, #52]	; 0x34
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80093cc:	4659      	mov	r1, fp
 80093ce:	00cb      	lsls	r3, r1, #3
 80093d0:	4651      	mov	r1, sl
 80093d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093d6:	4651      	mov	r1, sl
 80093d8:	00ca      	lsls	r2, r1, #3
 80093da:	4610      	mov	r0, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	4603      	mov	r3, r0
 80093e0:	4642      	mov	r2, r8
 80093e2:	189b      	adds	r3, r3, r2
 80093e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093e8:	464b      	mov	r3, r9
 80093ea:	460a      	mov	r2, r1
 80093ec:	eb42 0303 	adc.w	r3, r2, r3
 80093f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009400:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009408:	460b      	mov	r3, r1
 800940a:	18db      	adds	r3, r3, r3
 800940c:	62bb      	str	r3, [r7, #40]	; 0x28
 800940e:	4613      	mov	r3, r2
 8009410:	eb42 0303 	adc.w	r3, r2, r3
 8009414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800941a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800941e:	f7f7 fb19 	bl	8000a54 <__aeabi_uldivmod>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4b0d      	ldr	r3, [pc, #52]	; (800945c <UART_SetConfig+0x2d4>)
 8009428:	fba3 1302 	umull	r1, r3, r3, r2
 800942c:	095b      	lsrs	r3, r3, #5
 800942e:	2164      	movs	r1, #100	; 0x64
 8009430:	fb01 f303 	mul.w	r3, r1, r3
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	3332      	adds	r3, #50	; 0x32
 800943a:	4a08      	ldr	r2, [pc, #32]	; (800945c <UART_SetConfig+0x2d4>)
 800943c:	fba2 2303 	umull	r2, r3, r2, r3
 8009440:	095b      	lsrs	r3, r3, #5
 8009442:	f003 0207 	and.w	r2, r3, #7
 8009446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4422      	add	r2, r4
 800944e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009450:	e105      	b.n	800965e <UART_SetConfig+0x4d6>
 8009452:	bf00      	nop
 8009454:	40011000 	.word	0x40011000
 8009458:	40011400 	.word	0x40011400
 800945c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009464:	2200      	movs	r2, #0
 8009466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800946a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800946e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009472:	4642      	mov	r2, r8
 8009474:	464b      	mov	r3, r9
 8009476:	1891      	adds	r1, r2, r2
 8009478:	6239      	str	r1, [r7, #32]
 800947a:	415b      	adcs	r3, r3
 800947c:	627b      	str	r3, [r7, #36]	; 0x24
 800947e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009482:	4641      	mov	r1, r8
 8009484:	1854      	adds	r4, r2, r1
 8009486:	4649      	mov	r1, r9
 8009488:	eb43 0501 	adc.w	r5, r3, r1
 800948c:	f04f 0200 	mov.w	r2, #0
 8009490:	f04f 0300 	mov.w	r3, #0
 8009494:	00eb      	lsls	r3, r5, #3
 8009496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800949a:	00e2      	lsls	r2, r4, #3
 800949c:	4614      	mov	r4, r2
 800949e:	461d      	mov	r5, r3
 80094a0:	4643      	mov	r3, r8
 80094a2:	18e3      	adds	r3, r4, r3
 80094a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094a8:	464b      	mov	r3, r9
 80094aa:	eb45 0303 	adc.w	r3, r5, r3
 80094ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	f04f 0300 	mov.w	r3, #0
 80094ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80094ce:	4629      	mov	r1, r5
 80094d0:	008b      	lsls	r3, r1, #2
 80094d2:	4621      	mov	r1, r4
 80094d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094d8:	4621      	mov	r1, r4
 80094da:	008a      	lsls	r2, r1, #2
 80094dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094e0:	f7f7 fab8 	bl	8000a54 <__aeabi_uldivmod>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4b60      	ldr	r3, [pc, #384]	; (800966c <UART_SetConfig+0x4e4>)
 80094ea:	fba3 2302 	umull	r2, r3, r3, r2
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	011c      	lsls	r4, r3, #4
 80094f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009500:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009504:	4642      	mov	r2, r8
 8009506:	464b      	mov	r3, r9
 8009508:	1891      	adds	r1, r2, r2
 800950a:	61b9      	str	r1, [r7, #24]
 800950c:	415b      	adcs	r3, r3
 800950e:	61fb      	str	r3, [r7, #28]
 8009510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009514:	4641      	mov	r1, r8
 8009516:	1851      	adds	r1, r2, r1
 8009518:	6139      	str	r1, [r7, #16]
 800951a:	4649      	mov	r1, r9
 800951c:	414b      	adcs	r3, r1
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	f04f 0200 	mov.w	r2, #0
 8009524:	f04f 0300 	mov.w	r3, #0
 8009528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800952c:	4659      	mov	r1, fp
 800952e:	00cb      	lsls	r3, r1, #3
 8009530:	4651      	mov	r1, sl
 8009532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009536:	4651      	mov	r1, sl
 8009538:	00ca      	lsls	r2, r1, #3
 800953a:	4610      	mov	r0, r2
 800953c:	4619      	mov	r1, r3
 800953e:	4603      	mov	r3, r0
 8009540:	4642      	mov	r2, r8
 8009542:	189b      	adds	r3, r3, r2
 8009544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009548:	464b      	mov	r3, r9
 800954a:	460a      	mov	r2, r1
 800954c:	eb42 0303 	adc.w	r3, r2, r3
 8009550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	67bb      	str	r3, [r7, #120]	; 0x78
 800955e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800956c:	4649      	mov	r1, r9
 800956e:	008b      	lsls	r3, r1, #2
 8009570:	4641      	mov	r1, r8
 8009572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009576:	4641      	mov	r1, r8
 8009578:	008a      	lsls	r2, r1, #2
 800957a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800957e:	f7f7 fa69 	bl	8000a54 <__aeabi_uldivmod>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4b39      	ldr	r3, [pc, #228]	; (800966c <UART_SetConfig+0x4e4>)
 8009588:	fba3 1302 	umull	r1, r3, r3, r2
 800958c:	095b      	lsrs	r3, r3, #5
 800958e:	2164      	movs	r1, #100	; 0x64
 8009590:	fb01 f303 	mul.w	r3, r1, r3
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	3332      	adds	r3, #50	; 0x32
 800959a:	4a34      	ldr	r2, [pc, #208]	; (800966c <UART_SetConfig+0x4e4>)
 800959c:	fba2 2303 	umull	r2, r3, r2, r3
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095a6:	441c      	add	r4, r3
 80095a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095ac:	2200      	movs	r2, #0
 80095ae:	673b      	str	r3, [r7, #112]	; 0x70
 80095b0:	677a      	str	r2, [r7, #116]	; 0x74
 80095b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80095b6:	4642      	mov	r2, r8
 80095b8:	464b      	mov	r3, r9
 80095ba:	1891      	adds	r1, r2, r2
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	415b      	adcs	r3, r3
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095c6:	4641      	mov	r1, r8
 80095c8:	1851      	adds	r1, r2, r1
 80095ca:	6039      	str	r1, [r7, #0]
 80095cc:	4649      	mov	r1, r9
 80095ce:	414b      	adcs	r3, r1
 80095d0:	607b      	str	r3, [r7, #4]
 80095d2:	f04f 0200 	mov.w	r2, #0
 80095d6:	f04f 0300 	mov.w	r3, #0
 80095da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095de:	4659      	mov	r1, fp
 80095e0:	00cb      	lsls	r3, r1, #3
 80095e2:	4651      	mov	r1, sl
 80095e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095e8:	4651      	mov	r1, sl
 80095ea:	00ca      	lsls	r2, r1, #3
 80095ec:	4610      	mov	r0, r2
 80095ee:	4619      	mov	r1, r3
 80095f0:	4603      	mov	r3, r0
 80095f2:	4642      	mov	r2, r8
 80095f4:	189b      	adds	r3, r3, r2
 80095f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80095f8:	464b      	mov	r3, r9
 80095fa:	460a      	mov	r2, r1
 80095fc:	eb42 0303 	adc.w	r3, r2, r3
 8009600:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	663b      	str	r3, [r7, #96]	; 0x60
 800960c:	667a      	str	r2, [r7, #100]	; 0x64
 800960e:	f04f 0200 	mov.w	r2, #0
 8009612:	f04f 0300 	mov.w	r3, #0
 8009616:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800961a:	4649      	mov	r1, r9
 800961c:	008b      	lsls	r3, r1, #2
 800961e:	4641      	mov	r1, r8
 8009620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009624:	4641      	mov	r1, r8
 8009626:	008a      	lsls	r2, r1, #2
 8009628:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800962c:	f7f7 fa12 	bl	8000a54 <__aeabi_uldivmod>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4b0d      	ldr	r3, [pc, #52]	; (800966c <UART_SetConfig+0x4e4>)
 8009636:	fba3 1302 	umull	r1, r3, r3, r2
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	2164      	movs	r1, #100	; 0x64
 800963e:	fb01 f303 	mul.w	r3, r1, r3
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	3332      	adds	r3, #50	; 0x32
 8009648:	4a08      	ldr	r2, [pc, #32]	; (800966c <UART_SetConfig+0x4e4>)
 800964a:	fba2 2303 	umull	r2, r3, r2, r3
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	f003 020f 	and.w	r2, r3, #15
 8009654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4422      	add	r2, r4
 800965c:	609a      	str	r2, [r3, #8]
}
 800965e:	bf00      	nop
 8009660:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009664:	46bd      	mov	sp, r7
 8009666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800966a:	bf00      	nop
 800966c:	51eb851f 	.word	0x51eb851f

08009670 <__errno>:
 8009670:	4b01      	ldr	r3, [pc, #4]	; (8009678 <__errno+0x8>)
 8009672:	6818      	ldr	r0, [r3, #0]
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	20000020 	.word	0x20000020

0800967c <__libc_init_array>:
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	4d0d      	ldr	r5, [pc, #52]	; (80096b4 <__libc_init_array+0x38>)
 8009680:	4c0d      	ldr	r4, [pc, #52]	; (80096b8 <__libc_init_array+0x3c>)
 8009682:	1b64      	subs	r4, r4, r5
 8009684:	10a4      	asrs	r4, r4, #2
 8009686:	2600      	movs	r6, #0
 8009688:	42a6      	cmp	r6, r4
 800968a:	d109      	bne.n	80096a0 <__libc_init_array+0x24>
 800968c:	4d0b      	ldr	r5, [pc, #44]	; (80096bc <__libc_init_array+0x40>)
 800968e:	4c0c      	ldr	r4, [pc, #48]	; (80096c0 <__libc_init_array+0x44>)
 8009690:	f000 fad8 	bl	8009c44 <_init>
 8009694:	1b64      	subs	r4, r4, r5
 8009696:	10a4      	asrs	r4, r4, #2
 8009698:	2600      	movs	r6, #0
 800969a:	42a6      	cmp	r6, r4
 800969c:	d105      	bne.n	80096aa <__libc_init_array+0x2e>
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a4:	4798      	blx	r3
 80096a6:	3601      	adds	r6, #1
 80096a8:	e7ee      	b.n	8009688 <__libc_init_array+0xc>
 80096aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ae:	4798      	blx	r3
 80096b0:	3601      	adds	r6, #1
 80096b2:	e7f2      	b.n	800969a <__libc_init_array+0x1e>
 80096b4:	08009cc4 	.word	0x08009cc4
 80096b8:	08009cc4 	.word	0x08009cc4
 80096bc:	08009cc4 	.word	0x08009cc4
 80096c0:	08009cc8 	.word	0x08009cc8

080096c4 <memset>:
 80096c4:	4402      	add	r2, r0
 80096c6:	4603      	mov	r3, r0
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d100      	bne.n	80096ce <memset+0xa>
 80096cc:	4770      	bx	lr
 80096ce:	f803 1b01 	strb.w	r1, [r3], #1
 80096d2:	e7f9      	b.n	80096c8 <memset+0x4>

080096d4 <asinf>:
 80096d4:	b508      	push	{r3, lr}
 80096d6:	ed2d 8b02 	vpush	{d8}
 80096da:	eeb0 8a40 	vmov.f32	s16, s0
 80096de:	f000 f845 	bl	800976c <__ieee754_asinf>
 80096e2:	eeb4 8a48 	vcmp.f32	s16, s16
 80096e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ea:	eef0 8a40 	vmov.f32	s17, s0
 80096ee:	d615      	bvs.n	800971c <asinf+0x48>
 80096f0:	eeb0 0a48 	vmov.f32	s0, s16
 80096f4:	f000 fa98 	bl	8009c28 <fabsf>
 80096f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80096fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009704:	dd0a      	ble.n	800971c <asinf+0x48>
 8009706:	f7ff ffb3 	bl	8009670 <__errno>
 800970a:	ecbd 8b02 	vpop	{d8}
 800970e:	2321      	movs	r3, #33	; 0x21
 8009710:	6003      	str	r3, [r0, #0]
 8009712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009716:	4804      	ldr	r0, [pc, #16]	; (8009728 <asinf+0x54>)
 8009718:	f000 ba8e 	b.w	8009c38 <nanf>
 800971c:	eeb0 0a68 	vmov.f32	s0, s17
 8009720:	ecbd 8b02 	vpop	{d8}
 8009724:	bd08      	pop	{r3, pc}
 8009726:	bf00      	nop
 8009728:	08009c80 	.word	0x08009c80

0800972c <atan2f>:
 800972c:	f000 b904 	b.w	8009938 <__ieee754_atan2f>

08009730 <sqrtf>:
 8009730:	b508      	push	{r3, lr}
 8009732:	ed2d 8b02 	vpush	{d8}
 8009736:	eeb0 8a40 	vmov.f32	s16, s0
 800973a:	f000 f99d 	bl	8009a78 <__ieee754_sqrtf>
 800973e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009746:	d60c      	bvs.n	8009762 <sqrtf+0x32>
 8009748:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009768 <sqrtf+0x38>
 800974c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009754:	d505      	bpl.n	8009762 <sqrtf+0x32>
 8009756:	f7ff ff8b 	bl	8009670 <__errno>
 800975a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800975e:	2321      	movs	r3, #33	; 0x21
 8009760:	6003      	str	r3, [r0, #0]
 8009762:	ecbd 8b02 	vpop	{d8}
 8009766:	bd08      	pop	{r3, pc}
 8009768:	00000000 	.word	0x00000000

0800976c <__ieee754_asinf>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	ee10 5a10 	vmov	r5, s0
 8009772:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009776:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800977a:	ed2d 8b04 	vpush	{d8-d9}
 800977e:	d10c      	bne.n	800979a <__ieee754_asinf+0x2e>
 8009780:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80098f8 <__ieee754_asinf+0x18c>
 8009784:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80098fc <__ieee754_asinf+0x190>
 8009788:	ee60 7a27 	vmul.f32	s15, s0, s15
 800978c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009790:	eeb0 0a67 	vmov.f32	s0, s15
 8009794:	ecbd 8b04 	vpop	{d8-d9}
 8009798:	bd38      	pop	{r3, r4, r5, pc}
 800979a:	dd04      	ble.n	80097a6 <__ieee754_asinf+0x3a>
 800979c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80097a0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80097a4:	e7f6      	b.n	8009794 <__ieee754_asinf+0x28>
 80097a6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80097aa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80097ae:	da0b      	bge.n	80097c8 <__ieee754_asinf+0x5c>
 80097b0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80097b4:	da52      	bge.n	800985c <__ieee754_asinf+0xf0>
 80097b6:	eddf 7a52 	vldr	s15, [pc, #328]	; 8009900 <__ieee754_asinf+0x194>
 80097ba:	ee70 7a27 	vadd.f32	s15, s0, s15
 80097be:	eef4 7ae8 	vcmpe.f32	s15, s17
 80097c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c6:	dce5      	bgt.n	8009794 <__ieee754_asinf+0x28>
 80097c8:	f000 fa2e 	bl	8009c28 <fabsf>
 80097cc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80097d0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80097d4:	ee20 8a08 	vmul.f32	s16, s0, s16
 80097d8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8009904 <__ieee754_asinf+0x198>
 80097dc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8009908 <__ieee754_asinf+0x19c>
 80097e0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800990c <__ieee754_asinf+0x1a0>
 80097e4:	eea8 7a27 	vfma.f32	s14, s16, s15
 80097e8:	eddf 7a49 	vldr	s15, [pc, #292]	; 8009910 <__ieee754_asinf+0x1a4>
 80097ec:	eee7 7a08 	vfma.f32	s15, s14, s16
 80097f0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8009914 <__ieee754_asinf+0x1a8>
 80097f4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80097f8:	eddf 7a47 	vldr	s15, [pc, #284]	; 8009918 <__ieee754_asinf+0x1ac>
 80097fc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009800:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800991c <__ieee754_asinf+0x1b0>
 8009804:	eea7 9a88 	vfma.f32	s18, s15, s16
 8009808:	eddf 7a45 	vldr	s15, [pc, #276]	; 8009920 <__ieee754_asinf+0x1b4>
 800980c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8009810:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8009924 <__ieee754_asinf+0x1b8>
 8009814:	eea7 7a88 	vfma.f32	s14, s15, s16
 8009818:	eddf 7a43 	vldr	s15, [pc, #268]	; 8009928 <__ieee754_asinf+0x1bc>
 800981c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009820:	eeb0 0a48 	vmov.f32	s0, s16
 8009824:	eee7 8a88 	vfma.f32	s17, s15, s16
 8009828:	f000 f926 	bl	8009a78 <__ieee754_sqrtf>
 800982c:	4b3f      	ldr	r3, [pc, #252]	; (800992c <__ieee754_asinf+0x1c0>)
 800982e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8009832:	429c      	cmp	r4, r3
 8009834:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8009838:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800983c:	dd3d      	ble.n	80098ba <__ieee754_asinf+0x14e>
 800983e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8009842:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8009930 <__ieee754_asinf+0x1c4>
 8009846:	eee0 7a26 	vfma.f32	s15, s0, s13
 800984a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80098fc <__ieee754_asinf+0x190>
 800984e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009852:	2d00      	cmp	r5, #0
 8009854:	bfd8      	it	le
 8009856:	eeb1 0a40 	vnegle.f32	s0, s0
 800985a:	e79b      	b.n	8009794 <__ieee754_asinf+0x28>
 800985c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009860:	eddf 6a28 	vldr	s13, [pc, #160]	; 8009904 <__ieee754_asinf+0x198>
 8009864:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009908 <__ieee754_asinf+0x19c>
 8009868:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800991c <__ieee754_asinf+0x1b0>
 800986c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009870:	eddf 6a27 	vldr	s13, [pc, #156]	; 8009910 <__ieee754_asinf+0x1a4>
 8009874:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009878:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009914 <__ieee754_asinf+0x1a8>
 800987c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009880:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009918 <__ieee754_asinf+0x1ac>
 8009884:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009888:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800990c <__ieee754_asinf+0x1a0>
 800988c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009890:	eddf 6a23 	vldr	s13, [pc, #140]	; 8009920 <__ieee754_asinf+0x1b4>
 8009894:	eee7 6a86 	vfma.f32	s13, s15, s12
 8009898:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8009924 <__ieee754_asinf+0x1b8>
 800989c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80098a0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8009928 <__ieee754_asinf+0x1bc>
 80098a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80098a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80098ac:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80098b0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80098b4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80098b8:	e76c      	b.n	8009794 <__ieee754_asinf+0x28>
 80098ba:	ee10 3a10 	vmov	r3, s0
 80098be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80098c2:	f023 030f 	bic.w	r3, r3, #15
 80098c6:	ee07 3a10 	vmov	s14, r3
 80098ca:	eea7 8a47 	vfms.f32	s16, s14, s14
 80098ce:	ee70 7a07 	vadd.f32	s15, s0, s14
 80098d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80098d6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80098da:	eddf 7a07 	vldr	s15, [pc, #28]	; 80098f8 <__ieee754_asinf+0x18c>
 80098de:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80098e2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80098e6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8009934 <__ieee754_asinf+0x1c8>
 80098ea:	eeb0 6a40 	vmov.f32	s12, s0
 80098ee:	eea7 6a66 	vfms.f32	s12, s14, s13
 80098f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80098f6:	e7aa      	b.n	800984e <__ieee754_asinf+0xe2>
 80098f8:	b33bbd2e 	.word	0xb33bbd2e
 80098fc:	3fc90fdb 	.word	0x3fc90fdb
 8009900:	7149f2ca 	.word	0x7149f2ca
 8009904:	3811ef08 	.word	0x3811ef08
 8009908:	3a4f7f04 	.word	0x3a4f7f04
 800990c:	3e2aaaab 	.word	0x3e2aaaab
 8009910:	bd241146 	.word	0xbd241146
 8009914:	3e4e0aa8 	.word	0x3e4e0aa8
 8009918:	bea6b090 	.word	0xbea6b090
 800991c:	3d9dc62e 	.word	0x3d9dc62e
 8009920:	bf303361 	.word	0xbf303361
 8009924:	4001572d 	.word	0x4001572d
 8009928:	c019d139 	.word	0xc019d139
 800992c:	3f799999 	.word	0x3f799999
 8009930:	333bbd2e 	.word	0x333bbd2e
 8009934:	3f490fdb 	.word	0x3f490fdb

08009938 <__ieee754_atan2f>:
 8009938:	ee10 2a90 	vmov	r2, s1
 800993c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009940:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009944:	b510      	push	{r4, lr}
 8009946:	eef0 7a40 	vmov.f32	s15, s0
 800994a:	dc06      	bgt.n	800995a <__ieee754_atan2f+0x22>
 800994c:	ee10 0a10 	vmov	r0, s0
 8009950:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009954:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009958:	dd04      	ble.n	8009964 <__ieee754_atan2f+0x2c>
 800995a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800995e:	eeb0 0a67 	vmov.f32	s0, s15
 8009962:	bd10      	pop	{r4, pc}
 8009964:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009968:	d103      	bne.n	8009972 <__ieee754_atan2f+0x3a>
 800996a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800996e:	f000 b887 	b.w	8009a80 <atanf>
 8009972:	1794      	asrs	r4, r2, #30
 8009974:	f004 0402 	and.w	r4, r4, #2
 8009978:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800997c:	b943      	cbnz	r3, 8009990 <__ieee754_atan2f+0x58>
 800997e:	2c02      	cmp	r4, #2
 8009980:	d05e      	beq.n	8009a40 <__ieee754_atan2f+0x108>
 8009982:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009a54 <__ieee754_atan2f+0x11c>
 8009986:	2c03      	cmp	r4, #3
 8009988:	bf08      	it	eq
 800998a:	eef0 7a47 	vmoveq.f32	s15, s14
 800998e:	e7e6      	b.n	800995e <__ieee754_atan2f+0x26>
 8009990:	b941      	cbnz	r1, 80099a4 <__ieee754_atan2f+0x6c>
 8009992:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009a58 <__ieee754_atan2f+0x120>
 8009996:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8009a5c <__ieee754_atan2f+0x124>
 800999a:	2800      	cmp	r0, #0
 800999c:	bfb8      	it	lt
 800999e:	eef0 7a40 	vmovlt.f32	s15, s0
 80099a2:	e7dc      	b.n	800995e <__ieee754_atan2f+0x26>
 80099a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80099a8:	d110      	bne.n	80099cc <__ieee754_atan2f+0x94>
 80099aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80099ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80099b2:	d107      	bne.n	80099c4 <__ieee754_atan2f+0x8c>
 80099b4:	2c02      	cmp	r4, #2
 80099b6:	d846      	bhi.n	8009a46 <__ieee754_atan2f+0x10e>
 80099b8:	4b29      	ldr	r3, [pc, #164]	; (8009a60 <__ieee754_atan2f+0x128>)
 80099ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099be:	edd4 7a00 	vldr	s15, [r4]
 80099c2:	e7cc      	b.n	800995e <__ieee754_atan2f+0x26>
 80099c4:	2c02      	cmp	r4, #2
 80099c6:	d841      	bhi.n	8009a4c <__ieee754_atan2f+0x114>
 80099c8:	4b26      	ldr	r3, [pc, #152]	; (8009a64 <__ieee754_atan2f+0x12c>)
 80099ca:	e7f6      	b.n	80099ba <__ieee754_atan2f+0x82>
 80099cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80099d0:	d0df      	beq.n	8009992 <__ieee754_atan2f+0x5a>
 80099d2:	1a5b      	subs	r3, r3, r1
 80099d4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80099d8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80099dc:	da1a      	bge.n	8009a14 <__ieee754_atan2f+0xdc>
 80099de:	2a00      	cmp	r2, #0
 80099e0:	da01      	bge.n	80099e6 <__ieee754_atan2f+0xae>
 80099e2:	313c      	adds	r1, #60	; 0x3c
 80099e4:	db19      	blt.n	8009a1a <__ieee754_atan2f+0xe2>
 80099e6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80099ea:	f000 f91d 	bl	8009c28 <fabsf>
 80099ee:	f000 f847 	bl	8009a80 <atanf>
 80099f2:	eef0 7a40 	vmov.f32	s15, s0
 80099f6:	2c01      	cmp	r4, #1
 80099f8:	d012      	beq.n	8009a20 <__ieee754_atan2f+0xe8>
 80099fa:	2c02      	cmp	r4, #2
 80099fc:	d017      	beq.n	8009a2e <__ieee754_atan2f+0xf6>
 80099fe:	2c00      	cmp	r4, #0
 8009a00:	d0ad      	beq.n	800995e <__ieee754_atan2f+0x26>
 8009a02:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009a68 <__ieee754_atan2f+0x130>
 8009a06:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009a0a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8009a6c <__ieee754_atan2f+0x134>
 8009a0e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009a12:	e7a4      	b.n	800995e <__ieee754_atan2f+0x26>
 8009a14:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009a58 <__ieee754_atan2f+0x120>
 8009a18:	e7ed      	b.n	80099f6 <__ieee754_atan2f+0xbe>
 8009a1a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009a70 <__ieee754_atan2f+0x138>
 8009a1e:	e7ea      	b.n	80099f6 <__ieee754_atan2f+0xbe>
 8009a20:	ee17 3a90 	vmov	r3, s15
 8009a24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a28:	ee07 3a90 	vmov	s15, r3
 8009a2c:	e797      	b.n	800995e <__ieee754_atan2f+0x26>
 8009a2e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009a68 <__ieee754_atan2f+0x130>
 8009a32:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009a36:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8009a6c <__ieee754_atan2f+0x134>
 8009a3a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009a3e:	e78e      	b.n	800995e <__ieee754_atan2f+0x26>
 8009a40:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009a6c <__ieee754_atan2f+0x134>
 8009a44:	e78b      	b.n	800995e <__ieee754_atan2f+0x26>
 8009a46:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009a74 <__ieee754_atan2f+0x13c>
 8009a4a:	e788      	b.n	800995e <__ieee754_atan2f+0x26>
 8009a4c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009a70 <__ieee754_atan2f+0x138>
 8009a50:	e785      	b.n	800995e <__ieee754_atan2f+0x26>
 8009a52:	bf00      	nop
 8009a54:	c0490fdb 	.word	0xc0490fdb
 8009a58:	3fc90fdb 	.word	0x3fc90fdb
 8009a5c:	bfc90fdb 	.word	0xbfc90fdb
 8009a60:	08009c84 	.word	0x08009c84
 8009a64:	08009c90 	.word	0x08009c90
 8009a68:	33bbbd2e 	.word	0x33bbbd2e
 8009a6c:	40490fdb 	.word	0x40490fdb
 8009a70:	00000000 	.word	0x00000000
 8009a74:	3f490fdb 	.word	0x3f490fdb

08009a78 <__ieee754_sqrtf>:
 8009a78:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009a7c:	4770      	bx	lr
	...

08009a80 <atanf>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	ee10 5a10 	vmov	r5, s0
 8009a86:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009a8a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009a8e:	eef0 7a40 	vmov.f32	s15, s0
 8009a92:	db10      	blt.n	8009ab6 <atanf+0x36>
 8009a94:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009a98:	dd04      	ble.n	8009aa4 <atanf+0x24>
 8009a9a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009bdc <atanf+0x15c>
 8009aa8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009be0 <atanf+0x160>
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	bfd8      	it	le
 8009ab0:	eef0 7a40 	vmovle.f32	s15, s0
 8009ab4:	e7f3      	b.n	8009a9e <atanf+0x1e>
 8009ab6:	4b4b      	ldr	r3, [pc, #300]	; (8009be4 <atanf+0x164>)
 8009ab8:	429c      	cmp	r4, r3
 8009aba:	dc10      	bgt.n	8009ade <atanf+0x5e>
 8009abc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009ac0:	da0a      	bge.n	8009ad8 <atanf+0x58>
 8009ac2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009be8 <atanf+0x168>
 8009ac6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ace:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad6:	dce2      	bgt.n	8009a9e <atanf+0x1e>
 8009ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8009adc:	e013      	b.n	8009b06 <atanf+0x86>
 8009ade:	f000 f8a3 	bl	8009c28 <fabsf>
 8009ae2:	4b42      	ldr	r3, [pc, #264]	; (8009bec <atanf+0x16c>)
 8009ae4:	429c      	cmp	r4, r3
 8009ae6:	dc4f      	bgt.n	8009b88 <atanf+0x108>
 8009ae8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009aec:	429c      	cmp	r4, r3
 8009aee:	dc41      	bgt.n	8009b74 <atanf+0xf4>
 8009af0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009af4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009af8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009afc:	2300      	movs	r3, #0
 8009afe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009b0c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009bf0 <atanf+0x170>
 8009b10:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009bf4 <atanf+0x174>
 8009b14:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009bf8 <atanf+0x178>
 8009b18:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009b1c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009b20:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009bfc <atanf+0x17c>
 8009b24:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009b28:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009c00 <atanf+0x180>
 8009b2c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009b30:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009c04 <atanf+0x184>
 8009b34:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009b38:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009c08 <atanf+0x188>
 8009b3c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009b40:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009c0c <atanf+0x18c>
 8009b44:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009b48:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009c10 <atanf+0x190>
 8009b4c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009b50:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009c14 <atanf+0x194>
 8009b54:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009b58:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009c18 <atanf+0x198>
 8009b5c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009b60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009b64:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009b68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009b6c:	d121      	bne.n	8009bb2 <atanf+0x132>
 8009b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b72:	e794      	b.n	8009a9e <atanf+0x1e>
 8009b74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009b78:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009b7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b80:	2301      	movs	r3, #1
 8009b82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009b86:	e7be      	b.n	8009b06 <atanf+0x86>
 8009b88:	4b24      	ldr	r3, [pc, #144]	; (8009c1c <atanf+0x19c>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	dc0b      	bgt.n	8009ba6 <atanf+0x126>
 8009b8e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b96:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ba4:	e7af      	b.n	8009b06 <atanf+0x86>
 8009ba6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009baa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e7a9      	b.n	8009b06 <atanf+0x86>
 8009bb2:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <atanf+0x1a0>)
 8009bb4:	491b      	ldr	r1, [pc, #108]	; (8009c24 <atanf+0x1a4>)
 8009bb6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009bba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009bbe:	ed93 0a00 	vldr	s0, [r3]
 8009bc2:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009bc6:	ed92 0a00 	vldr	s0, [r2]
 8009bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bce:	2d00      	cmp	r5, #0
 8009bd0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009bd4:	bfb8      	it	lt
 8009bd6:	eef1 7a67 	vneglt.f32	s15, s15
 8009bda:	e760      	b.n	8009a9e <atanf+0x1e>
 8009bdc:	3fc90fdb 	.word	0x3fc90fdb
 8009be0:	bfc90fdb 	.word	0xbfc90fdb
 8009be4:	3edfffff 	.word	0x3edfffff
 8009be8:	7149f2ca 	.word	0x7149f2ca
 8009bec:	3f97ffff 	.word	0x3f97ffff
 8009bf0:	3c8569d7 	.word	0x3c8569d7
 8009bf4:	3d4bda59 	.word	0x3d4bda59
 8009bf8:	bd6ef16b 	.word	0xbd6ef16b
 8009bfc:	3d886b35 	.word	0x3d886b35
 8009c00:	3dba2e6e 	.word	0x3dba2e6e
 8009c04:	3e124925 	.word	0x3e124925
 8009c08:	3eaaaaab 	.word	0x3eaaaaab
 8009c0c:	bd15a221 	.word	0xbd15a221
 8009c10:	bd9d8795 	.word	0xbd9d8795
 8009c14:	bde38e38 	.word	0xbde38e38
 8009c18:	be4ccccd 	.word	0xbe4ccccd
 8009c1c:	401bffff 	.word	0x401bffff
 8009c20:	08009c9c 	.word	0x08009c9c
 8009c24:	08009cac 	.word	0x08009cac

08009c28 <fabsf>:
 8009c28:	ee10 3a10 	vmov	r3, s0
 8009c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c30:	ee00 3a10 	vmov	s0, r3
 8009c34:	4770      	bx	lr
	...

08009c38 <nanf>:
 8009c38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009c40 <nanf+0x8>
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	7fc00000 	.word	0x7fc00000

08009c44 <_init>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	bf00      	nop
 8009c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4a:	bc08      	pop	{r3}
 8009c4c:	469e      	mov	lr, r3
 8009c4e:	4770      	bx	lr

08009c50 <_fini>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	bf00      	nop
 8009c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c56:	bc08      	pop	{r3}
 8009c58:	469e      	mov	lr, r3
 8009c5a:	4770      	bx	lr
